generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                         = "node node_modules/prisma-nestjs-graphql"
  fields_Validator_from            = "class-validator"
  useInputType_WhereInput_ALL      = "WhereInput"
  output                           = "../src/infra/graphql/prisma-generated"
  fields_Validator_input           = true
  unsafeCompatibleWhereUniqueInput = true
}

model User {
  id         String   @id @default(uuid())
  name       String
  username   String   @unique
  email      String   @unique
  role       String
  /// @HideField({ input: true, output: true })
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModelCreatedBy                       VehicleModel[]                       @relation("created_by")
  VehicleModelUpdatedBy                       VehicleModel[]                       @relation("updated_by")
  VehicleBrandCreatedBy                       VehicleBrand[]                       @relation("created_by")
  VehicleBrandUpdatedBy                       VehicleBrand[]                       @relation("updated_by")
  VehicleTypeCreatedBy                        VehicleType[]                        @relation("created_by")
  VehicleTypeUpdatedBy                        VehicleType[]                        @relation("updated_by")
  VehicleBodyworkCreatedBy                    VehicleBodywork[]                    @relation("created_by")
  VehicleBodyworkUpdatedBy                    VehicleBodywork[]                    @relation("updated_by")
  OutsourcedVehicleCreatedBy                  OutsourcedVehicle[]                  @relation("created_by")
  OutsourcedVehicleUpdatedBy                  OutsourcedVehicle[]                  @relation("updated_by")
  CompanyVehicleCreatedBy                     CompanyVehicle[]                     @relation("created_by")
  CompanyVehicleUpdatedBy                     CompanyVehicle[]                     @relation("updated_by")
  OutsourcedDriverCreatedBy                   OutsourcedDriver[]                   @relation("created_by")
  OutsourcedDriverUpdatedBy                   OutsourcedDriver[]                   @relation("updated_by")
  ContractOutsourcedDriverCreatedBy           ContractOutsourcedDriver[]           @relation("created_by")
  ContractOutsourcedDriverUpdatedBy           ContractOutsourcedDriver[]           @relation("updated_by")
  OwnDriverCreatedBy                          OwnDriver[]                          @relation("created_by")
  OwnDriverUpdatedBy                          OwnDriver[]                          @relation("updated_by")
  CarrierCompanyCreatedBt                     CarrierCompany[]                     @relation("created_by")
  CarrierCompanyUpdatedBy                     CarrierCompany[]                     @relation("updated_by")
  PhysicalCustomerCreatedBy                   PhysicalCustomer[]                   @relation("created_by")
  PhysicalCustomerUpdatedBy                   PhysicalCustomer[]                   @relation("updated_by")
  InvoiceForLegalClientCreatedBy              InvoiceForLegalClient[]              @relation("created_by")
  InvoiceForLegalClientUpdatedBy              InvoiceForLegalClient[]              @relation("updated_by")
  CiotForPhysicalClientCreatedBy              CiotForPhysicalClient[]              @relation("created_by")
  CiotForPhysicalClientUpdatedBy              CiotForPhysicalClient[]              @relation("updated_by")
  OrderProcessingCreatedBy                    OrderProcessing[]                    @relation("created_by")
  OrderProcessingUpdatedBy                    OrderProcessing[]                    @relation("updated_by")
  MaintenanceCreatedBy                        Maintenance[]                        @relation("created_by")
  MaintenanceUpdatedBy                        Maintenance[]                        @relation("updated_by")
  MaintenanceCompanyCreatedBy                 MaintenanceCompany[]                 @relation("created_by")
  MaintenanceCompanyUpdatedBy                 MaintenanceCompany[]                 @relation("updated_by")
  TypeOfMaintenanceCreatedBy                  TypeOfMaintenance[]                  @relation("created_by")
  TypeOfMaintenanceUpdatedBy                  TypeOfMaintenance[]                  @relation("updated_by")
  PhysicalCustomerOrderUpdatedBy              PhysicalCustomerOrder[]              @relation("updated_by")
  PhysicalCustomerOrderCreatedBy              PhysicalCustomerOrder[]              @relation("created_by")
  LegalClientCustomerOrderCreatedBy           LegalClientOrder[]                   @relation("created_by")
  LegalClientCustomerOrderUpdatedBy           LegalClientOrder[]                   @relation("updated_by")
  CiotForLegalUpdatedByClient                 CiotForLegalClient[]                 @relation("updated_by")
  CiotForLegalCreatedByClient                 CiotForLegalClient[]                 @relation("created_by")
  LegalClientUpdatedBy                        LegalClient[]                        @relation("updated_by")
  LegalClientCreatedBy                        LegalClient[]                        @relation("created_by")
  InvoiceForPhysicalClientUpdatedBy           InvoiceForPhysicalClient[]           @relation("updated_by")
  InvoiceForPhysicalClientCreatedBy           InvoiceForPhysicalClient[]           @relation("created_by")
  LegalContractCreatedBy                      LegalContract[]                      @relation("created_by")
  LegalContractUpdatedBy                      LegalContract[]                      @relation("updated_by")
  OutsourcedTransportCompanyUpdatedBy         OutsourcedTransportCompany[]         @relation("updated_by")
  OutsourcedTransportCompanyCreatedBy         OutsourcedTransportCompany[]         @relation("created_by")
  OutsourcedTransportVehicleCreatedBy         OutsourcedTransportVehicle[]         @relation("created_by")
  OutsourcedTransportVehicleUpdatedBy         OutsourcedTransportVehicle[]         @relation("updated_by")
  OutsourcedTransportCompanyDriverCreatedBy   OutsourcedTransportCompanyDriver[]   @relation("created_by")
  OutsourcedTransportCompanyDriverUpdatedBy   OutsourcedTransportCompanyDriver[]   @relation("updated_by")
  OutsourcedTransportCompanyContractCreatedBy OutsourcedTransportCompanyContract[] @relation("created_by")
  OutsourcedTransportCompanyContractUpdatedBy OutsourcedTransportCompanyContract[] @relation("updated_by")

  @@map("users")
}

model Vehicle {
  id                String             @id @default(uuid())
  plate             String             @unique
  year              String
  color             String
  renavam           String
  rntrc_expiration  String
  CompanyVehicle    CompanyVehicle?
  OrderProcessing   OrderProcessing?
  Maintenance       Maintenance[]
  OutsourcedVehicle OutsourcedVehicle?

  Model                      VehicleModel                @relation(fields: [model_id], references: [id])
  model_id                   String
  OutsourcedTransportVehicle OutsourcedTransportVehicle?

  @@map("vehicles")
}

model VehicleModel {
  id                String   @id @default(uuid())
  name              String
  weight            Float
  capacity_max      Float
  axles             Int
  capacity_per_axle Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  Vehicle Vehicle[]

  CreatedBy   User?        @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User?        @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String
  Brand       VehicleBrand @relation(fields: [brand_id], references: [id])
  brand_id    String
  VehicleType VehicleType  @relation(fields: [type_id], references: [id])
  type_id     String

  @@map("vehicle_models")
}

model VehicleBrand {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModel VehicleModel[]

  CreatedBy  User?  @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?  @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("vehicle_brands")
}

model VehicleType {
  id         String   @id @default(uuid())
  name       String   @unique
  bodywork   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModel    VehicleModel[]
  VehicleBodyWork VehicleBodywork[]

  CreatedBy  User?  @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?  @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("vehicle_types")
}

model VehicleBodywork {
  id         String   @id @default(uuid())
  name       String
  axles      Int
  mass       Float
  volume     Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  CreatedBy   User?         @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User?         @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String
  VehicleType VehicleType[]

  @@map("vehicle_bodyworks")
}

model OutsourcedVehicle {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  CreatedBy           User?             @relation("created_by", fields: [created_by], references: [id])
  created_by          String
  UpdatedBy           User?             @relation("updated_by", fields: [updated_by], references: [id])
  updated_by          String
  Vehicle             Vehicle           @relation(fields: [vehicle_id], references: [id])
  vehicle_id          String            @unique
  OrderProcessing     OrderProcessing?  @relation(fields: [order_processing_id], references: [id])
  order_processing_id String?
  OutsourcedDriver    OutsourcedDriver?

  @@map("outsourced_vehicles")
}

model CompanyVehicle {
  id                  String             @id @default(uuid())
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now())
  company_id          String
  CarrierCompany      CarrierCompany     @relation(fields: [company_id], references: [id])
  CreatedBy           User?              @relation("created_by", fields: [created_by], references: [id])
  created_by          String
  UpdatedBy           User?              @relation("updated_by", fields: [updated_by], references: [id])
  updated_by          String
  Vehicle             Vehicle            @relation(fields: [vehicle_id], references: [id])
  vehicle_id          String             @unique
  OrderProcessing     OrderProcessing?   @relation(fields: [order_processing_id], references: [id])
  order_processing_id String?
  OutsourcedDriver    OutsourcedDriver[]

  @@map("company_vehicles")
}

model OutsourcedTransportVehicle {
  id String @id @default(uuid())

  outsourced_company_id      String
  OutsourcedTransportCompany OutsourcedTransportCompany @relation(fields: [outsourced_company_id], references: [id])

  Vehicle    Vehicle @relation(fields: [vehicle_id], references: [id])
  vehicle_id String  @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  CreatedBy  User?    @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?    @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("outsourced_transport_vehicle")
}

model OutsourcedDriver {
  id                       String                     @id @default(uuid())
  cnh                      String                     @unique
  cnh_category             String
  cnh_expiration           DateTime
  course_mopp              Boolean                    @default(false)
  ContractOutsourcedDriver ContractOutsourcedDriver[]
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())

  CreatedBy             User?              @relation("created_by", fields: [created_by], references: [id])
  created_by            String
  UpdatedBy             User?              @relation("updated_by", fields: [updated_by], references: [id])
  updated_by            String
  NaturalPerson         NaturalPerson      @relation(fields: [natural_person_id], references: [id])
  natural_person_id     String             @unique
  OutsourcedVehicle     OutsourcedVehicle? @relation(fields: [outsourced_vehicle_id], references: [id])
  outsourced_vehicle_id String?            @unique
  company_vehicle_id    String?            @unique
  CompanyVehicle        CompanyVehicle?    @relation(fields: [company_vehicle_id], references: [id])

  @@map("outsourced_drivers")
}

model OutsourcedTransportCompanyDriver {
  id                              String                     @id @default(uuid())
  cnh                             String                     @unique
  cnh_category                    String
  cnh_expiration                  DateTime
  course_mopp                     Boolean                    @default(false)
  created_at                      DateTime                   @default(now())
  updated_at                      DateTime                   @default(now())
  CreatedBy                       User?                      @relation("created_by", fields: [created_by], references: [id])
  created_by                      String
  UpdatedBy                       User?                      @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                      String
  NaturalPerson                   NaturalPerson              @relation(fields: [natural_person_id], references: [id])
  natural_person_id               String                     @unique
  outsourced_transport_company_id String
  OutsourcedTransportCompany      OutsourcedTransportCompany @relation(fields: [outsourced_transport_company_id], references: [id])

  @@map("outsourcedT_transport_company_driver")
}

model ContractOutsourcedDriver {
  id                   String           @id @default(uuid())
  contract_number      String           @unique
  type                 String
  situation            String
  start_at             DateTime
  end_at               DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @default(now())
  cpf                  String
  CreatedBy            User?            @relation("created_by", fields: [created_by], references: [id])
  created_by           String
  UpdatedBy            User?            @relation("updated_by", fields: [updated_by], references: [id])
  updated_by           String
  OutsourcedDriver     OutsourcedDriver @relation(fields: [outsourced_driver_id], references: [id])
  outsourced_driver_id String

  @@map("contract_outsourced_drivers")
}

model OwnDriver {
  id              String   @id @default(uuid())
  cnh             String   @unique
  cnh_category    String
  cnh_expiration  DateTime
  company_vehicle Boolean  @default(false)
  course_mopp     Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  CreatedBy         User?         @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User?         @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String
  NaturalPerson     NaturalPerson @relation(fields: [natural_person_id], references: [id])
  natural_person_id String

  @@map("own_drivers")
}

model NaturalPerson {
  id             String   @id @default(uuid())
  name           String
  date_birth     DateTime
  gender         String
  cpf            String   @unique
  rg             String   @unique
  cep            String
  public_place   String
  address_number String
  neighborhood   String
  complement     String
  city           String
  uf             String
  first_phone    String
  second_phone   String?
  third_phone    String?
  email          String
  nationality    String

  OwnDriver                        OwnDriver[]
  OutsourcedDriver                 OutsourcedDriver[]
  PhysicalCustomer                 PhysicalCustomer[]
  OutsourcedTransportCompanyDriver OutsourcedTransportCompanyDriver?

  @@map("natural_people")
}

model PhysicalCustomer {
  id     String  @id @default(uuid())
  branch String?

  NaturalPerson     NaturalPerson     @relation(fields: [natural_person_id], references: [id])
  natural_person_id String            @unique
  PhysicalContract  PhysicalContract?
  CreatedBy         User              @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User              @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())

  @@map("physical_customers")
}

model PhysicalContract {
  id                    String                  @id @default(uuid())
  PhysicalCustomer      PhysicalCustomer        @relation(fields: [physicalCustomerId], references: [id])
  physicalCustomerId    String                  @unique
  Ciot                  CiotForPhysicalClient[]
  PhysicalCustomerOrder PhysicalCustomerOrder[]

  @@map("physical_Contracts")
}

model PhysicalCustomerMerchandise {
  id                       String                @id @default(uuid())
  codMerchandise           String                @unique
  amount                   Int
  description              String
  mass                     Float
  volume                   Float
  value                    Float
  PhysicalCustomerOrderm   PhysicalCustomerOrder @relation(fields: [physicalCustomerOrdermId], references: [id])
  physicalCustomerOrdermId String

  @@map("physical_merchandise")
}

model PhysicalCustomerOrder {
  id                          String                        @id @default(uuid())
  order                       String                        @unique
  updated_by                  String
  Route                       Routes[]
  PhysicalCustomerMerchandise PhysicalCustomerMerchandise[]
  Invoice                     InvoiceForPhysicalClient[]
  contractId                  String
  PhysicalContract            PhysicalContract              @relation(references: [id], fields: [contractId])
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @default(now())
  CreatedBy                   User                          @relation("created_by", fields: [created_by], references: [id])
  created_by                  String
  UpdatedBy                   User                          @relation("updated_by", fields: [updated_by], references: [id])

  @@map("physical_orders")
}

model InvoiceForPhysicalClient {
  id                      String                @id @default(uuid())
  emission_date           DateTime              @default(now())
  nature_invoice          String
  invoice_total           Float
  form_payment            String
  additional_data         String
  digital_signature       String                @unique
  invoice_taxes           Float
  created_at              DateTime              @default(now())
  updated_at              DateTime              @default(now())
  CreatedBy               User                  @relation("created_by", fields: [created_by], references: [id])
  created_by              String
  UpdatedBy               User                  @relation("updated_by", fields: [updated_by], references: [id])
  updated_by              String
  CarrierCompany          CarrierCompany        @relation(fields: [carrierCompanyId], references: [id])
  carrierCompanyId        String
  PhysicalCustomerOrder   PhysicalCustomerOrder @relation(fields: [physicalCustomerOrderId], references: [id])
  physicalCustomerOrderId String

  @@map("invoices_physical_client")
}

model CiotForPhysicalClient {
  id                 String           @id @default(uuid())
  ciot               String           @unique
  emission_date      DateTime         @default(now())
  CarrierCompany     CarrierCompany   @relation(fields: [carrier_id], references: [id])
  carrier_id         String
  PhysycalContract   PhysicalContract @relation(fields: [physycalContractId], references: [id])
  physycalContractId String
  created_at         DateTime         @default(now())
  updated_at         DateTime         @default(now())
  CreatedBy          User?            @relation("created_by", fields: [created_by], references: [id])
  created_by         String
  UpdatedBy          User?            @relation("updated_by", fields: [updated_by], references: [id])
  updated_by         String

  @@map("ciots_for_physical_clients")
}

model LegalPerson {
  id                         String                       @id @default(uuid())
  fantasy_name               String
  cnpj                       String                       @unique
  state_registration         String                       @unique
  corporate_name             String
  public_place               String
  address_number             String
  neighborhood               String
  complement                 String?
  city                       String
  uf                         String
  first_phone                String
  second_phone               String?
  third_phone                String?
  email                      String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  CorporateClient            LegalClient[]
  MaintenanceCompany         MaintenanceCompany?
  CarrierCompany             CarrierCompany[]
  OutsourcedTransportCompany OutsourcedTransportCompany[]

  @@map("legal_people")
}

model CarrierCompany {
  id                       String                     @id @default(uuid())
  Ciot                     CiotForPhysicalClient[]
  LegalPerson              LegalPerson                @relation(fields: [legal_person_id], references: [id])
  legal_person_id          String                     @unique
  InvoiceForPhysicalClient InvoiceForPhysicalClient[]
  LegalContract            LegalContract[]
  CompanyVehicle           CompanyVehicle[]

  created_at                         DateTime                             @default(now())
  updated_at                         DateTime                             @default(now())
  CreatedBy                          User?                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User?                                @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract[]

  @@map("carrier_companies")
}

model OutsourcedTransportCompany {
  id                                 String                               @id @default(uuid())
  legal_person_id                    String                               @unique
  LegalPerson                        LegalPerson                          @relation(fields: [legal_person_id], references: [id])
  created_at                         DateTime                             @default(now())
  updated_at                         DateTime                             @default(now())
  CreatedBy                          User?                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User                                 @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract[]
  OutsourcedCompanyVehicle           OutsourcedTransportVehicle[]
  OutsourcedTransportCompanyDriver   OutsourcedTransportCompanyDriver[]
}

model OutsourcedTransportCompanyContract {
  id                              String                     @id @default(uuid())
  contract_number                 String                     @unique
  outsourced_transport_company_id String
  OutsourcedTransportCompany      OutsourcedTransportCompany @relation(fields: [outsourced_transport_company_id], references: [id])
  carrier_company_id              String
  CarrierCompany                  CarrierCompany             @relation(fields: [carrier_company_id], references: [id])
  legal_client_order_id           String                     @unique
  LegalClientOrder                LegalClientOrder           @relation(fields: [legal_client_order_id], references: [id])
  created_at                      DateTime                   @default(now())
  updated_at                      DateTime                   @default(now())
  CreatedBy                       User?                      @relation("created_by", fields: [created_by], references: [id])
  created_by                      String
  UpdatedBy                       User                       @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                      String
}

model LegalClient {
  id              String          @id @default(uuid())
  branch          String
  LegalPerson     LegalPerson     @relation(fields: [legal_person_id], references: [id])
  legal_person_id String          @unique
  CreatedBy       User            @relation("created_by", fields: [created_by], references: [id])
  created_by      String
  UpdatedBy       User            @relation("updated_by", fields: [updated_by], references: [id])
  updated_by      String
  LegalContract   LegalContract[]

  @@map("legal_clients")
}

model LegalContract {
  id                  String               @id @default(uuid())
  contract_number     String               @unique
  LegalClient         LegalClient          @relation(fields: [legal_client_id], references: [id])
  legal_client_id     String
  CarrierCompany      CarrierCompany       @relation(fields: [carrier_company_id], references: [id])
  carrier_company_id  String
  observations        String?              @db.VarChar(500)
  delivery_conditions String               @db.VarChar(500)
  effective_date      DateTime
  LegalClientOrder    LegalClientOrder[]
  Ciot                CiotForLegalClient[]
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())
  CreatedBy           User                 @relation("created_by", fields: [created_by], references: [id])
  created_by          String
  UpdatedBy           User                 @relation("updated_by", fields: [updated_by], references: [id])
  updated_by          String

  @@map("legal_Contracts")
}

model LegalClientMerchandise {
  id                 String           @id @default(uuid())
  codMerchandise     String           @unique
  amount             Int
  description        String
  mass               Float
  volume             Float
  value              Float
  LegalClientOrder   LegalClientOrder @relation(fields: [legalClientOrderId], references: [id])
  legalClientOrderId String

  @@map("legal_merchandise")
}

model LegalClientOrder {
  id                                 String                              @id @default(uuid())
  order                              String                              @unique
  LegalClientMerchandise             LegalClientMerchandise[]
  RouteForLegalClient                Routes[]
  created_at                         DateTime                            @default(now())
  updated_at                         DateTime                            @default(now())
  CreatedBy                          User                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User                                @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  LegalContract                      LegalContract                       @relation(fields: [legal_contract_id], references: [id])
  legal_contract_id                  String
  InvoiceForLegalClient              InvoiceForLegalClient[]
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract?

  @@map("legal_orders")
}

model InvoiceForLegalClient {
  id                  String           @id @default(uuid())
  invoice_number      String           @unique
  emission_date       DateTime         @default(now())
  nature_invoice      String
  invoice_total       Float
  form_payment        String
  additional_data     String
  digital_signature   String           @unique
  invoice_taxes       Float
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now())
  CreatedBy           User             @relation("created_by", fields: [created_by], references: [id])
  created_by          String
  UpdatedBy           User             @relation("updated_by", fields: [updated_by], references: [id])
  updated_by          String
  LegalClientOrder    LegalClientOrder @relation(fields: [legalClientrOrderId], references: [id])
  legalClientrOrderId String

  @@map("invoices_legal_client")
}

model CiotForLegalClient {
  id                String        @id @default(uuid())
  ciot              String        @unique
  emission_date     DateTime      @default(now())
  PhysycalContract  LegalContract @relation(fields: [legal_contract_id], references: [id])
  legal_contract_id String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
  CreatedBy         User?         @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User?         @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String

  @@map("ciots_for_legal_clients")
}

model Routes {
  id             String   @id @default(uuid())
  cep            String
  public_place   String
  address_number String
  neighborhood   String
  complement     String?
  city           String
  uf             String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  OrderProcessing OrderProcessing[]

  LegalClientOrder        LegalClientOrder?      @relation(fields: [legalClientOrdermId], references: [id])
  legalClientOrdermId     String
  PhysicalCustomerOrder   PhysicalCustomerOrder? @relation(fields: [physicalCustomerOrderId], references: [id])
  physicalCustomerOrderId String?

  @@map("lroutes")
}

model OrderProcessing {
  id                   String   @id @default(uuid())
  total_distance       Float
  total_spend_liters   Int
  total_spending_money Float
  start_at             DateTime
  end_at               DateTime
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  CreatedBy            User     @relation("created_by", fields: [created_by], references: [id])
  created_by           String
  UpdatedBy            User     @relation("updated_by", fields: [updated_by], references: [id])
  updated_by           String
  Route                Routes   @relation(fields: [route_id], references: [id])
  route_id             String
  Vehicle              Vehicle  @relation(fields: [vehicle_id], references: [id])
  vehicle_id           String   @unique

  CompanyVehicle    CompanyVehicle[]
  OutsourcedVehicle OutsourcedVehicle[]

  @@map("order_processing")
}

model TypeOfMaintenance {
  id          String  @id @default(uuid())
  description String
  preventive  Boolean
  corrective  Boolean

  Maintenance Maintenance[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  CreatedBy   User          @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User          @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String

  @@map("types_of_maintenances")
}

model MaintenanceCompany {
  id                    String @id @default(uuid())
  specialty_maintenance String

  Maintenance Maintenance[]

  LegalPerson LegalPerson @relation(fields: [cnpj], references: [cnpj])
  cnpj        String      @unique
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  CreatedBy   User        @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User        @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String

  @@map("maintenance_companies")
}

model Maintenance {
  id String @id @default(uuid())

  MaintenanceCompany       MaintenanceCompany @relation(fields: [maintenance_company_cnpj], references: [cnpj])
  maintenance_company_cnpj String
  Vehicle                  Vehicle            @relation(fields: [plate], references: [plate])
  plate                    String
  TypeOfMaintenance        TypeOfMaintenance  @relation(fields: [maintenance_process_id], references: [id])
  maintenance_process_id   String
  created_at               DateTime           @default(now())
  updated_at               DateTime           @default(now())
  CreatedBy                User               @relation("created_by", fields: [created_by], references: [id])
  created_by               String
  UpdatedBy                User               @relation("updated_by", fields: [updated_by], references: [id])
  updated_by               String

  @@map("maintenance")
}
