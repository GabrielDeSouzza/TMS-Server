generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                         = "node node_modules/prisma-nestjs-graphql"
  fields_Validator_from            = "class-validator"
  useInputType_WhereInput_ALL      = "WhereInput"
  output                           = "../src/infra/graphql/prisma-generated"
  fields_Validator_input           = true
  unsafeCompatibleWhereUniqueInput = true
}

model User {
  id         String  @id @default(uuid())
  name       String
  username   String  @unique
  email      String  @unique
  role       String
  avatar_url String?

  /// @HideField({ input: true, output: true })
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModelCreatedBy             VehicleModel[]             @relation("created_by")
  VehicleModelUpdatedBy             VehicleModel[]             @relation("updated_by")
  VehicleBrandCreatedBy             VehicleBrand[]             @relation("created_by")
  VehicleBrandUpdatedBy             VehicleBrand[]             @relation("updated_by")
  VehicleTypeCreatedBy              VehicleType[]              @relation("created_by")
  VehicleTypeUpdatedBy              VehicleType[]              @relation("updated_by")
  VehicleBodyworkCreatedBy          VehicleBodywork[]          @relation("created_by")
  VehicleBodyworkUpdatedBy          VehicleBodywork[]          @relation("updated_by")
  OutsourcedVehicleCreatedBy        OutsourcedVehicle[]        @relation("created_by")
  OutsourcedVehicleUpdatedBy        OutsourcedVehicle[]        @relation("updated_by")
  CompanyVehicleCreatedBy           CompanyVehicle[]           @relation("created_by")
  CompanyVehicleUpdatedBy           CompanyVehicle[]           @relation("updated_by")
  OutsourcedDriverCreatedBy         OutsourcedDriver[]         @relation("created_by")
  OutsourcedDriverUpdatedBy         OutsourcedDriver[]         @relation("updated_by")
  ContractOutsourcedDriverCreatedBy ContractOutsourcedDriver[] @relation("created_by")
  ContractOutsourcedDriverUpdatedBy ContractOutsourcedDriver[] @relation("updated_by")
  OwnDriverCreatedBy                OwnDriver[]                @relation("created_by")
  OwnDriverUpdatedBy                OwnDriver[]                @relation("updated_by")
  CarrierCompanyCreatedBt           CarrierCompany[]           @relation("created_by")
  CarrierCompanyUpdatedBy           CarrierCompany[]           @relation("updated_by")
  PhysicalCustomerCreatedBy         PhysicalCustomer[]         @relation("created_by")
  PhysicalCustomerUpdatedBy         PhysicalCustomer[]         @relation("updated_by")

  MaintenanceCreatedBy              Maintenance[]           @relation("created_by")
  MaintenanceUpdatedBy              Maintenance[]           @relation("updated_by")
  MaintenanceCompanyCreatedBy       MaintenanceCompany[]    @relation("created_by")
  MaintenanceCompanyUpdatedBy       MaintenanceCompany[]    @relation("updated_by")
  TypeOfMaintenanceCreatedBy        TypeOfMaintenance[]     @relation("created_by")
  TypeOfMaintenanceUpdatedBy        TypeOfMaintenance[]     @relation("updated_by")
  PhysicalCustomerOrderUpdatedBy    PhysicalCustomerOrder[] @relation("updated_by")
  PhysicalCustomerOrderCreatedBy    PhysicalCustomerOrder[] @relation("created_by")
  LegalClientCustomerOrderCreatedBy LegalClientOrder[]      @relation("created_by")
  LegalClientCustomerOrderUpdatedBy LegalClientOrder[]      @relation("updated_by")
  CiotForLegalUpdatedByClient       CiotForLegalClient[]    @relation("updated_by")
  CiotForLegalCreatedByClient       CiotForLegalClient[]    @relation("created_by")
  LegalClientUpdatedBy              LegalClient[]           @relation("updated_by")
  LegalClientCreatedBy              LegalClient[]           @relation("created_by")

  LegalContractCreatedBy                      LegalContract[]                      @relation("created_by")
  LegalContractUpdatedBy                      LegalContract[]                      @relation("updated_by")
  OutsourcedTransportCompanyUpdatedBy         OutsourcedTransportCompany[]         @relation("updated_by")
  OutsourcedTransportCompanyCreatedBy         OutsourcedTransportCompany[]         @relation("created_by")
  OutsourcedTransportVehicleCreatedBy         OutsourcedTransportVehicle[]         @relation("created_by")
  OutsourcedTransportVehicleUpdatedBy         OutsourcedTransportVehicle[]         @relation("updated_by")
  OutsourcedTransportCompanyDriverCreatedBy   OutsourcedTransportCompanyDriver[]   @relation("created_by")
  OutsourcedTransportCompanyDriverUpdatedBy   OutsourcedTransportCompanyDriver[]   @relation("updated_by")
  OutsourcedTransportCompanyContractCreatedBy OutsourcedTransportCompanyContract[] @relation("created_by")
  OutsourcedTransportCompanyContractUpdatedBy OutsourcedTransportCompanyContract[] @relation("updated_by")

  RecipientUpdatedBy                  Recipient[]                  @relation("updated_by")
  RecipientCreatedBy                  Recipient[]                  @relation("created_by")
  IcmsUpdatedBy                       Icms[]                       @relation("updated_by")
  IcmsCreatedBy                       Icms[]                       @relation("created_by")
  SenderCreatedBy                     Sender[]                     @relation("created_by")
  SenderUpdatedBy                     Sender[]                     @relation("updated_by")
  LegalClientQuoteTableCreatedBy      LegalClientQuoteTable[]      @relation("created_by")
  LegalClientQuoteTableUpdatedBy      LegalClientQuoteTable[]      @relation("updated_by")
  PhysicalCustomerQuoteTableCreatedBy PhysicalCustomerQuoteTable[] @relation("created_by")
  PhysicalCustomerQuoteTableUpdatedBy PhysicalCustomerQuoteTable[] @relation("updated_by")
  IncidentUpdatedBy                   Incident[]                   @relation("updated_by")
  IncidentCreatedBy                   Incident[]                   @relation("created_by")

  @@map("users")
}

model Vehicle {
  id                         String                      @id @default(uuid())
  plate                      String                      @unique
  year                       String
  color                      String
  renavam                    String
  antt                       String
  registration               DateTime //licenciamento do veiculo
  is_ipva_paid               Boolean
  CompanyVehicle             CompanyVehicle?
  Maintenance                Maintenance[]
  OutsourcedVehicle          OutsourcedVehicle?
  Model                      VehicleModel                @relation(fields: [model_id], references: [id])
  model_id                   String
  OutsourcedTransportVehicle OutsourcedTransportVehicle?
  OrderProcessing            OrderProcessing?

  @@map("vehicles")
}

model VehicleModel {
  id                String   @id @default(uuid())
  name              String
  weight            Float
  capacity_max      Float
  axles             Int
  capacity_per_axle Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  Vehicle Vehicle[]

  CreatedBy   User?        @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User?        @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String
  Brand       VehicleBrand @relation(fields: [brand_id], references: [id])
  brand_id    String
  VehicleType VehicleType  @relation(fields: [type_id], references: [id])
  type_id     String

  @@map("vehicle_models")
}

model VehicleBrand {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModel VehicleModel[]

  CreatedBy  User?  @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?  @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("vehicle_brands")
}

model VehicleType {
  id         String   @id @default(uuid())
  name       String   @unique
  bodywork   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  VehicleModel    VehicleModel[]
  VehicleBodyWork VehicleBodywork[]

  CreatedBy  User?  @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?  @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("vehicle_types")
}

model VehicleBodywork {
  id         String   @id @default(uuid())
  name       String
  axles      Int
  mass       Float
  volume     Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  CreatedBy   User?         @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User?         @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String
  VehicleType VehicleType[]

  @@map("vehicle_bodyworks")
}

model OutsourcedVehicle {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  CreatedBy        User?             @relation("created_by", fields: [created_by], references: [id])
  created_by       String
  UpdatedBy        User?             @relation("updated_by", fields: [updated_by], references: [id])
  updated_by       String
  Vehicle          Vehicle           @relation(fields: [vehicle_id], references: [id])
  vehicle_id       String            @unique
  OutsourcedDriver OutsourcedDriver?

  @@map("outsourced_vehicles")
}

model CompanyVehicle {
  id             String         @id @default(uuid())
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  company_id     String
  CarrierCompany CarrierCompany @relation(fields: [company_id], references: [id])
  CreatedBy      User?          @relation("created_by", fields: [created_by], references: [id])
  created_by     String
  UpdatedBy      User?          @relation("updated_by", fields: [updated_by], references: [id])
  updated_by     String
  Vehicle        Vehicle        @relation(fields: [vehicle_id], references: [id])
  vehicle_id     String         @unique

  OutsourcedDriver OutsourcedDriver[]

  @@map("company_vehicles")
}

model OutsourcedTransportVehicle {
  id String @id @default(uuid())

  outsourced_company_id      String
  OutsourcedTransportCompany OutsourcedTransportCompany @relation(fields: [outsourced_company_id], references: [id])

  Vehicle    Vehicle @relation(fields: [vehicle_id], references: [id])
  vehicle_id String  @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  CreatedBy  User?    @relation("created_by", fields: [created_by], references: [id])
  created_by String
  UpdatedBy  User?    @relation("updated_by", fields: [updated_by], references: [id])
  updated_by String

  @@map("outsourced_transport_vehicle")
}

model OutsourcedDriver {
  id                       String                     @id @default(uuid())
  cnh                      String                     @unique
  cnh_category             String
  cnh_expiration           DateTime
  course_mopp              Boolean                    @default(false)
  ContractOutsourcedDriver ContractOutsourcedDriver[]
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())

  CreatedBy             User?              @relation("created_by", fields: [created_by], references: [id])
  created_by            String
  UpdatedBy             User?              @relation("updated_by", fields: [updated_by], references: [id])
  updated_by            String
  NaturalPerson         NaturalPerson      @relation(fields: [natural_person_id], references: [id])
  natural_person_id     String             @unique
  OutsourcedVehicle     OutsourcedVehicle? @relation(fields: [outsourced_vehicle_id], references: [id])
  outsourced_vehicle_id String?            @unique
  company_vehicle_id    String?            @unique
  CompanyVehicle        CompanyVehicle?    @relation(fields: [company_vehicle_id], references: [id])

  @@map("outsourced_drivers")
}

model OutsourcedTransportCompanyDriver {
  id                              String                     @id @default(uuid())
  cnh                             String                     @unique
  cnh_category                    String
  cnh_expiration                  DateTime
  course_mopp                     Boolean                    @default(false)
  created_at                      DateTime                   @default(now())
  updated_at                      DateTime                   @default(now())
  CreatedBy                       User?                      @relation("created_by", fields: [created_by], references: [id])
  created_by                      String
  UpdatedBy                       User?                      @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                      String
  NaturalPerson                   NaturalPerson              @relation(fields: [natural_person_id], references: [id])
  natural_person_id               String                     @unique
  outsourced_transport_company_id String
  OutsourcedTransportCompany      OutsourcedTransportCompany @relation(fields: [outsourced_transport_company_id], references: [id])

  @@map("outsourcedT_transport_company_driver")
}

model ContractOutsourcedDriver {
  id                   String           @id @default(uuid())
  contract_number      String           @unique
  type                 String
  situation            String
  start_at             DateTime
  end_at               DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @default(now())
  cpf                  String
  CreatedBy            User?            @relation("created_by", fields: [created_by], references: [id])
  created_by           String
  UpdatedBy            User?            @relation("updated_by", fields: [updated_by], references: [id])
  updated_by           String
  OutsourcedDriver     OutsourcedDriver @relation(fields: [outsourced_driver_id], references: [id])
  outsourced_driver_id String

  @@map("contract_outsourced_drivers")
}

model OwnDriver {
  id              String   @id @default(uuid())
  cnh             String   @unique
  cnh_category    String
  cnh_expiration  DateTime
  company_vehicle Boolean  @default(false)
  course_mopp     Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  CreatedBy         User?             @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User?             @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String
  NaturalPerson     NaturalPerson     @relation(fields: [natural_person_id], references: [id])
  natural_person_id String
  OrderProcessing   OrderProcessing[]

  @@map("own_drivers")
}

model NaturalPerson {
  id             String   @id @default(uuid())
  name           String
  date_birth     DateTime
  gender         String
  cpf            String   @unique
  rg             String   @unique
  cep            String
  public_place   String
  address_number String
  neighborhood   String
  complement     String?
  city           String
  uf             String
  first_phone    String
  second_phone   String?
  third_phone    String?
  email          String
  nationality    String

  OwnDriver                        OwnDriver[]
  OutsourcedDriver                 OutsourcedDriver[]
  PhysicalCustomer                 PhysicalCustomer[]
  OutsourcedTransportCompanyDriver OutsourcedTransportCompanyDriver?
  Recipient                        Recipient?
  Sender                           Sender?

  @@map("natural_people")
}

model PhysicalCustomer {
  id     String  @id @default(uuid())
  branch String?

  NaturalPerson         NaturalPerson           @relation(fields: [natural_person_id], references: [id])
  natural_person_id     String                  @unique
  CreatedBy             User                    @relation("created_by", fields: [created_by], references: [id])
  created_by            String
  UpdatedBy             User                    @relation("updated_by", fields: [updated_by], references: [id])
  updated_by            String
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  PhysicalCustomerOrder PhysicalCustomerOrder[]

  @@map("physical_customers")
}

model CarrierCompany {
  id                                 String                               @id @default(uuid())
  LegalPerson                        LegalPerson                          @relation(fields: [legal_person_id], references: [id])
  legal_person_id                    String                               @unique
  LegalContract                      LegalContract[]
  CompanyVehicle                     CompanyVehicle[]
  rntrc                              String                               @unique
  created_at                         DateTime                             @default(now())
  updated_at                         DateTime                             @default(now())
  CreatedBy                          User?                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User?                                @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract[]
  LegalClientOrder                   LegalClientOrder[]
  PhysicalCustomerOrder              PhysicalCustomerOrder[]

  @@map("carrier_companies")
}

model OutsourcedTransportCompany {
  id                                 String                               @id @default(uuid())
  legal_person_id                    String                               @unique
  LegalPerson                        LegalPerson                          @relation(fields: [legal_person_id], references: [id])
  created_at                         DateTime                             @default(now())
  updated_at                         DateTime                             @default(now())
  CreatedBy                          User?                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User                                 @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract[]
  OutsourcedCompanyVehicle           OutsourcedTransportVehicle[]
  OutsourcedTransportCompanyDriver   OutsourcedTransportCompanyDriver[]
}

model OutsourcedTransportCompanyContract {
  id                              String                     @id @default(uuid())
  contract_number                 String                     @unique
  outsourced_transport_company_id String
  OutsourcedTransportCompany      OutsourcedTransportCompany @relation(fields: [outsourced_transport_company_id], references: [id])
  carrier_company_id              String
  CarrierCompany                  CarrierCompany             @relation(fields: [carrier_company_id], references: [id])
  legal_client_order_id           String                     @unique
  LegalClientOrder                LegalClientOrder           @relation(fields: [legal_client_order_id], references: [id])
  created_at                      DateTime                   @default(now())
  updated_at                      DateTime                   @default(now())
  CreatedBy                       User?                      @relation("created_by", fields: [created_by], references: [id])
  created_by                      String
  UpdatedBy                       User                       @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                      String
}

model PhysicalCustomerQuoteTable {
  id           String @id @default(uuid())
  cod_quote    String
  kind_service String
  form_payment String
  recipient_id String

  Recipient         Recipient @relation(fields: [recipient_id], references: [id])
  Sender            Sender    @relation(fields: [senderId], references: [id])
  senderId          String
  who_pays          String
  adress_origin_id  String
  AdressOrigin      Adresses  @relation("adress_origin_quote_physical", fields: [adress_origin_id], references: [id])
  adress_destiny_id String
  AdressDestiny     Adresses  @relation("adress_destiny_quote_physical", fields: [adress_destiny_id], references: [id])
  type_merchandise  String
  amount            Int

  description           String
  mass                  Float
  volume                Float
  nf_value              Float
  nf_serie              String
  nf_number             String
  digital_signature     String                  @unique
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  CreatedBy             User                    @relation("created_by", fields: [created_by], references: [id])
  created_by            String
  updated_by            String
  UpdatedBy             User                    @relation("updated_by", fields: [updated_by], references: [id])
  PhysicalCustomerOrder PhysicalCustomerOrder[]
  icms_id               String
  Icms                  Icms                    @relation(fields: [icms_id], references: [id])

  @@map("physical_customer_quote")
}

model PhysicalCustomerOrder {
  id                         String                     @id @default(uuid())
  order                      String                     @unique
  updated_by                 String
  physical_customer_id       String
  total_shipping_cost        Float
  total_receivable           Float
  total_tax_payable          Float
  PhysicalCustomer           PhysicalCustomer           @relation(fields: [physical_customer_id], references: [id])
  created_at                 DateTime                   @default(now())
  updated_at                 DateTime                   @default(now())
  CreatedBy                  User                       @relation("created_by", fields: [created_by], references: [id])
  created_by                 String
  UpdatedBy                  User                       @relation("updated_by", fields: [updated_by], references: [id])
  carrier_id                 String
  CarrierCompany             CarrierCompany             @relation(fields: [carrier_id], references: [id])
  order_processing_id        String?
  OrderProcessing            OrderProcessing?           @relation(fields: [order_processing_id], references: [id])
  completedOrdersId          String?
  PhysicalCustomerQuoteTable PhysicalCustomerQuoteTable @relation(fields: [quote_table_id], references: [id])
  quote_table_id             String
  PhysicalCustomerCte        PhysicalCustomerCte[]
  FreightExpenses            FreightExpenses[]

  @@map("physical_orders")
}

model PhysicalCustomerCte {
  id                    String                @id @default(uuid())
  order_id              String
  PhysicalCustomerOrder PhysicalCustomerOrder @relation(fields: [order_id], references: [id])
  access_key            String
  type_cte              String

  observations String
  cte_number   String
  autorization DateTime @default(now())

  @@map("physical_customer_cte")
}

model Sender {
  id                         String                       @id @default(uuid())
  legal_person_id            String?                      @unique
  LegalPerson                LegalPerson?                 @relation(fields: [legal_person_id], references: [id])
  natural_person_id          String?                      @unique
  NaturalPerson              NaturalPerson?               @relation(fields: [natural_person_id], references: [id])
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  CreatedBy                  User                         @relation("created_by", fields: [created_by], references: [id])
  created_by                 String
  updated_by                 String
  UpdatedBy                  User                         @relation("updated_by", fields: [updated_by], references: [id])
  LegalClientQuoteTable      LegalClientQuoteTable[]
  PhysicalCustomerQuoteTable PhysicalCustomerQuoteTable[]

  @@map("sender")
}

model Recipient {
  id                         String                       @id @default(uuid())
  legal_person_id            String?                      @unique
  LegalPerson                LegalPerson?                 @relation(fields: [legal_person_id], references: [id])
  natural_person_id          String?                      @unique
  NaturalPerson              NaturalPerson?               @relation(fields: [natural_person_id], references: [id])
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  CreatedBy                  User                         @relation("created_by", fields: [created_by], references: [id])
  created_by                 String
  updated_by                 String
  UpdatedBy                  User                         @relation("updated_by", fields: [updated_by], references: [id])
  LegalClientQuoteTable      LegalClientQuoteTable[]
  PhysicalCustomerQuoteTable PhysicalCustomerQuoteTable[]

  @@map("recipient")
}

model Icms {
  id                         String                       @id @default(uuid())
  state_orgin                String
  recipient_state            String
  aliquot                    Float
  effective_date             DateTime
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  CreatedBy                  User                         @relation("created_by", fields: [created_by], references: [id])
  created_by                 String
  updated_by                 String
  UpdatedBy                  User                         @relation("updated_by", fields: [updated_by], references: [id])
  PhysicalCustomerQuoteTable PhysicalCustomerQuoteTable[]
  LegalClientQuoteTable      LegalClientQuoteTable[]

  @@unique([state_orgin, recipient_state])
  @@map("icms")
}

model LegalPerson {
  id                         String                       @id @default(uuid())
  fantasy_name               String
  cnpj                       String                       @unique
  state_registration         String                       @unique
  cep                        String
  corporate_name             String
  public_place               String
  address_number             String
  neighborhood               String
  complement                 String?
  city                       String
  uf                         String
  first_phone                String
  second_phone               String?
  third_phone                String?
  email                      String
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @default(now())
  CorporateClient            LegalClient[]
  MaintenanceCompany         MaintenanceCompany?
  CarrierCompany             CarrierCompany[]
  OutsourcedTransportCompany OutsourcedTransportCompany[]
  Recipient                  Recipient?
  Sender                     Sender?

  @@map("legal_people")
}

model LegalClient {
  id              String          @id @default(uuid())
  branch          String
  LegalPerson     LegalPerson     @relation(fields: [legal_person_id], references: [id])
  legal_person_id String          @unique
  CreatedBy       User            @relation("created_by", fields: [created_by], references: [id])
  created_by      String
  UpdatedBy       User            @relation("updated_by", fields: [updated_by], references: [id])
  updated_by      String
  LegalContract   LegalContract[]

  @@map("legal_clients")
}

model LegalClientCte {
  id               String           @id @default(uuid())
  order_id         String           @unique
  LegalClientOrder LegalClientOrder @relation(fields: [order_id], references: [id])
  access_key       String
  type_cte         String
  observations     String
  cte_number       String
  autorization     DateTime         @default(now())

  @@map("legal_client_cte")
}

model LegalContract {
  id                  String               @id @default(uuid())
  contract_number     String               @unique
  LegalClient         LegalClient          @relation(fields: [legal_client_id], references: [id])
  legal_client_id     String
  CarrierCompany      CarrierCompany       @relation(fields: [carrier_company_id], references: [id])
  carrier_company_id  String
  observations        String?              @db.VarChar(500)
  delivery_conditions String               @db.VarChar(500)
  effective_date      DateTime
  LegalClientOrder    LegalClientOrder[]
  Ciot                CiotForLegalClient[]
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())
  CreatedBy           User                 @relation("created_by", fields: [created_by], references: [id])
  created_by          String
  UpdatedBy           User                 @relation("updated_by", fields: [updated_by], references: [id])
  updated_by          String

  @@map("legal_Contracts")
}

model LegalClientQuoteTable {
  id               String    @id @default(uuid())
  cod_quote        String
  kind_service     String
  form_payment     String
  recipient_id     String
  Recipient        Recipient @relation(fields: [recipient_id], references: [id])
  Sender           Sender    @relation(fields: [sender_id], references: [id])
  sender_id        String
  who_pays         String
  adress_origin_id String
  AdressOrigin     Adresses  @relation("origin_adress_quote_legal", fields: [adress_origin_id], references: [id])
  AdressDestiny    Adresses  @relation("destiny_adress_quote_legal", fields: [adress_destiny_id], references: [id])

  adress_destiny_id String
  type_merchandise  String
  amount            Int
  description       String
  mass              Float
  volume            Float
  nf_value          Float
  nf_serie          String
  nf_number         String
  digital_signature String             @unique
  LegalClientOrder  LegalClientOrder[]
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  CreatedBy         User               @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User               @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String

  icms_id String
  Icms    Icms   @relation(fields: [icms_id], references: [id])

  @@map("legal_client_quote")
}

model Adresses {
  id                                String                       @id @default(uuid())
  postal_cod                        String
  street                            String
  address_number                    String
  neighborhood                      String
  complement                        String?
  city                              String
  uf                                String
  LegalClientQuoteTableOrigin       LegalClientQuoteTable[]      @relation("origin_adress_quote_legal")
  LegalClientQuoteTablesDestiny     LegalClientQuoteTable[]      @relation("destiny_adress_quote_legal")
  PhysicalCustomerQuoteTableOrigin  PhysicalCustomerQuoteTable[] @relation("adress_destiny_quote_physical")
  PhysicalCustomerQuoteTableDestiny PhysicalCustomerQuoteTable[] @relation("adress_origin_quote_physical")

  @@unique([postal_cod, address_number])
  @@map("adresses")
}

model LegalClientOrder {
  id                                 String                              @id @default(uuid())
  order                              String                              @unique
  created_at                         DateTime                            @default(now())
  updated_at                         DateTime                            @default(now())
  total_shipping_cost                Float
  total_receivable                   Float
  total_tax_payable                  Float
  CreatedBy                          User                                @relation("created_by", fields: [created_by], references: [id])
  created_by                         String
  UpdatedBy                          User                                @relation("updated_by", fields: [updated_by], references: [id])
  updated_by                         String
  LegalContract                      LegalContract                       @relation(fields: [legal_contract_id], references: [id])
  legal_contract_id                  String
  quote_table_id                     String
  QuoteTable                         LegalClientQuoteTable               @relation(fields: [quote_table_id], references: [id])
  order_processing_id                String?
  OrderProcessing                    OrderProcessing?                    @relation(fields: [order_processing_id], references: [id])
  carrier_id                         String
  CarrierCompany                     CarrierCompany                      @relation(fields: [carrier_id], references: [id])
  OutsourcedTransportCompanyContract OutsourcedTransportCompanyContract?

  completed_orders_id String?
  LegalClientCte      LegalClientCte?
  FreightExpenses     FreightExpenses[]

  @@map("legal_orders")
}

model CiotForLegalClient {
  id                String        @id @default(uuid())
  ciot              String        @unique
  emission_date     DateTime      @default(now())
  PhysycalContract  LegalContract @relation(fields: [legal_contract_id], references: [id])
  legal_contract_id String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
  CreatedBy         User?         @relation("created_by", fields: [created_by], references: [id])
  created_by        String
  UpdatedBy         User?         @relation("updated_by", fields: [updated_by], references: [id])
  updated_by        String

  @@map("ciots_for_legal_clients")
}

model OrderProcessing {
  id                      String                  @id @default(uuid())
  order_processing_number String                  @unique
  vehicle_id              String                  @unique
  Vehicle                 Vehicle                 @relation(fields: [vehicle_id], references: [id])
  total_distance          Float
  total_spend_liters      Float
  total_spending_money    Float
  status                  String
  start_at                DateTime
  end_at                  DateTime?
  updated_at              DateTime
  created_at              DateTime
  created_by              String
  updated_by              String
  driver_id               String
  OwnDriver               OwnDriver?              @relation(fields: [driver_id], references: [id])
  PhysicalCustomerOrder   PhysicalCustomerOrder[]
  LegalClientOrder        LegalClientOrder[]
  Incident                Incident[]
  Manifest                Manifest[]

  @@map("order_procesing")
}

model Manifest {
  id                  String          @id @default(uuid())
  order_processing_id String
  OrderProcessing     OrderProcessing @relation(fields: [order_processing_id], references: [id])
  manifest_url        String?
  emission_date       DateTime
  number              String
  serie               String
  num_protocol        String
  acess_key           String
}

model Incident {
  id               String          @id @default(uuid())
  description      String
  date_incident    DateTime
  order_process_id String
  OrderProcess     OrderProcessing @relation(fields: [order_process_id], references: [id])

  date_resolved DateTime?
  CreatedBy     User      @relation("created_by", fields: [created_by], references: [id])
  created_by    String
  UpdatedBy     User      @relation("updated_by", fields: [updated_by], references: [id])
  updated_by    String
  created_at    DateTime
  updated_at    DateTime
}

model FreightExpenses {
  id                    String                 @id @default(uuid())
  expense_name          String
  value                 Float
  legal_client_order_id String?
  physical_customer_id  String?
  LegalClientOrder      LegalClientOrder?      @relation(fields: [legal_client_order_id], references: [id], map: "legal_client_order_fk")
  PhysicalCustomerOrder PhysicalCustomerOrder? @relation(fields: [physical_customer_id], references: [id])

  @@map("freight_expenses")
}

model TypeOfMaintenance {
  id              String @id @default(uuid())
  description     String
  typeMaintenance String

  Maintenance Maintenance[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  CreatedBy   User          @relation("created_by", fields: [created_by], references: [id])
  created_by  String
  UpdatedBy   User          @relation("updated_by", fields: [updated_by], references: [id])
  updated_by  String

  @@unique([description, typeMaintenance])
  @@map("types_of_maintenances")
}

model MaintenanceCompany {
  id                    String  @id @default(uuid())
  specialty_maintenance String?

  Maintenance Maintenance[]

  LegalPerson     LegalPerson @relation(fields: [legal_person_id], references: [id])
  legal_person_id String      @unique
  created_at      DateTime    @default(now())
  updated_at      DateTime    @default(now())
  CreatedBy       User        @relation("created_by", fields: [created_by], references: [id])
  created_by      String
  UpdatedBy       User        @relation("updated_by", fields: [updated_by], references: [id])
  updated_by      String

  @@map("maintenance_companies")
}

model Maintenance {
  id String @id @default(uuid())

  MaintenanceCompany     MaintenanceCompany @relation(fields: [maintenance_company_id], references: [id])
  maintenance_company_id String
  Vehicle                Vehicle            @relation(fields: [vehicle_id], references: [id])
  vehicle_id             String
  TypeOfMaintenance      TypeOfMaintenance  @relation(fields: [type_of_maintenance_id], references: [id])
  type_of_maintenance_id String
  finished_at            DateTime?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @default(now())
  CreatedBy              User               @relation("created_by", fields: [created_by], references: [id])
  created_by             String
  UpdatedBy              User               @relation("updated_by", fields: [updated_by], references: [id])
  updated_by             String

  @@map("maintenance")
}
