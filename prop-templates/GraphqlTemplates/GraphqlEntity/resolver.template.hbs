import {
  Args,
  Mutation,
  Parent,
  Query,
  ResolveField,
  Resolver,
} from '@nestjs/graphql';
import { CurrentUser } from 'infra/graphql/utilities/decorators/CurrentUser';

import { AcessAllowed } from 'infra/graphql/utilities/decorators/AcessAllowed';
import { CurrentUser } from 'infra/graphql/utilities/decorators/CurrentUser';
import { RoleInterceptor } from 'infra/graphql/utilities/interceptors/RoleInterceptor';
import { GraphQLAuthGuard } from 'infra/guard/GraphQlAuthGuard';


import { UserModelRefereces } from '../UserGraphql/user.model';

@UseGuards(GraphQLAuthGuard)
@UseInterceptors(RoleInterceptor)
@AcessAllowed(ROLE.)
@Resolver(() => {{entityName}}Model)
export class {{entityName}}Resolver {
  constructor(
    private {{camelCase entityName}}Repository: {{entityName}}Repository,
    private userRepository: UserRepository,
  ) {}
  @Query(() => {{entityName}}Model)
  async get{{entityName}}Model(@Args('id') id: string) {
    return this.{{camelCase entityName}}Repository.find{{entityName}}ById(id);
  }
  @Query(() => [{{entityName}}Model], { nullable: true })
  async getAll{{entityName}}() {
    const {{camelCase entityName}} =
      await this.{{camelCase entityName}}Repository.getAll{{entityName}}();

    return {{camelCase entityName}}.length > 0 ? {{camelCase entityName}} : null;
  }
  @Mutation(() => {{entityName}}Model)
  async create{{entityName}}(
    @Args('{{camelCase entityName}}Input') {{camelCase entityName}}Input: {{entityName}}Input,
    @CurrentUser() user: User
  ) {
    {{camelCase entityName}}Input.created_by = user.id;
    {{camelCase entityName}}Input.updated_by = user.id;
    const {{camelCase entityName}}Entity =
      {{entityName}}GraphqlDTO.createInputToEntity({{camelCase entityName}}Input)
    return this.{{camelCase entityName}}Repository.create{{entityName}}(
      {{camelCase entityName}}Entity,
    );
  }
  @Mutation(() => {{entityName}}Model)
  async update{{camelCase entityName}}(
    @Args('id') id: string,
    @Args('{{camelCase entityName}}Input') {{camelCase entityName}}Input: {{entityName}}Input,
    @CurrentUser() user: User
  ) {
    {{camelCase entityName}}Input.updated_by = user.id;
    const {{camelCase entityName}}Entity =
      {{entityName}}GraphqlDTO.updateInputToEntity({{camelCase entityName}}Input)
    return this.{{camelCase entityName}}Repository.update{{entityName}}(
      id,
      {{camelCase entityName}}Input,
    );
  }
  @ResolveField(() => UserModelRefereces)
  async createdUser(@Parent() user: {{entityName}}Input) {
    const { created_by: createdBy } = user;

    return await this.userRepository.findUserById(createdBy);
  }
  @ResolveField(() => UserModelRefereces)
  async updatedUser(@Parent() user: {{entityName}}Input) {
    const { updated_by: updatedBy } = user;

    return await this.userRepository.findUserById(updatedBy);
  }
}
