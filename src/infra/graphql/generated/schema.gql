# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthModel {
  email: String!
  id: String!
  name: String!
  token: String!
  username: String!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CarrierCompanyInput {
  LegalPerson: LegalPersonInput
  legalPersonId: String
  rntrc: String!
}

input CarrierCompanyListRelationFilter {
  every: CarrierCompanyWhereInput
  none: CarrierCompanyWhereInput
  some: CarrierCompanyWhereInput
}

type CarrierCompanyModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalPersonId: String!
  rntrc: String!
  updated_at: Timestamp!
  updated_by: String!
}

input CarrierCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input CarrierCompanyOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  LegalContract: LegalContractOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  rntrc: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input CarrierCompanyUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
  legalPersonId: String
  rntrc: String
}

input CarrierCompanyWhereInput {
  AND: [CarrierCompanyWhereInput!]
  CompanyVehicle: CompanyVehicleListRelationFilter
  CreatedBy: UserWhereInput
  LegalContract: LegalContractListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [CarrierCompanyWhereInput!]
  OR: [CarrierCompanyWhereInput!]
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  rntrc: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input CiotForLegalClientInput {
  ciot: String!
  emission_date: Timestamp!
  legal_contract_id: String!
}

input CiotForLegalClientListRelationFilter {
  every: CiotForLegalClientWhereInput
  none: CiotForLegalClientWhereInput
  some: CiotForLegalClientWhereInput
}

type CiotForLegalClientModel {
  CreatedUser: UserModelRefereces!
  LegalClientContract: LegalContractModel!
  UpdatedUser: UserModelRefereces!
  ciot: String!
  created_at: Timestamp!
  created_by: String!
  emission_date: Timestamp!
  id: String!
  legal_contract_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input CiotForLegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input CiotForLegalClientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  PhysycalContract: LegalContractOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  ciot: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  emission_date: SortOrder
  id: SortOrder
  legal_contract_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input CiotForLegalClientUpdateInput {
  ciot: String
  emission_date: Timestamp
  legal_contract_id: String
}

input CiotForLegalClientWhereInput {
  AND: [CiotForLegalClientWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [CiotForLegalClientWhereInput!]
  OR: [CiotForLegalClientWhereInput!]
  PhysycalContract: LegalContractWhereInput
  UpdatedBy: UserWhereInput
  ciot: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  emission_date: DateTimeFilter
  id: StringFilter
  legal_contract_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type CompanyVehicleIModel {
  CarrierCompany: CarrierCompanyModel!
  Vehicle: VehicleCarModel!
  carrier_company_id: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input CompanyVehicleInput {
  Vehicle: VehicleInput
  carrier_company_id: String!
  vehicle_id: String
}

input CompanyVehicleListRelationFilter {
  every: CompanyVehicleWhereInput
  none: CompanyVehicleWhereInput
  some: CompanyVehicleWhereInput
}

input CompanyVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyVehicleOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  OrderProcessing: OrderProcessingPhysicalCustomerOrderByWithRelationInput
  OrderProcessingLegalClient: OrderProcessingLegalClientOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  company_id: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  orderProcessingLegalClientId: SortOrder
  order_processing_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input CompanyVehicleUpdateInput {
  Vehicle: VehicleUpdateInput!
  carrier_company_id: String
  vehicle_id: String
}

input CompanyVehicleWhereInput {
  AND: [CompanyVehicleWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  NOT: [CompanyVehicleWhereInput!]
  OR: [CompanyVehicleWhereInput!]
  OrderProcessing: OrderProcessingPhysicalCustomerWhereInput
  OrderProcessingLegalClient: OrderProcessingLegalClientWhereInput
  OutsourcedDriver: OutsourcedDriverListRelationFilter
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  company_id: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  orderProcessingLegalClientId: StringNullableFilter
  order_processing_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input ContractOutsoucedDriverUpdateInput {
  cpf: String
  end_at: Timestamp
  outsourced_driver_id: String
  situation: String
  start_at: Timestamp
  type: String
}

input ContractOutsourcedDriverInput {
  cpf: String!
  end_at: Timestamp!
  outsourced_driver_id: String!
  situation: String!
  start_at: Timestamp!
  type: String!
}

input ContractOutsourcedDriverListRelationFilter {
  every: ContractOutsourcedDriverWhereInput
  none: ContractOutsourcedDriverWhereInput
  some: ContractOutsourcedDriverWhereInput
}

type ContractOutsourcedDriverModel {
  CreatedUser: UserModelRefereces!
  OutsourcedDriver: OutsourcedDriverModel!
  UpdatedUser: UserModelRefereces!
  contract_number: String!
  cpf: String!
  created_at: Timestamp!
  created_by: String!
  end_at: Timestamp!
  id: String!
  outsourced_driver_id: String!
  situation: String!
  start_at: Timestamp!
  type: String!
  updated_at: Timestamp!
  updated_by: String!
}

input ContractOutsourcedDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContractOutsourcedDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  contract_number: SortOrder
  cpf: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  end_at: SortOrder
  id: SortOrder
  outsourced_driver_id: SortOrder
  situation: SortOrder
  start_at: SortOrder
  type: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

type ContractOutsourcedDriverRefencesModel {
  contract_number: String!
  cpf: String!
  created_at: Timestamp!
  created_by: String!
  end_at: Timestamp!
  id: String!
  situation: String!
  start_at: Timestamp!
  type: String!
  updated_at: Timestamp!
  updated_by: String!
}

input ContractOutsourcedDriverReferecesInput {
  cpf: String!
  end_at: Timestamp!
  situation: String!
  start_at: Timestamp!
  type: String!
}

input ContractOutsourcedDriverWhereInput {
  AND: [ContractOutsourcedDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [ContractOutsourcedDriverWhereInput!]
  OR: [ContractOutsourcedDriverWhereInput!]
  OutsourcedDriver: OutsourcedDriverWhereInput
  UpdatedBy: UserWhereInput
  contract_number: StringFilter
  cpf: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  end_at: DateTimeNullableFilter
  id: StringFilter
  outsourced_driver_id: StringFilter
  situation: StringFilter
  start_at: DateTimeFilter
  type: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input ICMSListRelationFilter {
  every: ICMSWhereInput
  none: ICMSWhereInput
  some: ICMSWhereInput
}

input ICMSOrderByRelationAggregateInput {
  _count: SortOrder
}

input ICMSWhereInput {
  AND: [ICMSWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [ICMSWhereInput!]
  OR: [ICMSWhereInput!]
  UpdatedBy: UserWhereInput
  aliquot: DecimalFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  effective_date: DateTimeFilter
  id: StringFilter
  recipient_state: StringFilter
  state_orgin: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input InvoiceForLegalClientInput {
  additional_data: String!
  digital_signature: String!
  emission_date: Timestamp!
  form_payment: String!
  invoice_taxes: Float!
  invoice_total: Float!
  nature_invoice: String!
}

input InvoiceForLegalClientListRelationFilter {
  every: InvoiceForLegalClientWhereInput
  none: InvoiceForLegalClientWhereInput
  some: InvoiceForLegalClientWhereInput
}

type InvoiceForLegalClientModel {
  CreatedUser: UserModelRefereces!
  Merchandise: LegalClientMerchandiseModel!
  UpdatedUser: UserModelRefereces!
  additional_data: String!
  created_at: Timestamp!
  created_by: String!
  digital_signature: String!
  emission_date: Float!
  form_payment: String!
  id: String!
  invoice_number: String!
  invoice_taxes: Float!
  invoice_total: Float!
  nature_invoice: String!
  updated_at: Timestamp!
  updated_by: String!
}

input InvoiceForLegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input InvoiceForLegalClientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientMerchandise: LegalClientMerchandiseOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  additional_data: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  digital_signature: SortOrder
  emission_date: SortOrder
  form_payment: SortOrder
  id: SortOrder
  invoice_number: SortOrder
  invoice_taxes: SortOrder
  invoice_total: SortOrder
  nature_invoice: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input InvoiceForLegalClientUpdateInput {
  additional_data: String
  emission_date: Timestamp
  form_payment: String
  invoice_taxes: Float
  invoice_total: Float
  nature_invoice: String
}

input InvoiceForLegalClientWhereInput {
  AND: [InvoiceForLegalClientWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientMerchandise: LegalClientMerchandiseWhereInput
  NOT: [InvoiceForLegalClientWhereInput!]
  OR: [InvoiceForLegalClientWhereInput!]
  UpdatedBy: UserWhereInput
  additional_data: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  digital_signature: StringFilter
  emission_date: DateTimeFilter
  form_payment: StringFilter
  id: StringFilter
  invoice_number: StringFilter
  invoice_taxes: FloatFilter
  invoice_total: FloatFilter
  nature_invoice: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input InvoiceForPhysicalCustomerInput {
  additional_data: String!
  digital_signature: String!
  emission_date: Timestamp!
  form_payment: String!
  invoice_taxes: Float!
  invoice_total: Float!
  nature_invoice: String!
  physicalCustomerId: String!
}

input InvoiceForPhysicalCustomerListRelationFilter {
  every: InvoiceForPhysicalCustomerWhereInput
  none: InvoiceForPhysicalCustomerWhereInput
  some: InvoiceForPhysicalCustomerWhereInput
}

type InvoiceForPhysicalCustomerModel {
  CreatedUser: UserModelRefereces!
  PhysicalCustomer: PhysicalCustomerModel!
  UpdatedUser: UserModelRefereces!
  additional_data: String!
  created_at: Timestamp!
  created_by: String!
  digital_signature: String!
  emission_date: Timestamp!
  form_payment: String!
  id: String!
  invoice_number: String!
  invoice_taxes: Float!
  invoice_total: Float!
  nature_invoice: String!
  physicalCustomerId: String!
  updated_at: Timestamp!
  updated_by: String!
}

input InvoiceForPhysicalCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input InvoiceForPhysicalCustomerOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  PhysicalCustomer: PhysicalCustomerOrderByWithRelationInput
  PhysicalCustomerMerchandise: PhysicalCustomerMerchandiseOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  additional_data: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  digital_signature: SortOrder
  emission_date: SortOrder
  form_payment: SortOrder
  id: SortOrder
  invoice_number: SortOrder
  invoice_taxes: SortOrder
  invoice_total: SortOrder
  nature_invoice: SortOrder
  physical_customer_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input InvoiceForPhysicalCustomerUpdateInput {
  additional_data: String
  digital_signature: String
  emission_date: Timestamp
  form_payment: String
  invoice_taxes: Float
  invoice_total: Float
  nature_invoice: String
  physicalCustomerId: String
}

input InvoiceForPhysicalCustomerWhereInput {
  AND: [InvoiceForPhysicalCustomerWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [InvoiceForPhysicalCustomerWhereInput!]
  OR: [InvoiceForPhysicalCustomerWhereInput!]
  PhysicalCustomer: PhysicalCustomerWhereInput
  PhysicalCustomerMerchandise: PhysicalCustomerMerchandiseWhereInput
  UpdatedBy: UserWhereInput
  additional_data: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  digital_signature: StringFilter
  emission_date: DateTimeFilter
  form_payment: StringFilter
  id: StringFilter
  invoice_number: StringFilter
  invoice_taxes: FloatFilter
  invoice_total: FloatFilter
  nature_invoice: StringFilter
  physical_customer_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input LegalClientInput {
  LegalPerson: LegalPersonInput
  branch: String!
  legal_person_id: String
}

input LegalClientListRelationFilter {
  every: LegalClientWhereInput
  none: LegalClientWhereInput
  some: LegalClientWhereInput
}

input LegalClientMerchandiseInput {
  amount: Int!
  codMerchandise: String!
  description: String!
  invoice_legal_client: String!
  legal_client_order_id: String!
  mass: Float!
  value: Float!
  volume: Float!
}

input LegalClientMerchandiseListRelationFilter {
  every: LegalClientMerchandiseWhereInput
  none: LegalClientMerchandiseWhereInput
  some: LegalClientMerchandiseWhereInput
}

type LegalClientMerchandiseModel {
  Invoice: InvoiceForLegalClientModel!
  LegalClientOrder: LegalClientOrderModel!
  Order: LegalClientOrderModel!
  amount: Int!
  codMerchandise: String!
  description: String!
  id: String!
  invoice_legal_client: String!
  legal_client_order_id: String!
  mass: Float!
  value: Float!
  volume: Float!
}

input LegalClientMerchandiseOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientMerchandiseOrderByWithRelationInput {
  InvoiceLegalClient: InvoiceForLegalClientOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByWithRelationInput
  amount: SortOrder
  codMerchandise: SortOrder
  description: SortOrder
  id: SortOrder
  invoice_id: SortOrder
  legalClientOrderId: SortOrder
  mass: SortOrder
  value: SortOrder
  volume: SortOrder
}

input LegalClientMerchandiseUpdateInput {
  amount: Int
  codMerchandise: String
  description: String
  invoice_legal_client: String
  legal_client_order_id: String
  mass: Float
  value: Float
  volume: Float
}

input LegalClientMerchandiseWhereInput {
  AND: [LegalClientMerchandiseWhereInput!]
  InvoiceLegalClient: InvoiceForLegalClientWhereInput
  LegalClientOrder: LegalClientOrderWhereInput
  NOT: [LegalClientMerchandiseWhereInput!]
  OR: [LegalClientMerchandiseWhereInput!]
  amount: IntFilter
  codMerchandise: StringFilter
  description: StringFilter
  id: StringFilter
  invoice_id: StringFilter
  legalClientOrderId: StringFilter
  mass: FloatFilter
  value: FloatFilter
  volume: FloatFilter
}

type LegalClientModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel!
  Orders: [LegalClientOrderModel!]!
  UpdatedUser: UserModelRefereces!
  branch: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legal_person_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input LegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalContract: LegalContractOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  branch: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  updated_by: SortOrder
}

input LegalClientOrderInput {
  legal_contract_id: String!
  recipient_id: String!
}

input LegalClientOrderListRelationFilter {
  every: LegalClientOrderWhereInput
  none: LegalClientOrderWhereInput
  some: LegalClientOrderWhereInput
}

type LegalClientOrderModel {
  CreatedUser: UserModelRefereces!
  Invoices: [InvoiceForLegalClientModel!]!
  LegalClientMerchandise: [LegalClientMerchandiseModel!]!
  LegalContract: LegalContractModel!
  Merchandises: [LegalClientMerchandiseModel!]!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legal_contract_id: String!
  order: String!
  recipient_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input LegalClientOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientOrderOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientMerchandise: LegalClientMerchandiseOrderByRelationAggregateInput
  LegalContract: LegalContractOrderByWithRelationInput
  OrderProcessingLegalClient: OrderProcessingLegalClientOrderByRelationAggregateInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByWithRelationInput
  Recipient: RecipientOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_contract_id: SortOrder
  order: SortOrder
  recipient_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input LegalClientOrderUpdateInput {
  legal_contract_id: String
  recipient_id: String
}

input LegalClientOrderWhereInput {
  AND: [LegalClientOrderWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientMerchandise: LegalClientMerchandiseListRelationFilter
  LegalContract: LegalContractWhereInput
  NOT: [LegalClientOrderWhereInput!]
  OR: [LegalClientOrderWhereInput!]
  OrderProcessingLegalClient: OrderProcessingLegalClientListRelationFilter
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractWhereInput
  Recipient: RecipientWhereInput
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_contract_id: StringFilter
  order: StringFilter
  recipient_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input LegalClientUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
  branch: String
  legal_person_id: String
}

input LegalClientWhereInput {
  AND: [LegalClientWhereInput!]
  CreatedBy: UserWhereInput
  LegalContract: LegalContractListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [LegalClientWhereInput!]
  OR: [LegalClientWhereInput!]
  UpdatedBy: UserWhereInput
  branch: StringFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  updated_by: StringFilter
}

input LegalContractInput {
  carrier_company_id: String!
  delivery_conditions: String!
  effective_date: Timestamp!
  legal_client_id: String!
  observations: String
}

input LegalContractListRelationFilter {
  every: LegalContractWhereInput
  none: LegalContractWhereInput
  some: LegalContractWhereInput
}

type LegalContractModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  LegalClient: LegalClientModel!
  OrderProcessings: [OrderProcessingLegalClientModel!]!
  UpdatedUser: UserModelRefereces!
  carrier_company_id: String!
  contract_number: String!
  created_at: Timestamp!
  created_by: String!
  delivery_conditions: String!
  effective_date: Timestamp!
  id: String!
  legal_client_id: String!
  observations: String!
  updated_at: Timestamp!
  updated_by: String!
}

input LegalContractOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalContractOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  Ciot: CiotForLegalClientOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  LegalClient: LegalClientOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_company_id: SortOrder
  contract_number: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  delivery_conditions: SortOrder
  effective_date: SortOrder
  id: SortOrder
  legal_client_id: SortOrder
  observations: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input LegalContractUpdateInput {
  carrier_company_id: String
  delivery_conditions: String
  effective_date: Timestamp
  legal_client_id: String
  observations: String
}

input LegalContractWhereInput {
  AND: [LegalContractWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  Ciot: CiotForLegalClientListRelationFilter
  CreatedBy: UserWhereInput
  LegalClient: LegalClientWhereInput
  LegalClientOrder: LegalClientOrderListRelationFilter
  NOT: [LegalContractWhereInput!]
  OR: [LegalContractWhereInput!]
  UpdatedBy: UserWhereInput
  carrier_company_id: StringFilter
  contract_number: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  delivery_conditions: StringFilter
  effective_date: DateTimeFilter
  id: StringFilter
  legal_client_id: StringFilter
  observations: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input LegalPersonInput {
  address_number: String!
  city: String!
  cnpj: String!
  complement: String
  corporate_name: String!
  email: String!
  fantasy_name: String!
  first_phone: String!
  neighborhood: String!
  public_place: String!
  second_phone: String
  state_registration: String!
  third_phone: String
  uf: String!
}

type LegalPersonModel {
  address_number: String!
  city: String!
  complement: String
  corporate_name: String!
  created_at: Timestamp!
  email: String!
  fantasy_name: String!
  first_phone: String!
  id: String!
  neighborhood: String!
  public_place: String!
  second_phone: String
  state_registration: String!
  third_phone: String
  uf: String!
  updated_at: Timestamp!
}

input LegalPersonOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByRelationAggregateInput
  CorporateClient: LegalClientOrderByRelationAggregateInput
  MaintenanceCompany: MaintenanceCompanyOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByRelationAggregateInput
  Recipient: RecipientOrderByRelationAggregateInput
  address_number: SortOrder
  city: SortOrder
  cnpj: SortOrder
  complement: SortOrder
  corporate_name: SortOrder
  created_at: SortOrder
  email: SortOrder
  fantasy_name: SortOrder
  first_phone: SortOrder
  id: SortOrder
  neighborhood: SortOrder
  public_place: SortOrder
  second_phone: SortOrder
  state_registration: SortOrder
  third_phone: SortOrder
  uf: SortOrder
  updated_at: SortOrder
}

input LegalPersonUpdateInput {
  address_number: String
  city: String
  cnpj: String
  complement: String
  corporate_name: String
  email: String
  fantasy_name: String
  first_phone: String
  neighborhood: String
  public_place: String
  second_phone: String
  state_registration: String
  third_phone: String
  uf: String
}

input LegalPersonWhereInput {
  AND: [LegalPersonWhereInput!]
  CarrierCompany: CarrierCompanyListRelationFilter
  CorporateClient: LegalClientListRelationFilter
  MaintenanceCompany: MaintenanceCompanyWhereInput
  NOT: [LegalPersonWhereInput!]
  OR: [LegalPersonWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyListRelationFilter
  Recipient: RecipientListRelationFilter
  address_number: StringFilter
  city: StringFilter
  cnpj: StringFilter
  complement: StringNullableFilter
  corporate_name: StringFilter
  created_at: DateTimeFilter
  email: StringFilter
  fantasy_name: StringFilter
  first_phone: StringFilter
  id: StringFilter
  neighborhood: StringFilter
  public_place: StringFilter
  second_phone: StringNullableFilter
  state_registration: StringFilter
  third_phone: StringNullableFilter
  uf: StringFilter
  updated_at: DateTimeFilter
}

input MaintenanceCompanyListRelationFilter {
  every: MaintenanceCompanyWhereInput
  none: MaintenanceCompanyWhereInput
  some: MaintenanceCompanyWhereInput
}

input MaintenanceCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input MaintenanceCompanyOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  Maintenance: MaintenanceOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  cnpj: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  specialty_maintenance: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input MaintenanceCompanyWhereInput {
  AND: [MaintenanceCompanyWhereInput!]
  CreatedBy: UserWhereInput
  LegalPerson: LegalPersonWhereInput
  Maintenance: MaintenanceListRelationFilter
  NOT: [MaintenanceCompanyWhereInput!]
  OR: [MaintenanceCompanyWhereInput!]
  UpdatedBy: UserWhereInput
  cnpj: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  specialty_maintenance: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input MaintenanceListRelationFilter {
  every: MaintenanceWhereInput
  none: MaintenanceWhereInput
  some: MaintenanceWhereInput
}

input MaintenanceOrderByRelationAggregateInput {
  _count: SortOrder
}

input MaintenanceWhereInput {
  AND: [MaintenanceWhereInput!]
  CreatedBy: UserWhereInput
  MaintenanceCompany: MaintenanceCompanyWhereInput
  NOT: [MaintenanceWhereInput!]
  OR: [MaintenanceWhereInput!]
  TypeOfMaintenance: TypeOfMaintenanceWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  maintenance_company_cnpj: StringFilter
  maintenance_process_id: StringFilter
  plate: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type Mutation {
  createCarrierCompany(data: CarrierCompanyInput!): CarrierCompanyModel!
  createCiotForLegalClient(ciotForLegalClientInput: CiotForLegalClientInput!): CiotForLegalClientModel!
  createCompanyVehicle(CompanyVehicleInput: CompanyVehicleInput!): CompanyVehicleIModel!
  createContractOutsourcedDriver(CompanyVehicleInput: ContractOutsourcedDriverInput!): ContractOutsourcedDriverModel!
  createInvoiceForLegalClient(invoiceForLegalClientInput: InvoiceForLegalClientInput!): InvoiceForLegalClientModel!
  createInvoiceForPhysicalCustomer(invoiceForPhysicalCustomerInput: InvoiceForPhysicalCustomerInput!): InvoiceForPhysicalCustomerModel!
  createLegalClient(legalclientInput: LegalClientInput!): LegalClientModel!
  createLegalClientMerchandise(legalClientMerchandiseInput: LegalClientMerchandiseInput!): LegalClientMerchandiseModel!
  createLegalClientOrder(legalClientOrderInput: LegalClientOrderInput!): LegalClientOrderModel!
  createLegalContract(legalContractInput: LegalContractInput!): LegalContractModel!
  createOrderProcessingLegalClient(data: OrderProcessingLegalClientInput!): OrderProcessingLegalClientModel!
  createOrderProcessingPhysicalCustomer(data: OrderProcessingPhysicalCustomerInput!): OrderProcessingPhysicalCustomerModel!
  createOutsourcedDriver(outsourcedDriver: OutsourcedDriverInput!): OutsourcedDriverModel!
  createOutsourcedTransportCompany(outsourcedTransportCompanyInput: OutsourcedTransportCompanyInput!): OutsourcedTransportCompanyModel!
  createOutsourcedTransportCompanyContract(outsourcedTransportCompanyContractInput: OutsourcedTransportCompanyContractInput!): OutsourcedTransportCompanyContractModel!
  createOutsourcedTransportCompanyDriver(outsourcedTransportCompanyDriverInput: OutsourcedTransportCompanyDriverInput!): OutsourcedTransportCompanyDriverModel!
  createOutsourcedTransportVehicle(outsourcedTransportVehicleInput: OutsourcedTransportVehicleInput!): OutsourcedTransportVehicleModel!
  createOutsourcedVehicle(OutsourcedVehicleInput: OutsourcedVehicleInput!): OutsourcedVehicleIModel!
  createOwnDriver(ownDriverInput: OwnDriverInput!): OwnDriverModel!
  createPhysicalCustomer(data: PhysicalCustomerInput!): PhysicalCustomerModel!
  createPhysicalCustomerMerchandise(data: PhysicalCustomerMerchandiseInput!): PhysicalCustomerMerchandiseModel!
  createPhysicalCustomerOrder(physicalCustomerOrderInput: PhysicalCustomerOrderInput!): PhysicalCustomerOrderModel!
  createRouteLegalClient(data: RouteLegalClientInput!): RouteLegalClientModel!
  createRoutePhysicalCustomer(data: RoutePhysicalCustomerInput!): RoutePhysicalCustomerModel!
  createUser(avatar: Upload, createUserInput: UserInput!): UserModel!
  createVehicleBodywork(vehicleBodyworkInput: VehicleBodyworkInput!): VehicleBodyworkModel!
  createVehicleBrand(vehicleBrandInput: VehicleBrandInput!): VehicleBrandModel!
  createVehicleModel(vehicleModelInput: VehicleModelInput!): VehicleModelGraphql!
  createVehicleType(vehicleTypeCreate: VehicleTypeInput!): VehicleTypeModel!
  login(loginData: AuthInput!): AuthModel!
  updateCarriercompany(data: CarrierCompanyUpdateInput!, id: String!): CarrierCompanyModel!
  updateOrderProcessingLegalClient(data: OrderProcessingLegalClientUpdateInput!, id: String!): OrderProcessingLegalClientModel!
  updateOrderProcessingPhysicalCustomer(data: OrderProcessingPhysicalCustomerUpdateInput!, id: String!): OrderProcessingPhysicalCustomerModel!
  updateOutsourcedDriver(id: String!, outsourcedDriver: OutsourcedDriverUpdateInput!): OutsourcedDriverModel!
  updateOwnDriver(id: String!, ownDriverUpdate: OwnDriverUpdate!): OwnDriverModel!
  updatePhysicalCustomer(id: String!, ownDriverUpdate: PhysicalCustomerUpdateInput!): PhysicalCustomerModel!
  updatePhysicalCustomerMerchandise(data: PhysicalCustomerMerchandiseUpdateInput!, id: String!): PhysicalCustomerMerchandiseModel!
  updateRouteLegalClient(data: RouteLegalClientUpdateInput!, id: String!): RouteLegalClientModel!
  updateRoutePhysicalCustomer(data: RoutePhysicalCustomerUpdateInput!, id: String!): RoutePhysicalCustomerModel!
  updateUser(avatar: Upload, id: String!, userUpdate: UserUpdateInput!): UserModel!
  updateVehicleBodywork(id: String!, vehicleBodyworkIUpdate: VehicleBodyworkUpdateInput!): VehicleBodyworkModel!
  updateciotForLegalClient(ciotForLegalClientInput: CiotForLegalClientUpdateInput!, id: String!): CiotForLegalClientModel!
  updatedCompanyVehicle(id: String!, outsourced: CompanyVehicleUpdateInput!): CompanyVehicleIModel!
  updatedContractOutsourcedDriver(id: String!, outsourced: ContractOutsoucedDriverUpdateInput!): ContractOutsourcedDriverModel!
  updatedOutsourcedVehicle(id: String!, outsourced: OutsourcedVehicleUpdateInput!): OutsourcedVehicleIModel!
  updatedVehicleBrand(id: String!, vehicleBrandUpdate: VehicleBrandUpdateInput!): VehicleBrandModel!
  updatedVehicleModel(id: String!, vehicleModelUpdate: VehicleModelUpdateInput!): VehicleModelGraphql!
  updatedVehicleType(id: String!, vehicleTypeInput: VehicleTypeUpdateInput!): VehicleTypeModel!
  updateinvoiceForLegalClient(id: String!, invoiceForLegalClientInput: InvoiceForLegalClientUpdateInput!): InvoiceForLegalClientModel!
  updateinvoiceForPhysicalCustomer(id: String!, invoiceForPhysicalCustomerInput: InvoiceForPhysicalCustomerUpdateInput!): InvoiceForPhysicalCustomerModel!
  updatelegalClientMerchandise(id: String!, legalClientMerchandiseInput: LegalClientMerchandiseUpdateInput!): LegalClientMerchandiseModel!
  updatelegalClientOrder(id: String!, legalClientOrderInput: LegalClientOrderUpdateInput!): LegalClientOrderModel!
  updatelegalContract(id: String!, legalContractInput: LegalContractUpdateInput!): LegalContractModel!
  updatelegalclient(id: String!, legalclientInput: LegalClientUpdateInput!): LegalClientModel!
  updateoutsourcedTransportCompany(data: OutsourcedTransportCompanyUpdateInput!, id: String!): OutsourcedTransportCompanyModel!
  updateoutsourcedTransportCompanyContract(id: String!, outsourcedTransportCompanyContractInput: OutsourcedTransportCompanyContractUpdateInput!): OutsourcedTransportCompanyContractModel!
  updateoutsourcedTransportCompanyDriver(data: OutsourcedTransportCompanyDriverUpdateInput!, id: String!): OutsourcedTransportCompanyDriverModel!
  updateoutsourcedTransportVehicle(id: String!, outsourcedTransportVehicleInput: OutsourcedTransportVehicleUpdateInput!): OutsourcedTransportVehicleModel!
  updatephysicalCustomerOrder(id: String!, physicalCustomerOrderInput: PhysicalCustomerOrderUpdateInput!): PhysicalCustomerOrderModel!
}

input NaturalPersonInput {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  cpf: String!
  date_birth: Timestamp!
  email: String!
  first_phone: String!
  gender: String!
  name: String!
  nationality: String!
  neighborhood: String!
  public_place: String!
  rg: String!
  second_phone: String
  third_phone: String
  uf: String!
}

type NaturalPersonModel {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  cpf: String!
  date_birth: Timestamp!
  email: String!
  first_phone: String!
  gender: String!
  id: String!
  name: String!
  nationality: String!
  neighborhood: String!
  public_place: String!
  rg: String!
  second_phone: String
  third_phone: String
  uf: String!
}

input NaturalPersonOrderByWithRelationInput {
  OutsourcedDriver: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverOrderByWithRelationInput
  OwnDriver: OwnDriverOrderByRelationAggregateInput
  PhysicalCustomer: PhysicalCustomerOrderByRelationAggregateInput
  Recipient: RecipientOrderByRelationAggregateInput
  address_number: SortOrder
  cep: SortOrder
  city: SortOrder
  complement: SortOrder
  cpf: SortOrder
  date_birth: SortOrder
  email: SortOrder
  first_phone: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
  nationality: SortOrder
  neighborhood: SortOrder
  public_place: SortOrder
  rg: SortOrder
  second_phone: SortOrder
  third_phone: SortOrder
  uf: SortOrder
}

input NaturalPersonUpdate {
  address_number: String
  cep: String
  city: String
  complement: String
  cpf: String
  date_birth: Timestamp
  email: String
  first_phone: String
  gender: String
  name: String
  nationality: String
  neighborhood: String
  public_place: String
  rg: String
  second_phone: String
  third_phone: String
  uf: String
}

input NaturalPersonWhereInput {
  AND: [NaturalPersonWhereInput!]
  NOT: [NaturalPersonWhereInput!]
  OR: [NaturalPersonWhereInput!]
  OutsourcedDriver: OutsourcedDriverListRelationFilter
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverWhereInput
  OwnDriver: OwnDriverListRelationFilter
  PhysicalCustomer: PhysicalCustomerListRelationFilter
  Recipient: RecipientListRelationFilter
  address_number: StringFilter
  cep: StringFilter
  city: StringFilter
  complement: StringFilter
  cpf: StringFilter
  date_birth: DateTimeFilter
  email: StringFilter
  first_phone: StringFilter
  gender: StringFilter
  id: StringFilter
  name: StringFilter
  nationality: StringFilter
  neighborhood: StringFilter
  public_place: StringFilter
  rg: StringFilter
  second_phone: StringNullableFilter
  third_phone: StringNullableFilter
  uf: StringFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input OrderProcessingLegalClientInput {
  end_at: Timestamp
  order_id: String!
  start_at: Timestamp!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  vehicle_id: String!
}

input OrderProcessingLegalClientListRelationFilter {
  every: OrderProcessingLegalClientWhereInput
  none: OrderProcessingLegalClientWhereInput
  some: OrderProcessingLegalClientWhereInput
}

type OrderProcessingLegalClientModel {
  CreatedUser: UserModelRefereces!
  Order: LegalClientOrderModel!
  Routes: [RouteLegalClientModel!]!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  end_at: Timestamp!
  id: String!
  order_id: String!
  start_at: Timestamp!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input OrderProcessingLegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderProcessingLegalClientOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  Order: LegalClientOrderOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByRelationAggregateInput
  RoutesLegalClient: RoutesLegalClientOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  end_at: SortOrder
  id: SortOrder
  order_id: SortOrder
  start_at: SortOrder
  total_distance: SortOrder
  total_spend_liters: SortOrder
  total_spending_money: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OrderProcessingLegalClientUpdateInput {
  end_at: Timestamp
  order_id: String
  start_at: Timestamp
  total_distance: Float
  total_spend_liters: Float
  total_spending_money: Float
  vehicle_id: String
}

input OrderProcessingLegalClientWhereInput {
  AND: [OrderProcessingLegalClientWhereInput!]
  CompanyVehicle: CompanyVehicleListRelationFilter
  CreatedBy: UserWhereInput
  NOT: [OrderProcessingLegalClientWhereInput!]
  OR: [OrderProcessingLegalClientWhereInput!]
  Order: LegalClientOrderWhereInput
  OutsourcedVehicle: OutsourcedVehicleListRelationFilter
  RoutesLegalClient: RoutesLegalClientListRelationFilter
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  end_at: DateTimeNullableFilter
  id: StringFilter
  order_id: StringFilter
  start_at: DateTimeFilter
  total_distance: FloatFilter
  total_spend_liters: IntFilter
  total_spending_money: FloatFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input OrderProcessingPhysicalCustomerInput {
  end_at: Timestamp
  order_id: String!
  start_at: Timestamp!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  vehicle_id: String!
}

input OrderProcessingPhysicalCustomerListRelationFilter {
  every: OrderProcessingPhysicalCustomerWhereInput
  none: OrderProcessingPhysicalCustomerWhereInput
  some: OrderProcessingPhysicalCustomerWhereInput
}

type OrderProcessingPhysicalCustomerModel {
  CreatedUser: UserModelRefereces!
  Order: PhysicalCustomerOrderModel!
  Routes: [RoutePhysicalCustomerModel!]!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  end_at: Timestamp!
  id: String!
  order_id: String!
  start_at: Timestamp!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input OrderProcessingPhysicalCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderProcessingPhysicalCustomerOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  Order: PhysicalCustomerOrderOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByRelationAggregateInput
  RoutesPhysicalCustomer: RoutesPhysicalCustomerOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  end_at: SortOrder
  id: SortOrder
  order_id: SortOrder
  start_at: SortOrder
  total_distance: SortOrder
  total_spend_liters: SortOrder
  total_spending_money: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OrderProcessingPhysicalCustomerUpdateInput {
  end_at: Timestamp
  order_id: String
  start_at: Timestamp
  total_distance: Float
  total_spend_liters: Float
  total_spending_money: Float
  vehicle_id: String
}

input OrderProcessingPhysicalCustomerWhereInput {
  AND: [OrderProcessingPhysicalCustomerWhereInput!]
  CompanyVehicle: CompanyVehicleListRelationFilter
  CreatedBy: UserWhereInput
  NOT: [OrderProcessingPhysicalCustomerWhereInput!]
  OR: [OrderProcessingPhysicalCustomerWhereInput!]
  Order: PhysicalCustomerOrderWhereInput
  OutsourcedVehicle: OutsourcedVehicleListRelationFilter
  RoutesPhysicalCustomer: RoutesPhysicalCustomerListRelationFilter
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  end_at: DateTimeNullableFilter
  id: StringFilter
  order_id: StringFilter
  start_at: DateTimeFilter
  total_distance: FloatFilter
  total_spend_liters: IntFilter
  total_spending_money: FloatFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input OutsourcedDriverInput {
  ContractOutsourcedDriver: ContractOutsourcedDriverReferecesInput!
  NaturalPerson: NaturalPersonInput!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle_id: String
  course_mopp: Boolean!
  outsourced_vehicle_id: String
}

input OutsourcedDriverListRelationFilter {
  every: OutsourcedDriverWhereInput
  none: OutsourcedDriverWhereInput
  some: OutsourcedDriverWhereInput
}

type OutsourcedDriverModel {
  CompanyVehicle: CompanyVehicleIModel
  ContractOutsourcedDriver: [ContractOutsourcedDriverRefencesModel!]!
  CreatedUser: UserModelRefereces!
  NaturalPerson: NaturalPersonModel!
  OutsourcedVehicle: OutsourcedVehicleIModel
  UpdatedUser: UserModelRefereces!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
  created_by: String!
  id: String!
  natural_person_id: String!
  outsourced_vehicle_id: String!
  updated_by: String!
}

input OutsourcedDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedDriverOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByWithRelationInput
  ContractOutsourcedDriver: ContractOutsourcedDriverOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  company_vehicle_id: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  outsourced_vehicle_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedDriverUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle_id: String
  course_mopp: Boolean
  outsourced_vehicle_id: String
}

input OutsourcedDriverWhereInput {
  AND: [OutsourcedDriverWhereInput!]
  CompanyVehicle: CompanyVehicleWhereInput
  ContractOutsourcedDriver: ContractOutsourcedDriverListRelationFilter
  CreatedBy: UserWhereInput
  NOT: [OutsourcedDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OutsourcedDriverWhereInput!]
  OutsourcedVehicle: OutsourcedVehicleWhereInput
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  company_vehicle_id: StringNullableFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  outsourced_vehicle_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyContractInput {
  carrierCompanyId: String!
  legalClientOrderId: String!
  outSourcedTransportCompanyId: String!
}

input OutsourcedTransportCompanyContractListRelationFilter {
  every: OutsourcedTransportCompanyContractWhereInput
  none: OutsourcedTransportCompanyContractWhereInput
  some: OutsourcedTransportCompanyContractWhereInput
}

type OutsourcedTransportCompanyContractModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  LegalClientOrder: LegalClientOrderModel!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  carrierCompanyId: String!
  contractNumber: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalClientOrderId: String!
  outSourcedTransportCompanyId: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyContractOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyContractOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_company_id: SortOrder
  contract_number: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_client_order_id: SortOrder
  outsourced_transport_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyContractUpdateInput {
  carrierCompanyId: String
  outSourcedTransportCompanyId: String
}

input OutsourcedTransportCompanyContractWhereInput {
  AND: [OutsourcedTransportCompanyContractWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  LegalClientOrder: LegalClientOrderWhereInput
  NOT: [OutsourcedTransportCompanyContractWhereInput!]
  OR: [OutsourcedTransportCompanyContractWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  carrier_company_id: StringFilter
  contract_number: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_client_order_id: StringFilter
  outsourced_transport_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyDriverInput {
  NaturalPerson: NaturalPersonInput
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  course_mopp: Boolean!
  natural_person_id: String
  outsourced_transport_company_id: String!
}

input OutsourcedTransportCompanyDriverListRelationFilter {
  every: OutsourcedTransportCompanyDriverWhereInput
  none: OutsourcedTransportCompanyDriverWhereInput
  some: OutsourcedTransportCompanyDriverWhereInput
}

type OutsourcedTransportCompanyDriverModel {
  CreatedUser: UserModelRefereces!
  NaturalPerson: NaturalPersonModel!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  course_mopp: Boolean!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  outsourced_transport_company_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  outsourced_transport_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyDriverUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  course_mopp: Boolean
  natural_person_id: String
  outsourced_transport_company_id: String
}

input OutsourcedTransportCompanyDriverWhereInput {
  AND: [OutsourcedTransportCompanyDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedTransportCompanyDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OutsourcedTransportCompanyDriverWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  outsourced_transport_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyInput {
  LegalPerson: LegalPersonInput
  legalPersonId: String
}

input OutsourcedTransportCompanyListRelationFilter {
  every: OutsourcedTransportCompanyWhereInput
  none: OutsourcedTransportCompanyWhereInput
  some: OutsourcedTransportCompanyWhereInput
}

type OutsourcedTransportCompanyModel {
  Contracts: [OutsourcedTransportCompanyContractModel!]
  CreatedUser: UserModelRefereces!
  Drivers: [OutsourcedTransportCompanyDriverModel!]
  LegalPerson: LegalPersonModel!
  UpdatedUser: UserModelRefereces!
  Vehicles: [OutsourcedTransportVehicleModel!]
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalPersonId: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  OutsourcedCompanyVehicle: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
}

input OutsourcedTransportCompanyWhereInput {
  AND: [OutsourcedTransportCompanyWhereInput!]
  CreatedBy: UserWhereInput
  LegalPerson: LegalPersonWhereInput
  NOT: [OutsourcedTransportCompanyWhereInput!]
  OR: [OutsourcedTransportCompanyWhereInput!]
  OutsourcedCompanyVehicle: OutsourcedTransportVehicleListRelationFilter
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportVehicleInput {
  Vehicle: VehicleInput!
  outsourced_company_id: String!
}

input OutsourcedTransportVehicleListRelationFilter {
  every: OutsourcedTransportVehicleWhereInput
  none: OutsourcedTransportVehicleWhereInput
  some: OutsourcedTransportVehicleWhereInput
}

type OutsourcedTransportVehicleModel {
  CreatedUser: UserModelRefereces!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  id: String!
  outsourced_company_id: String!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input OutsourcedTransportVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportVehicleOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  outsourced_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OutsourcedTransportVehicleUpdateInput {
  Vehicle: VehicleUpdateInput
  outsourced_company_id: String
}

input OutsourcedTransportVehicleWhereInput {
  AND: [OutsourcedTransportVehicleWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedTransportVehicleWhereInput!]
  OR: [OutsourcedTransportVehicleWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  outsourced_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

type OutsourcedVehicleIModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  id: String!
  updated_at: Timestamp!
  vehicle_id: String!
}

input OutsourcedVehicleInput {
  Vehicle: VehicleInput!
}

input OutsourcedVehicleListRelationFilter {
  every: OutsourcedVehicleWhereInput
  none: OutsourcedVehicleWhereInput
  some: OutsourcedVehicleWhereInput
}

input OutsourcedVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedVehicleOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OrderProcessing: OrderProcessingPhysicalCustomerOrderByWithRelationInput
  OrderProcessingLegalClient: OrderProcessingLegalClientOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  orderProcessingLegalClientId: SortOrder
  order_processing_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OutsourcedVehicleUpdateInput {
  Vehicle: VehicleUpdateInput
}

input OutsourcedVehicleWhereInput {
  AND: [OutsourcedVehicleWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedVehicleWhereInput!]
  OR: [OutsourcedVehicleWhereInput!]
  OrderProcessing: OrderProcessingPhysicalCustomerWhereInput
  OrderProcessingLegalClient: OrderProcessingLegalClientWhereInput
  OutsourcedDriver: OutsourcedDriverWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  orderProcessingLegalClientId: StringNullableFilter
  order_processing_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input OwnDriverInput {
  NaturalPerson: NaturalPersonInput!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
}

input OwnDriverListRelationFilter {
  every: OwnDriverWhereInput
  none: OwnDriverWhereInput
  some: OwnDriverWhereInput
}

type OwnDriverModel {
  NaturalPerson: NaturalPersonModel!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input OwnDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OwnDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  company_vehicle: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OwnDriverUpdate {
  NaturalPersonUpdate: NaturalPersonUpdate!
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle: Boolean
  course_mopp: Boolean
}

input OwnDriverWhereInput {
  AND: [OwnDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OwnDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OwnDriverWhereInput!]
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  company_vehicle: BoolFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input PhysicalCustomerInput {
  NaturalPerson: NaturalPersonInput
  branch: String
  natural_person_id: String
}

input PhysicalCustomerListRelationFilter {
  every: PhysicalCustomerWhereInput
  none: PhysicalCustomerWhereInput
  some: PhysicalCustomerWhereInput
}

input PhysicalCustomerMerchandiseInput {
  amount: Int!
  codMerchandise: String!
  description: String!
  invoicePhysicalClient: String!
  mass: Float!
  physicalCustomerOrderId: String!
  value: Float!
  volume: Float!
}

input PhysicalCustomerMerchandiseListRelationFilter {
  every: PhysicalCustomerMerchandiseWhereInput
  none: PhysicalCustomerMerchandiseWhereInput
  some: PhysicalCustomerMerchandiseWhereInput
}

type PhysicalCustomerMerchandiseModel {
  Invoice: InvoiceForPhysicalCustomerModel!
  LegalClientOrder: LegalClientOrderModel!
  amount: Int!
  codMerchandise: String!
  description: String!
  id: String!
  invoicePhysicalClient: String!
  mass: Float!
  physicalCustomerOrderId: String!
  value: Float!
  volume: Float!
}

input PhysicalCustomerMerchandiseOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerMerchandiseOrderByWithRelationInput {
  InvoiceForPhysicalCustomer: InvoiceForPhysicalCustomerOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByWithRelationInput
  amount: SortOrder
  codMerchandise: SortOrder
  description: SortOrder
  id: SortOrder
  invoice_id: SortOrder
  mass: SortOrder
  physicalCustomerOrderId: SortOrder
  value: SortOrder
  volume: SortOrder
}

input PhysicalCustomerMerchandiseUpdateInput {
  amount: Int
  codMerchandise: String
  description: String
  invoicePhysicalClient: String
  mass: Float
  physicalCustomerOrderId: String
  value: Float
  volume: Float
}

input PhysicalCustomerMerchandiseWhereInput {
  AND: [PhysicalCustomerMerchandiseWhereInput!]
  InvoiceForPhysicalCustomer: InvoiceForPhysicalCustomerWhereInput
  NOT: [PhysicalCustomerMerchandiseWhereInput!]
  OR: [PhysicalCustomerMerchandiseWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderWhereInput
  amount: IntFilter
  codMerchandise: StringFilter
  description: StringFilter
  id: StringFilter
  invoice_id: StringFilter
  mass: FloatFilter
  physicalCustomerOrderId: StringFilter
  value: FloatFilter
  volume: FloatFilter
}

type PhysicalCustomerModel {
  NaturalPerson: NaturalPersonModel!
  branch: String
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input PhysicalCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  InvoiceForPhysicalCustomer: InvoiceForPhysicalCustomerOrderByRelationAggregateInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  branch: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input PhysicalCustomerOrderInput {
  physicalCustomerId: String!
  recipient_id: String!
}

input PhysicalCustomerOrderListRelationFilter {
  every: PhysicalCustomerOrderWhereInput
  none: PhysicalCustomerOrderWhereInput
  some: PhysicalCustomerOrderWhereInput
}

type PhysicalCustomerOrderModel {
  CreatedUser: UserModelRefereces!
  Merchandises: [PhysicalCustomerMerchandiseModel!]!
  PhysicalCustomer: PhysicalCustomerModel!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  order: String!
  physicalCustomerId: String!
  recipient_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input PhysicalCustomerOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerOrderOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OrderProcessingPhysicalCustomer: OrderProcessingPhysicalCustomerOrderByRelationAggregateInput
  PhysicalCustomer: PhysicalCustomerOrderByWithRelationInput
  PhysicalCustomerMerchandise: PhysicalCustomerMerchandiseOrderByRelationAggregateInput
  Recipient: RecipientOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  order: SortOrder
  physical_customer_id: SortOrder
  recipient_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input PhysicalCustomerOrderUpdateInput {
  physicalCustomerId: String
  recipient_id: String
}

input PhysicalCustomerOrderWhereInput {
  AND: [PhysicalCustomerOrderWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [PhysicalCustomerOrderWhereInput!]
  OR: [PhysicalCustomerOrderWhereInput!]
  OrderProcessingPhysicalCustomer: OrderProcessingPhysicalCustomerListRelationFilter
  PhysicalCustomer: PhysicalCustomerWhereInput
  PhysicalCustomerMerchandise: PhysicalCustomerMerchandiseListRelationFilter
  Recipient: RecipientWhereInput
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  order: StringFilter
  physical_customer_id: StringFilter
  recipient_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input PhysicalCustomerUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  branch: String
  natural_person_id: String
}

input PhysicalCustomerWhereInput {
  AND: [PhysicalCustomerWhereInput!]
  CreatedBy: UserWhereInput
  InvoiceForPhysicalCustomer: InvoiceForPhysicalCustomerListRelationFilter
  NOT: [PhysicalCustomerWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [PhysicalCustomerWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  UpdatedBy: UserWhereInput
  branch: StringNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type Query {
  GetOrderProcessingLegalClient(id: String): OrderProcessingLegalClientModel!
  GetOrderProcessingPhysicalCustomer(id: String): OrderProcessingPhysicalCustomerModel!
  getAllCarrierCompany(limit: Int! = 25, offset: Int! = 0, sort: CarrierCompanyOrderByWithRelationInput, where: CarrierCompanyWhereInput): [CarrierCompanyModel!]
  getAllCiotForLegalClient(limit: Int! = 25, offset: Int! = 0, sort: CiotForLegalClientOrderByWithRelationInput, where: CiotForLegalClientWhereInput): [CiotForLegalClientModel!]
  getAllCompanyVehicle(limit: Int! = 25, offset: Int! = 0, sort: CompanyVehicleOrderByWithRelationInput, where: CompanyVehicleWhereInput): [CompanyVehicleIModel!]!
  getAllContractOutsourcedDriver(limit: Int! = 25, offset: Int! = 0, sort: ContractOutsourcedDriverOrderByWithRelationInput, where: ContractOutsourcedDriverWhereInput): [ContractOutsourcedDriverModel!]!
  getAllInvoiceForLegalClient(limit: Int! = 25, offset: Int! = 0, sort: LegalClientOrderByWithRelationInput, where: LegalClientWhereInput): [InvoiceForLegalClientModel!]
  getAllInvoiceForPhysicalCustomer(limit: Int! = 25, offset: Int! = 0, sort: InvoiceForPhysicalCustomerOrderByWithRelationInput, where: InvoiceForPhysicalCustomerWhereInput): [InvoiceForPhysicalCustomerModel!]
  getAllLegalClient(limit: Int! = 25, offset: Int! = 0, sort: LegalClientOrderByWithRelationInput, where: LegalClientWhereInput): [LegalClientModel!]
  getAllLegalClientMerchandise(limit: Int! = 25, offset: Int! = 0, sort: LegalClientMerchandiseOrderByWithRelationInput, where: LegalClientMerchandiseWhereInput): [LegalClientMerchandiseModel!]
  getAllLegalClientOrder(limit: Int! = 25, offset: Int! = 0, sort: LegalClientOrderOrderByWithRelationInput, where: LegalClientOrderWhereInput): [LegalClientOrderModel!]
  getAllLegalContract(limit: Int! = 25, offset: Int! = 0, sort: LegalContractOrderByWithRelationInput, where: LegalContractWhereInput): [LegalContractModel!]
  getAllOrderProcessingLegalClient(limit: Int! = 25, offset: Int! = 0, sort: OrderProcessingLegalClientOrderByWithRelationInput, where: OrderProcessingLegalClientWhereInput): [OrderProcessingLegalClientModel!]!
  getAllOrderProcessingPhysicalCustomer(limit: Int! = 25, offset: Int! = 0, sort: OrderProcessingPhysicalCustomerOrderByWithRelationInput, where: OrderProcessingPhysicalCustomerWhereInput): [OrderProcessingPhysicalCustomerModel!]!
  getAllOutsourcedDriver(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedDriverOrderByWithRelationInput, where: OutsourcedDriverWhereInput): [OutsourcedDriverModel!]!
  getAllOutsourcedTransportCompany(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyOrderByWithRelationInput, where: OutsourcedTransportCompanyWhereInput): [OutsourcedTransportCompanyModel!]
  getAllOutsourcedTransportCompanyContract(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyOrderByWithRelationInput, where: OutsourcedTransportCompanyWhereInput): [OutsourcedTransportCompanyContractModel!]
  getAllOutsourcedTransportCompanyDriver(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyDriverOrderByWithRelationInput, where: OutsourcedTransportCompanyDriverWhereInput): [OutsourcedTransportCompanyDriverModel!]
  getAllOutsourcedTransportVehicle(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportVehicleOrderByWithRelationInput, where: OutsourcedTransportVehicleWhereInput): [OutsourcedTransportVehicleModel!]
  getAllOutsourcedVehicle(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportVehicleOrderByWithRelationInput, where: OutsourcedTransportVehicleWhereInput): [OutsourcedVehicleIModel!]!
  getAllOwnDriver(limit: Int! = 25, offset: Int! = 0, sort: OwnDriverOrderByWithRelationInput, where: OwnDriverWhereInput): [OwnDriverModel!]!
  getAllPhysicalCustomer(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerOrderByWithRelationInput, where: OwnDriverWhereInput): [PhysicalCustomerModel!]!
  getAllPhysicalCustomerMerchandise(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerMerchandiseOrderByWithRelationInput, where: PhysicalCustomerMerchandiseWhereInput): [PhysicalCustomerMerchandiseModel!]
  getAllPhysicalCustomerOrder(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerOrderOrderByWithRelationInput, where: PhysicalCustomerOrderWhereInput): [PhysicalCustomerOrderModel!]
  getAllRouteLegalClient(limit: Int! = 25, offset: Int! = 0, sort: RoutesLegalClientOrderByWithRelationInput, where: RoutesLegalClientWhereInput): [RouteLegalClientModel!]!
  getAllRoutePhysicalCustomer(limit: Int! = 25, offset: Int! = 0, sort: RoutesPhysicalCustomerOrderByWithRelationInput, where: RoutesPhysicalCustomerWhereInput): [RoutePhysicalCustomerModel!]!
  getAllVehicleBodywork(limit: Int! = 25, offset: Int! = 0, sort: VehicleBodyworkOrderByWithRelationInput, where: VehicleBodyworkWhereInput): [VehicleBodyworkModel!]
  getAllVehicleBrand(limit: Int! = 25, offset: Int! = 0, sort: VehicleBrandOrderByWithRelationInput, where: VehicleBrandWhereInput): [VehicleBrandModel!]!
  getAllVehicleModel(limit: Int! = 25, offset: Int! = 0, sort: VehicleModelOrderByWithRelationInput, where: VehicleModelWhereInput): [VehicleModelGraphql!]
  getAllVehicleTypes(limit: Int! = 25, offset: Int! = 0, sort: VehicleTypeOrderByWithRelationInput, where: VehicleTypeWhereInput): [VehicleTypeModel!]
  getCarrierCompanyModel(cnpj: String, corporateName: String, fantasyName: String, legalClientId: String, legalPersonId: String): CarrierCompanyModel!
  getCiotForLegalClientModel(ciot: String, id: String): CiotForLegalClientModel!
  getCompanyVehicle(id: String, plate: String, vehicleId: String): CompanyVehicleIModel!
  getContractOutsourcedDriver(contractNumber: String, id: String): ContractOutsourcedDriverModel!
  getInvoiceForLegalClientModel(id: String, invoice_number: String): InvoiceForLegalClientModel!
  getInvoiceForPhysicalCustomerModel(id: String, invoice_number: String): InvoiceForPhysicalCustomerModel!
  getLegalClientMerchandiseModel(codMerchandise: String, id: String): LegalClientMerchandiseModel!
  getLegalClientModel(cnpj: String, corporateName: String, fantasyName: String, legalClientId: String, legalPersonId: String): LegalClientModel!
  getLegalClientOrderModel(id: String, order: String): LegalClientOrderModel
  getLegalContractModel(contractNumber: String, id: String): LegalContractModel!
  getOutsourcedDriver(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OutsourcedDriverModel!
  getOutsourcedTransportCompanyContractModel(contractNumber: String, id: String): OutsourcedTransportCompanyContractModel
  getOutsourcedTransportCompanyDriverModel(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OutsourcedTransportCompanyDriverModel!
  getOutsourcedTransportCompanyModel(cnpj: String, corporateName: String, fantasyName: String, id: String, legalPersonId: String): OutsourcedTransportCompanyModel
  getOutsourcedTransportVehicleModel(id: String, plate: String, vehicleId: String): OutsourcedTransportVehicleModel
  getOutsourcedVehicle(id: String, plate: String, vehicleId: String): OutsourcedVehicleIModel!
  getOwnDriver(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OwnDriverModel
  getPhysicalCustomer(cpf: String, id: String, naturalPersonId: String, rg: String): PhysicalCustomerModel
  getPhysicalCustomerMerchandiseModel(codMerchandise: String, id: String): PhysicalCustomerMerchandiseModel!
  getPhysicalCustomerOrderModel(id: String, order: String): PhysicalCustomerOrderModel
  getRouteLegalClient(id: String): RouteLegalClientModel!
  getRoutePhysicalCustomer(id: String): RoutePhysicalCustomerModel!
  getVehicleBodyworkModel(id: String, name: String): VehicleBodyworkModel!
  getVehicleBrand(id: String, name: String): VehicleBrandModel!
  getVehicleModel(id: String, name: String): VehicleModelGraphql!
  getVehicleType(id: String, name: String): VehicleTypeModel!
  user(email: String, id: String, username: String): UserModel!
  users(limit: Int! = 25, offset: Int! = 0, sort: UserOrderByWithRelationInput, where: UserWhereInput): [UserModel!]!
}

enum QueryMode {
  default
  insensitive
}

input RecipientListRelationFilter {
  every: RecipientWhereInput
  none: RecipientWhereInput
  some: RecipientWhereInput
}

input RecipientOrderByRelationAggregateInput {
  _count: SortOrder
}

input RecipientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input RecipientWhereInput {
  AND: [RecipientWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientOrder: LegalClientOrderListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [RecipientWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [RecipientWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringNullableFilter
  natural_person_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input RouteLegalClientInput {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  neighborhood: String!
  order_processing_id: String!
  public_place: String!
  uf: String!
}

type RouteLegalClientModel {
  OrderProcessing: OrderProcessingLegalClientModel!
  address_number: String!
  cep: String!
  city: String!
  complement: String
  created_at: Timestamp!
  id: String!
  neighborhood: String!
  order_processing_id: String!
  public_place: String!
  uf: String!
  updated_at: Timestamp!
}

input RouteLegalClientUpdateInput {
  address_number: String
  cep: String
  city: String
  complement: String
  neighborhood: String
  order_processing_id: String
  public_place: String
  uf: String
}

input RoutePhysicalCustomerInput {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  neighborhood: String!
  order_processing_id: String!
  public_place: String!
  uf: String!
}

type RoutePhysicalCustomerModel {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  created_at: Timestamp!
  id: String!
  neighborhood: String!
  order_processing_id: String!
  public_place: String!
  uf: String!
  updated_at: Timestamp!
}

input RoutePhysicalCustomerUpdateInput {
  address_number: String
  cep: String
  city: String
  complement: String
  neighborhood: String
  order_processing_id: String
  public_place: String
  uf: String
}

input RoutesLegalClientListRelationFilter {
  every: RoutesLegalClientWhereInput
  none: RoutesLegalClientWhereInput
  some: RoutesLegalClientWhereInput
}

input RoutesLegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoutesLegalClientOrderByWithRelationInput {
  OrderProcessing: OrderProcessingLegalClientOrderByWithRelationInput
  address_number: SortOrder
  cep: SortOrder
  city: SortOrder
  complement: SortOrder
  created_at: SortOrder
  id: SortOrder
  neighborhood: SortOrder
  order_processing_id: SortOrder
  public_place: SortOrder
  uf: SortOrder
  updated_at: SortOrder
}

input RoutesLegalClientWhereInput {
  AND: [RoutesLegalClientWhereInput!]
  NOT: [RoutesLegalClientWhereInput!]
  OR: [RoutesLegalClientWhereInput!]
  OrderProcessing: OrderProcessingLegalClientWhereInput
  address_number: StringFilter
  cep: StringFilter
  city: StringFilter
  complement: StringNullableFilter
  created_at: DateTimeFilter
  id: StringFilter
  neighborhood: StringFilter
  order_processing_id: StringFilter
  public_place: StringFilter
  uf: StringFilter
  updated_at: DateTimeFilter
}

input RoutesPhysicalCustomerListRelationFilter {
  every: RoutesPhysicalCustomerWhereInput
  none: RoutesPhysicalCustomerWhereInput
  some: RoutesPhysicalCustomerWhereInput
}

input RoutesPhysicalCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoutesPhysicalCustomerOrderByWithRelationInput {
  OrderProcessing: OrderProcessingPhysicalCustomerOrderByWithRelationInput
  address_number: SortOrder
  cep: SortOrder
  city: SortOrder
  complement: SortOrder
  created_at: SortOrder
  id: SortOrder
  neighborhood: SortOrder
  order_processing_id: SortOrder
  public_place: SortOrder
  uf: SortOrder
  updated_at: SortOrder
}

input RoutesPhysicalCustomerWhereInput {
  AND: [RoutesPhysicalCustomerWhereInput!]
  NOT: [RoutesPhysicalCustomerWhereInput!]
  OR: [RoutesPhysicalCustomerWhereInput!]
  OrderProcessing: OrderProcessingPhysicalCustomerWhereInput
  address_number: StringFilter
  cep: StringFilter
  city: StringFilter
  complement: StringNullableFilter
  created_at: DateTimeFilter
  id: StringFilter
  neighborhood: StringFilter
  order_processing_id: StringFilter
  public_place: StringFilter
  uf: StringFilter
  updated_at: DateTimeFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TypeOfMaintenanceListRelationFilter {
  every: TypeOfMaintenanceWhereInput
  none: TypeOfMaintenanceWhereInput
  some: TypeOfMaintenanceWhereInput
}

input TypeOfMaintenanceOrderByRelationAggregateInput {
  _count: SortOrder
}

input TypeOfMaintenanceWhereInput {
  AND: [TypeOfMaintenanceWhereInput!]
  CreatedBy: UserWhereInput
  Maintenance: MaintenanceListRelationFilter
  NOT: [TypeOfMaintenanceWhereInput!]
  OR: [TypeOfMaintenanceWhereInput!]
  UpdatedBy: UserWhereInput
  corrective: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  description: StringFilter
  id: StringFilter
  preventive: BoolFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserInput {
  email: String!
  name: String!
  password: String!
  role: String!
  username: String!
}

type UserModel {
  avatar_url: String
  created_at: Timestamp
  email: String!
  id: String!
  name: String!
  password: String!
  role: String!
  updated_at: Timestamp
  username: String!
}

type UserModelRefereces {
  avatar_url: String
  email: String!
  id: String!
  name: String!
  username: String!
}

input UserOrderByWithRelationInput {
  CarrierCompanyCreatedBt: CarrierCompanyOrderByRelationAggregateInput
  CarrierCompanyUpdatedBy: CarrierCompanyOrderByRelationAggregateInput
  CiotForLegalCreatedByClient: CiotForLegalClientOrderByRelationAggregateInput
  CiotForLegalUpdatedByClient: CiotForLegalClientOrderByRelationAggregateInput
  CompanyVehicleCreatedBy: CompanyVehicleOrderByRelationAggregateInput
  CompanyVehicleUpdatedBy: CompanyVehicleOrderByRelationAggregateInput
  ContractOutsourcedDriverCreatedBy: ContractOutsourcedDriverOrderByRelationAggregateInput
  ContractOutsourcedDriverUpdatedBy: ContractOutsourcedDriverOrderByRelationAggregateInput
  IcmsCreatedBy: ICMSOrderByRelationAggregateInput
  IcmsUpdatedBy: ICMSOrderByRelationAggregateInput
  InvoiceForLegalClientCreatedBy: InvoiceForLegalClientOrderByRelationAggregateInput
  InvoiceForLegalClientUpdatedBy: InvoiceForLegalClientOrderByRelationAggregateInput
  InvoiceForPhysicalClientCreatedBy: InvoiceForPhysicalCustomerOrderByRelationAggregateInput
  InvoiceForPhysicalClientUpdatedBy: InvoiceForPhysicalCustomerOrderByRelationAggregateInput
  LegalClientCreatedBy: LegalClientOrderByRelationAggregateInput
  LegalClientCustomerOrderCreatedBy: LegalClientOrderOrderByRelationAggregateInput
  LegalClientCustomerOrderUpdatedBy: LegalClientOrderOrderByRelationAggregateInput
  LegalClientUpdatedBy: LegalClientOrderByRelationAggregateInput
  LegalContractCreatedBy: LegalContractOrderByRelationAggregateInput
  LegalContractUpdatedBy: LegalContractOrderByRelationAggregateInput
  MaintenanceCompanyCreatedBy: MaintenanceCompanyOrderByRelationAggregateInput
  MaintenanceCompanyUpdatedBy: MaintenanceCompanyOrderByRelationAggregateInput
  MaintenanceCreatedBy: MaintenanceOrderByRelationAggregateInput
  MaintenanceUpdatedBy: MaintenanceOrderByRelationAggregateInput
  OrderProcessingLegalClientCreatedBy: OrderProcessingLegalClientOrderByRelationAggregateInput
  OrderProcessingLegalClientUpdatedBy: OrderProcessingLegalClientOrderByRelationAggregateInput
  OrderProcessingPhysicalCustomerCreatedBy: OrderProcessingPhysicalCustomerOrderByRelationAggregateInput
  OrderProcessingPhysicalCustomerUpdatedBy: OrderProcessingPhysicalCustomerOrderByRelationAggregateInput
  OutsourcedDriverCreatedBy: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedDriverUpdatedBy: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyContractCreatedBy: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyContractUpdatedBy: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyCreatedBy: OutsourcedTransportCompanyOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriverCreatedBy: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriverUpdatedBy: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyUpdatedBy: OutsourcedTransportCompanyOrderByRelationAggregateInput
  OutsourcedTransportVehicleCreatedBy: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedTransportVehicleUpdatedBy: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedVehicleCreatedBy: OutsourcedVehicleOrderByRelationAggregateInput
  OutsourcedVehicleUpdatedBy: OutsourcedVehicleOrderByRelationAggregateInput
  OwnDriverCreatedBy: OwnDriverOrderByRelationAggregateInput
  OwnDriverUpdatedBy: OwnDriverOrderByRelationAggregateInput
  PhysicalCustomerCreatedBy: PhysicalCustomerOrderByRelationAggregateInput
  PhysicalCustomerOrderCreatedBy: PhysicalCustomerOrderOrderByRelationAggregateInput
  PhysicalCustomerOrderUpdatedBy: PhysicalCustomerOrderOrderByRelationAggregateInput
  PhysicalCustomerUpdatedBy: PhysicalCustomerOrderByRelationAggregateInput
  RecipientCreatedBy: RecipientOrderByRelationAggregateInput
  RecipientUpdatedBy: RecipientOrderByRelationAggregateInput
  TypeOfMaintenanceCreatedBy: TypeOfMaintenanceOrderByRelationAggregateInput
  TypeOfMaintenanceUpdatedBy: TypeOfMaintenanceOrderByRelationAggregateInput
  VehicleBodyworkCreatedBy: VehicleBodyworkOrderByRelationAggregateInput
  VehicleBodyworkUpdatedBy: VehicleBodyworkOrderByRelationAggregateInput
  VehicleBrandCreatedBy: VehicleBrandOrderByRelationAggregateInput
  VehicleBrandUpdatedBy: VehicleBrandOrderByRelationAggregateInput
  VehicleModelCreatedBy: VehicleModelOrderByRelationAggregateInput
  VehicleModelUpdatedBy: VehicleModelOrderByRelationAggregateInput
  VehicleTypeCreatedBy: VehicleTypeOrderByRelationAggregateInput
  VehicleTypeUpdatedBy: VehicleTypeOrderByRelationAggregateInput
  avatar_url: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updated_at: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  role: String
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  CarrierCompanyCreatedBt: CarrierCompanyListRelationFilter
  CarrierCompanyUpdatedBy: CarrierCompanyListRelationFilter
  CiotForLegalCreatedByClient: CiotForLegalClientListRelationFilter
  CiotForLegalUpdatedByClient: CiotForLegalClientListRelationFilter
  CompanyVehicleCreatedBy: CompanyVehicleListRelationFilter
  CompanyVehicleUpdatedBy: CompanyVehicleListRelationFilter
  ContractOutsourcedDriverCreatedBy: ContractOutsourcedDriverListRelationFilter
  ContractOutsourcedDriverUpdatedBy: ContractOutsourcedDriverListRelationFilter
  IcmsCreatedBy: ICMSListRelationFilter
  IcmsUpdatedBy: ICMSListRelationFilter
  InvoiceForLegalClientCreatedBy: InvoiceForLegalClientListRelationFilter
  InvoiceForLegalClientUpdatedBy: InvoiceForLegalClientListRelationFilter
  InvoiceForPhysicalClientCreatedBy: InvoiceForPhysicalCustomerListRelationFilter
  InvoiceForPhysicalClientUpdatedBy: InvoiceForPhysicalCustomerListRelationFilter
  LegalClientCreatedBy: LegalClientListRelationFilter
  LegalClientCustomerOrderCreatedBy: LegalClientOrderListRelationFilter
  LegalClientCustomerOrderUpdatedBy: LegalClientOrderListRelationFilter
  LegalClientUpdatedBy: LegalClientListRelationFilter
  LegalContractCreatedBy: LegalContractListRelationFilter
  LegalContractUpdatedBy: LegalContractListRelationFilter
  MaintenanceCompanyCreatedBy: MaintenanceCompanyListRelationFilter
  MaintenanceCompanyUpdatedBy: MaintenanceCompanyListRelationFilter
  MaintenanceCreatedBy: MaintenanceListRelationFilter
  MaintenanceUpdatedBy: MaintenanceListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  OrderProcessingLegalClientCreatedBy: OrderProcessingLegalClientListRelationFilter
  OrderProcessingLegalClientUpdatedBy: OrderProcessingLegalClientListRelationFilter
  OrderProcessingPhysicalCustomerCreatedBy: OrderProcessingPhysicalCustomerListRelationFilter
  OrderProcessingPhysicalCustomerUpdatedBy: OrderProcessingPhysicalCustomerListRelationFilter
  OutsourcedDriverCreatedBy: OutsourcedDriverListRelationFilter
  OutsourcedDriverUpdatedBy: OutsourcedDriverListRelationFilter
  OutsourcedTransportCompanyContractCreatedBy: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyContractUpdatedBy: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyCreatedBy: OutsourcedTransportCompanyListRelationFilter
  OutsourcedTransportCompanyDriverCreatedBy: OutsourcedTransportCompanyDriverListRelationFilter
  OutsourcedTransportCompanyDriverUpdatedBy: OutsourcedTransportCompanyDriverListRelationFilter
  OutsourcedTransportCompanyUpdatedBy: OutsourcedTransportCompanyListRelationFilter
  OutsourcedTransportVehicleCreatedBy: OutsourcedTransportVehicleListRelationFilter
  OutsourcedTransportVehicleUpdatedBy: OutsourcedTransportVehicleListRelationFilter
  OutsourcedVehicleCreatedBy: OutsourcedVehicleListRelationFilter
  OutsourcedVehicleUpdatedBy: OutsourcedVehicleListRelationFilter
  OwnDriverCreatedBy: OwnDriverListRelationFilter
  OwnDriverUpdatedBy: OwnDriverListRelationFilter
  PhysicalCustomerCreatedBy: PhysicalCustomerListRelationFilter
  PhysicalCustomerOrderCreatedBy: PhysicalCustomerOrderListRelationFilter
  PhysicalCustomerOrderUpdatedBy: PhysicalCustomerOrderListRelationFilter
  PhysicalCustomerUpdatedBy: PhysicalCustomerListRelationFilter
  RecipientCreatedBy: RecipientListRelationFilter
  RecipientUpdatedBy: RecipientListRelationFilter
  TypeOfMaintenanceCreatedBy: TypeOfMaintenanceListRelationFilter
  TypeOfMaintenanceUpdatedBy: TypeOfMaintenanceListRelationFilter
  VehicleBodyworkCreatedBy: VehicleBodyworkListRelationFilter
  VehicleBodyworkUpdatedBy: VehicleBodyworkListRelationFilter
  VehicleBrandCreatedBy: VehicleBrandListRelationFilter
  VehicleBrandUpdatedBy: VehicleBrandListRelationFilter
  VehicleModelCreatedBy: VehicleModelListRelationFilter
  VehicleModelUpdatedBy: VehicleModelListRelationFilter
  VehicleTypeCreatedBy: VehicleTypeListRelationFilter
  VehicleTypeUpdatedBy: VehicleTypeListRelationFilter
  avatar_url: StringNullableFilter
  created_at: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  role: StringFilter
  updated_at: DateTimeFilter
  username: StringFilter
}

input VehicleBodyworkInput {
  axles: Int!
  mass: Float!
  name: String!
  volume: Float!
}

input VehicleBodyworkListRelationFilter {
  every: VehicleBodyworkWhereInput
  none: VehicleBodyworkWhereInput
  some: VehicleBodyworkWhereInput
}

type VehicleBodyworkModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleTypes: [VehicleTypeModel!]
  axles: Float!
  created_at: Timestamp!
  created_by: String!
  id: String!
  mass: Float!
  name: String!
  updated_at: Timestamp!
  updated_by: String!
  volume: Float!
}

input VehicleBodyworkOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleBodyworkOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleType: VehicleTypeOrderByRelationAggregateInput
  axles: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  mass: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  volume: SortOrder
}

input VehicleBodyworkUpdateInput {
  axles: Int
  mass: Float
  name: String
  volume: Float
}

input VehicleBodyworkWhereInput {
  AND: [VehicleBodyworkWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleBodyworkWhereInput!]
  OR: [VehicleBodyworkWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleType: VehicleTypeListRelationFilter
  axles: IntFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  mass: FloatFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  volume: FloatFilter
}

input VehicleBrandInput {
  name: String!
}

input VehicleBrandListRelationFilter {
  every: VehicleBrandWhereInput
  none: VehicleBrandWhereInput
  some: VehicleBrandWhereInput
}

type VehicleBrandModel {
  VehicleModels: VehicleModelGraphql
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input VehicleBrandOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleBrandOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleModel: VehicleModelOrderByRelationAggregateInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

type VehicleBrandReferences {
  id: String!
  name: String!
}

input VehicleBrandUpdateInput {
  name: String
}

input VehicleBrandWhereInput {
  AND: [VehicleBrandWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleModel: VehicleModelListRelationFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type VehicleCarModel {
  VehicleBrand: VehicleBrandReferences!
  VehicleModel: VehicleModelReferences!
  VehicleType: VehicleTypeModel!
  antt: String!
  color: String!
  createdUser: UserModelRefereces!
  id: String!
  isIpvaPaid: Boolean!
  model_id: String!
  plate: String!
  registration: Timestamp!
  renavam: String!
  updatedUser: UserModelRefereces!
  year: String!
}

input VehicleInput {
  antt: String!
  color: String!
  isIpvaPaid: Boolean!
  model_id: String!
  plate: String!
  registration: Timestamp!
  renavam: String!
  year: String!
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

type VehicleModelGraphql {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleBrand: VehicleBrandReferences!
  VehicleType: VehicleTypeModel!
  axles: Int!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  type_id: String!
  updated_at: Timestamp!
  updated_by: String!
  weight: Float!
}

input VehicleModelInput {
  axles: Float!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  name: String!
  type_id: String!
  weight: Float!
}

input VehicleModelListRelationFilter {
  every: VehicleModelWhereInput
  none: VehicleModelWhereInput
  some: VehicleModelWhereInput
}

input VehicleModelOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleModelOrderByWithRelationInput {
  Brand: VehicleBrandOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByRelationAggregateInput
  VehicleType: VehicleTypeOrderByWithRelationInput
  axles: SortOrder
  brand_id: SortOrder
  capacity_max: SortOrder
  capacity_per_axle: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  type_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  weight: SortOrder
}

type VehicleModelReferences {
  axles: Int!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  id: String!
  name: String!
  type_id: String!
  weight: Float!
}

input VehicleModelUpdateInput {
  axles: Float
  brand_id: String
  capacity_max: Float
  capacity_per_axle: Int
  name: String
  type_id: String
  weight: Float
}

input VehicleModelWhereInput {
  AND: [VehicleModelWhereInput!]
  Brand: VehicleBrandWhereInput
  CreatedBy: UserWhereInput
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  UpdatedBy: UserWhereInput
  Vehicle: VehicleListRelationFilter
  VehicleType: VehicleTypeWhereInput
  axles: IntFilter
  brand_id: StringFilter
  capacity_max: FloatFilter
  capacity_per_axle: IntNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  type_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  weight: FloatFilter
}

input VehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByWithRelationInput
  Maintenance: MaintenanceOrderByRelationAggregateInput
  Model: VehicleModelOrderByWithRelationInput
  OrderProcessing: OrderProcessingPhysicalCustomerOrderByRelationAggregateInput
  OrderProcessingLegalClient: OrderProcessingLegalClientOrderByRelationAggregateInput
  OutsourcedTransportVehicle: OutsourcedTransportVehicleOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByWithRelationInput
  antt: SortOrder
  color: SortOrder
  id: SortOrder
  is_ipva_paid: SortOrder
  model_id: SortOrder
  plate: SortOrder
  registration: SortOrder
  renavam: SortOrder
  year: SortOrder
}

input VehicleTypeInput {
  bodyWork: Boolean!
  body_work_id: [String!]
  name: String!
}

input VehicleTypeListRelationFilter {
  every: VehicleTypeWhereInput
  none: VehicleTypeWhereInput
  some: VehicleTypeWhereInput
}

type VehicleTypeModel {
  BodyWorks: [VehicleBodyworkModel!]
  CpdatedUser: UserModelRefereces!
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleModels: VehicleModelGraphql
  bodyWork: Boolean!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  updated_at: Timestamp!
  updated_by: String!
}

input VehicleTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleTypeOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleBodyWork: VehicleBodyworkOrderByRelationAggregateInput
  VehicleModel: VehicleModelOrderByRelationAggregateInput
  bodywork: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input VehicleTypeUpdateInput {
  bodyWork: Boolean
  body_work_id: [String!]
  del_body_id: [String!]
  name: String
}

input VehicleTypeWhereInput {
  AND: [VehicleTypeWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleTypeWhereInput!]
  OR: [VehicleTypeWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleBodyWork: VehicleBodyworkListRelationFilter
  VehicleModel: VehicleModelListRelationFilter
  bodywork: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input VehicleUpdateInput {
  antt: String
  color: String
  isIpvaPaid: Boolean
  model_id: String
  plate: String
  registration: Timestamp
  renavam: String
  year: String
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  CompanyVehicle: CompanyVehicleWhereInput
  Maintenance: MaintenanceListRelationFilter
  Model: VehicleModelWhereInput
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  OrderProcessing: OrderProcessingPhysicalCustomerListRelationFilter
  OrderProcessingLegalClient: OrderProcessingLegalClientListRelationFilter
  OutsourcedTransportVehicle: OutsourcedTransportVehicleWhereInput
  OutsourcedVehicle: OutsourcedVehicleWhereInput
  antt: StringFilter
  color: StringFilter
  id: StringFilter
  is_ipva_paid: BoolFilter
  model_id: StringFilter
  plate: StringFilter
  registration: DateTimeFilter
  renavam: StringFilter
  year: StringFilter
}