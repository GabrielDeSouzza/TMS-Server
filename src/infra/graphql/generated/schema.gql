# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdressInput {
  address_number: String!
  city: String!
  complement: String
  neighborhood: String!
  postalCod: String!
  street: String!
  uf: UFEnum!
}

type AdressModel {
  address_number: String!
  city: String!
  complement: String
  id: String!
  neighborhood: String!
  postalCod: String!
  street: String!
  uf: String!
}

input AdressesOrderByWithRelationInput {
  LegalClientQuoteTableOrigin: LegalClientQuoteTableOrderByRelationAggregateInput
  LegalClientQuoteTablesDestiny: LegalClientQuoteTableOrderByRelationAggregateInput
  PhysicalCustomerQuoteTableDestiny: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  PhysicalCustomerQuoteTableOrigin: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  address_number: SortOrder
  city: SortOrder
  complement: SortOrder
  id: SortOrder
  neighborhood: SortOrder
  postal_cod: SortOrder
  street: SortOrder
  uf: SortOrder
}

input AdressesWhereInput {
  AND: [AdressesWhereInput!]
  LegalClientQuoteTableOrigin: LegalClientQuoteTableListRelationFilter
  LegalClientQuoteTablesDestiny: LegalClientQuoteTableListRelationFilter
  NOT: [AdressesWhereInput!]
  OR: [AdressesWhereInput!]
  PhysicalCustomerQuoteTableDestiny: PhysicalCustomerQuoteTableListRelationFilter
  PhysicalCustomerQuoteTableOrigin: PhysicalCustomerQuoteTableListRelationFilter
  address_number: StringFilter
  city: StringFilter
  complement: StringNullableFilter
  id: StringFilter
  neighborhood: StringFilter
  postal_cod: StringFilter
  street: StringFilter
  uf: StringFilter
}

input AuthInput {
  email: String!
  password: String!
}

type AuthModel {
  email: String!
  id: String!
  name: String!
  token: String!
  username: String!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CarrierCompanyInput {
  LegalPerson: LegalPersonInput
  legalPersonId: String
  rntrc: String!
}

input CarrierCompanyListRelationFilter {
  every: CarrierCompanyWhereInput
  none: CarrierCompanyWhereInput
  some: CarrierCompanyWhereInput
}

type CarrierCompanyModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalPersonId: String!
  rntrc: String!
  updated_at: Timestamp!
  updated_by: String!
}

input CarrierCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input CarrierCompanyOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  LegalContract: LegalContractOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  rntrc: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input CarrierCompanyUpdateInput {
  LegalPerson: LegalPersonUpdateInput
  legalPersonId: String
  rntrc: String
}

input CarrierCompanyUpdateManyInput {
  LegalPerson: LegalPersonInput
  id: String!
  legalPersonId: String
  rntrc: String
}

input CarrierCompanyWhereInput {
  AND: [CarrierCompanyWhereInput!]
  CompanyVehicle: CompanyVehicleListRelationFilter
  CreatedBy: UserWhereInput
  LegalClientOrder: LegalClientOrderListRelationFilter
  LegalContract: LegalContractListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [CarrierCompanyWhereInput!]
  OR: [CarrierCompanyWhereInput!]
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractListRelationFilter
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  rntrc: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input CiotForLegalClientInput {
  ciot: String!
  emission_date: Timestamp!
  legal_contract_id: String!
}

input CiotForLegalClientListRelationFilter {
  every: CiotForLegalClientWhereInput
  none: CiotForLegalClientWhereInput
  some: CiotForLegalClientWhereInput
}

type CiotForLegalClientModel {
  CreatedUser: UserModelRefereces!
  LegalClientContract: LegalContractModel!
  UpdatedUser: UserModelRefereces!
  ciot: String!
  created_at: Timestamp!
  created_by: String!
  emission_date: Timestamp!
  id: String!
  legal_contract_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input CiotForLegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input CiotForLegalClientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  PhysycalContract: LegalContractOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  ciot: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  emission_date: SortOrder
  id: SortOrder
  legal_contract_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input CiotForLegalClientUpdateInput {
  ciot: String
  emission_date: Timestamp
  legal_contract_id: String
}

input CiotForLegalClientWhereInput {
  AND: [CiotForLegalClientWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [CiotForLegalClientWhereInput!]
  OR: [CiotForLegalClientWhereInput!]
  PhysycalContract: LegalContractWhereInput
  UpdatedBy: UserWhereInput
  ciot: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  emission_date: DateTimeFilter
  id: StringFilter
  legal_contract_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type CompanyVehicleIModel {
  CarrierCompany: CarrierCompanyModel!
  Vehicle: VehicleCarModel!
  carrier_company_id: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input CompanyVehicleInput {
  Vehicle: VehicleInput
  carrier_company_id: String!
  vehicle_id: String
}

input CompanyVehicleListRelationFilter {
  every: CompanyVehicleWhereInput
  none: CompanyVehicleWhereInput
  some: CompanyVehicleWhereInput
}

input CompanyVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyVehicleOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  company_id: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input CompanyVehicleUpdateInput {
  Vehicle: VehicleUpdateInput!
  carrier_company_id: String
  vehicle_id: String
}

input CompanyVehicleUpdateManyInput {
  Vehicle: VehicleInput
  carrier_company_id: String
  id: String!
  vehicle_id: String
}

input CompanyVehicleWhereInput {
  AND: [CompanyVehicleWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  NOT: [CompanyVehicleWhereInput!]
  OR: [CompanyVehicleWhereInput!]
  OutsourcedDriver: OutsourcedDriverListRelationFilter
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  company_id: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input ContractOutsoucedDriverUpdateInput {
  cpf: String
  end_at: Timestamp
  outsourced_driver_id: String
  situation: String
  start_at: Timestamp
  type: String
}

input ContractOutsoucedDriverUpdateManyInput {
  cpf: String
  end_at: Timestamp
  id: String!
  outsourced_driver_id: String
  situation: String
  start_at: Timestamp
  type: String
}

input ContractOutsourcedDriverInput {
  cpf: String!
  end_at: Timestamp!
  outsourced_driver_id: String!
  situation: String!
  start_at: Timestamp!
  type: String!
}

input ContractOutsourcedDriverListRelationFilter {
  every: ContractOutsourcedDriverWhereInput
  none: ContractOutsourcedDriverWhereInput
  some: ContractOutsourcedDriverWhereInput
}

type ContractOutsourcedDriverModel {
  CreatedUser: UserModelRefereces!
  OutsourcedDriver: OutsourcedDriverModel!
  UpdatedUser: UserModelRefereces!
  contract_number: String!
  cpf: String!
  created_at: Timestamp!
  created_by: String!
  end_at: Timestamp!
  id: String!
  outsourced_driver_id: String!
  situation: String!
  start_at: Timestamp!
  type: String!
  updated_at: Timestamp!
  updated_by: String!
}

input ContractOutsourcedDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContractOutsourcedDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  contract_number: SortOrder
  cpf: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  end_at: SortOrder
  id: SortOrder
  outsourced_driver_id: SortOrder
  situation: SortOrder
  start_at: SortOrder
  type: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input ContractOutsourcedDriverReferecesInput {
  cpf: String!
  end_at: Timestamp!
  situation: String!
  start_at: Timestamp!
  type: String!
}

input ContractOutsourcedDriverWhereInput {
  AND: [ContractOutsourcedDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [ContractOutsourcedDriverWhereInput!]
  OR: [ContractOutsourcedDriverWhereInput!]
  OutsourcedDriver: OutsourcedDriverWhereInput
  UpdatedBy: UserWhereInput
  contract_number: StringFilter
  cpf: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  end_at: DateTimeNullableFilter
  id: StringFilter
  outsourced_driver_id: StringFilter
  situation: StringFilter
  start_at: DateTimeFilter
  type: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type CtePDfModel {
  cteUrl: String!
}

input CtePdfLegalClientInput {
  cteLegalPersonId: String!
}

input CtePdfPhysicalCustomerInput {
  ctePhysicalCustomerId: String!
}

input DateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input DateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input DeletFreightExpenseInput {
  id: String!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

enum FormPayment {
  ADVANCE_PAYMENT
  CASH_IN_PAYMENT
  CASH_PAYMENT
  PAYMENT_BY_BANK_SLIP
  PAYMENT_BY_BANK_TRANSFER
  PAYMENT_BY_CHECK
  PAYMENT_BY_CONSIGNMENT
  PAYMENT_BY_CREDIT_DEBIT_CARD
  PAYMENT_BY_FREIGHT_CARD
  PAYMENT_BY_INVOICE
  PAYMENT_BY_PIX
}

input FreightExpenseInput {
  expenseName: String!
  legalClientOrderId: String
  physicalCustomerOrderId: String
  value: Float!
}

type FreightExpenseModel {
  LegalClientOrder: LegalClientOrderModel!
  PhysicalCustomerOrder: PhysicalCustomerOrderModel!
  expenseName: String!
  id: String!
  legalClientOrderId: String
  physicalCustomerOrderId: String
  value: Float!
}

input FreightExpenseOrderInput {
  expenseName: String!
  value: Float!
}

type FreightExpenseOrderModel {
  expenseName: String!
  id: String
  value: Float!
}

input FreightExpenseUpdateInput {
  expenseName: String
  legalClientOrderId: String
  physicalCustomerOrderId: String
  value: Float
}

input FreightExpenseUpdateManyInput {
  expenseName: String
  id: String!
  legalClientOrderId: String
  physicalCustomerOrderId: String
  value: Float
}

input FreightExpenseUpdateOrderInput {
  expenseName: String!
  id: String
  value: Float!
}

input FreightExpensesListRelationFilter {
  every: FreightExpensesWhereInput
  none: FreightExpensesWhereInput
  some: FreightExpensesWhereInput
}

input FreightExpensesOrderByRelationAggregateInput {
  _count: SortOrder
}

input FreightExpensesOrderByWithRelationInput {
  LegalClientOrder: LegalClientOrderOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByWithRelationInput
  expense_name: SortOrder
  id: SortOrder
  legal_client_order_id: SortOrder
  physical_customer_id: SortOrder
  value: SortOrder
}

input FreightExpensesWhereInput {
  AND: [FreightExpensesWhereInput!]
  LegalClientOrder: LegalClientOrderWhereInput
  NOT: [FreightExpensesWhereInput!]
  OR: [FreightExpensesWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderWhereInput
  expense_name: StringFilter
  id: StringFilter
  legal_client_order_id: StringNullableFilter
  physical_customer_id: StringNullableFilter
  value: FloatFilter
}

input GetLegalPersonInput {
  cnpj: String
  corporateName: String
  fantasyName: String
  legalPersonId: String
}

input GetNaturalPersonInput {
  cpf: String
  naturalPersonId: String
  rg: String
}

input GetVehicleTypeArgs {
  plate: String
  vehicleId: String
}

input IcmsInput {
  aliquot: Float!
  effective_date: Timestamp!
  recipient_state: String!
  state_origin: String!
}

input IcmsListRelationFilter {
  every: IcmsWhereInput
  none: IcmsWhereInput
  some: IcmsWhereInput
}

type IcmsModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  aliquot: Float!
  created_by: String!
  effective_date: Timestamp!
  id: String!
  recipient_state: String!
  state_origin: String!
  updated_by: String!
}

input IcmsOrderByRelationAggregateInput {
  _count: SortOrder
}

input IcmsOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientQuoteTable: LegalClientQuoteTableOrderByRelationAggregateInput
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  aliquot: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  effective_date: SortOrder
  id: SortOrder
  recipient_state: SortOrder
  state_orgin: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input IcmsUpdateInput {
  aliquot: Float
  effective_date: Timestamp
  recipient_state: String
  state_origin: String
}

input IcmsUpdateManyInput {
  aliquot: Float
  effective_date: Timestamp
  id: String!
  recipient_state: String
  state_origin: String
}

input IcmsWhereInput {
  AND: [IcmsWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientQuoteTable: LegalClientQuoteTableListRelationFilter
  NOT: [IcmsWhereInput!]
  OR: [IcmsWhereInput!]
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableListRelationFilter
  UpdatedBy: UserWhereInput
  aliquot: FloatFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  effective_date: DateTimeFilter
  id: StringFilter
  recipient_state: StringFilter
  state_orgin: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input IncidentInput {
  date_incident: Timestamp!
  date_resolved: Timestamp
  description: String!
  order_process_id: String!
}

input IncidentListRelationFilter {
  every: IncidentWhereInput
  none: IncidentWhereInput
  some: IncidentWhereInput
}

type IncidentModel {
  OrderProcessing: OrderProcessingModel!
  created_at: Timestamp!
  created_by: String!
  date_incident: Timestamp!
  date_resolved: Timestamp
  description: String!
  id: String!
  order_process_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input IncidentOrderByRelationAggregateInput {
  _count: SortOrder
}

input IncidentOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OrderProcess: OrderProcessingOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  date_incident: SortOrder
  date_resolved: SortOrder
  description: SortOrder
  id: SortOrder
  order_process_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input IncidentUpdateInput {
  date_incident: Timestamp
  date_resolved: Timestamp
  description: String
  order_process_id: String
}

input IncidentUpdateManyInput {
  date_incident: Timestamp
  date_resolved: Timestamp
  description: String
  id: String!
  order_process_id: String
}

input IncidentWhereInput {
  AND: [IncidentWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [IncidentWhereInput!]
  OR: [IncidentWhereInput!]
  OrderProcess: OrderProcessingWhereInput
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  date_incident: DateTimeFilter
  date_resolved: DateTimeNullableFilter
  description: StringFilter
  id: StringFilter
  order_process_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

enum KindOfServicerOrder {
  HAZARDOUS_CARGO
  LOAD_CAPACITY
  LTL
  REFRIGERATED_CARGO
}

input LegalClientCteInput {
  cteType: TypesCteEnum!
  observations: String
  orderId: String!
}

type LegalClientCteModel {
  acessKey: String!
  cteNumber: String!
  cteType: String!
  id: String!
  observations: String
  orderId: String!
}

input LegalClientCteOrderByWithRelationInput {
  LegalClientOrder: LegalClientOrderOrderByWithRelationInput
  access_key: SortOrder
  autorization: SortOrder
  cte_number: SortOrder
  id: SortOrder
  observations: SortOrder
  order_id: SortOrder
  type_cte: SortOrder
}

input LegalClientCteUpdateInput {
  cteType: TypesCteEnum
  observations: String
  orderId: String
}

input LegalClientCteWhereInput {
  AND: [LegalClientCteWhereInput!]
  LegalClientOrder: LegalClientOrderWhereInput
  NOT: [LegalClientCteWhereInput!]
  OR: [LegalClientCteWhereInput!]
  access_key: StringFilter
  autorization: DateTimeFilter
  cte_number: StringFilter
  id: StringFilter
  observations: StringFilter
  order_id: StringFilter
  type_cte: StringFilter
}

input LegalClientInput {
  LegalPerson: LegalPersonInput
  branch: String!
  legal_person_id: String
}

input LegalClientListRelationFilter {
  every: LegalClientWhereInput
  none: LegalClientWhereInput
  some: LegalClientWhereInput
}

type LegalClientModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel!
  Orders: [LegalClientOrderModel!]!
  UpdatedUser: UserModelRefereces!
  branch: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legal_person_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input LegalClientOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalContract: LegalContractOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  branch: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  updated_by: SortOrder
}

input LegalClientOrderInput {
  carrier_id: String!
  expenses: [FreightExpenseOrderInput!]!
  legal_contract_id: String!
  quote_table_id: String!
  total_receivable: Float
  total_shipping_cost: Float
  total_tax_payable: Float
}

input LegalClientOrderListRelationFilter {
  every: LegalClientOrderWhereInput
  none: LegalClientOrderWhereInput
  some: LegalClientOrderWhereInput
}

type LegalClientOrderModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  LegalContract: LegalContractModel!
  Quote: LegalClientQuoteTableModel!
  UpdatedUser: UserModelRefereces!
  calculate_cofins: Float!
  calculate_icms: Float!
  calculated_pis: Float!
  carrier_id: String!
  cofins_tax: Float!
  created_at: Timestamp!
  created_by: String!
  expenses: [FreightExpenseOrderModel!]
  icms_tax: Float!
  id: String!
  legal_contract_id: String!
  order: String!
  pis_tax: Float!
  quote_table_id: String!
  total_receivable: Float
  total_shipping_cost: Float
  total_tax_payable: Float
  updated_at: Timestamp!
  updated_by: String!
}

input LegalClientOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientOrderOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  FreightExpenses: FreightExpensesOrderByRelationAggregateInput
  LegalClientCte: LegalClientCteOrderByWithRelationInput
  LegalContract: LegalContractOrderByWithRelationInput
  OrderProcessing: OrderProcessingOrderByWithRelationInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByWithRelationInput
  QuoteTable: LegalClientQuoteTableOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_id: SortOrder
  completed_orders_id: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_contract_id: SortOrder
  order: SortOrder
  order_processing_id: SortOrder
  quote_table_id: SortOrder
  total_receivable: SortOrder
  total_shipping_cost: SortOrder
  total_tax_payable: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input LegalClientOrderUpdateInput {
  carrier_id: String
  expenses: [FreightExpenseUpdateOrderInput!]
  legal_contract_id: String
  quote_table_id: String
  total_receivable: Float
  total_shipping_cost: Float
  total_tax_payable: Float
}

input LegalClientOrderUpdateManyInput {
  carrier_id: String
  expenses: [FreightExpenseUpdateOrderInput!]
  id: String!
  legal_contract_id: String
  quote_table_id: String
  total_receivable: Float
  total_shipping_cost: Float
  total_tax_payable: Float
}

input LegalClientOrderWhereInput {
  AND: [LegalClientOrderWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  FreightExpenses: FreightExpensesListRelationFilter
  LegalClientCte: LegalClientCteWhereInput
  LegalContract: LegalContractWhereInput
  NOT: [LegalClientOrderWhereInput!]
  OR: [LegalClientOrderWhereInput!]
  OrderProcessing: OrderProcessingWhereInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractWhereInput
  QuoteTable: LegalClientQuoteTableWhereInput
  UpdatedBy: UserWhereInput
  carrier_id: StringFilter
  completed_orders_id: StringNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_contract_id: StringFilter
  order: StringFilter
  order_processing_id: StringNullableFilter
  quote_table_id: StringFilter
  total_receivable: FloatFilter
  total_shipping_cost: FloatFilter
  total_tax_payable: FloatFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input LegalClientQuoteTableInput {
  adressDestiny: AdressInput!
  adressOrigin: AdressInput!
  amount: Int!
  description: String!
  formPayment: FormPayment!
  kindService: KindOfServicerOrder!
  mass: Float!
  nf_number: String!
  nf_serie: String!
  nf_value: Float!
  recipientId: String!
  senderId: String!
  typeMerchandise: TypeMerchandise!
  volume: Float!
  who_pays: WhoIsPay!
}

input LegalClientQuoteTableListRelationFilter {
  every: LegalClientQuoteTableWhereInput
  none: LegalClientQuoteTableWhereInput
  some: LegalClientQuoteTableWhereInput
}

type LegalClientQuoteTableModel {
  Icms: IcmsModel!
  Recipient: RecipientModel!
  Sender: SenderModel!
  adressDestiny: AdressModel!
  adressOrigin: AdressModel!
  amount: Int!
  codQuote: String!
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  description: String!
  digital_signature: String!
  formPayment: String!
  icms_id: String
  id: String!
  kindService: String!
  mass: Float!
  nf_number: String!
  nf_serie: String!
  nf_value: Float!
  recipientId: String!
  senderId: String!
  typeMerchandise: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
  volume: Float!
  who_pays: String!
}

input LegalClientQuoteTableOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalClientQuoteTableOrderByWithRelationInput {
  AdressDestiny: AdressesOrderByWithRelationInput
  AdressOrigin: AdressesOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  Icms: IcmsOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  Recipient: RecipientOrderByWithRelationInput
  Sender: SenderOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  adress_destiny_id: SortOrder
  adress_origin_id: SortOrder
  amount: SortOrder
  cod_quote: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  description: SortOrder
  digital_signature: SortOrder
  form_payment: SortOrder
  icms_id: SortOrder
  id: SortOrder
  kind_service: SortOrder
  mass: SortOrder
  nf_number: SortOrder
  nf_serie: SortOrder
  nf_value: SortOrder
  recipient_id: SortOrder
  sender_id: SortOrder
  type_merchandise: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  volume: SortOrder
  who_pays: SortOrder
}

input LegalClientQuoteTableUpdate {
  adressDestiny: AdressInput
  adressOrigin: AdressInput
  amount: Int
  description: String
  formPayment: FormPayment
  kindService: KindOfServicerOrder
  mass: Float
  nf_number: String
  nf_serie: String
  nf_value: Float
  recipientId: String
  senderId: String
  typeMerchandise: TypeMerchandise
  volume: Float
  who_pays: WhoIsPay
}

input LegalClientQuoteTableUpdateManyInput {
  adressDestiny: AdressInput
  adressOrigin: AdressInput
  amount: Int
  description: String
  formPayment: FormPayment
  id: String!
  kindService: KindOfServicerOrder
  mass: Float
  nf_number: String
  nf_serie: String
  nf_value: Float
  recipientId: String
  senderId: String
  typeMerchandise: TypeMerchandise
  volume: Float
  who_pays: WhoIsPay
}

input LegalClientQuoteTableWhereInput {
  AND: [LegalClientQuoteTableWhereInput!]
  AdressDestiny: AdressesWhereInput
  AdressOrigin: AdressesWhereInput
  CreatedBy: UserWhereInput
  Icms: IcmsWhereInput
  LegalClientOrder: LegalClientOrderListRelationFilter
  NOT: [LegalClientQuoteTableWhereInput!]
  OR: [LegalClientQuoteTableWhereInput!]
  Recipient: RecipientWhereInput
  Sender: SenderWhereInput
  UpdatedBy: UserWhereInput
  adress_destiny_id: StringFilter
  adress_origin_id: StringFilter
  amount: IntFilter
  cod_quote: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  description: StringFilter
  digital_signature: StringFilter
  form_payment: StringFilter
  icms_id: StringFilter
  id: StringFilter
  kind_service: StringFilter
  mass: FloatFilter
  nf_number: StringFilter
  nf_serie: StringFilter
  nf_value: FloatFilter
  recipient_id: StringFilter
  sender_id: StringFilter
  type_merchandise: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  volume: FloatFilter
  who_pays: StringFilter
}

input LegalClientUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
  branch: String
  legal_person_id: String
}

input LegalClientUpdateManyInput {
  LegalPerson: LegalPersonInput
  branch: String
  id: String!
  legal_person_id: String
}

input LegalClientWhereInput {
  AND: [LegalClientWhereInput!]
  CreatedBy: UserWhereInput
  LegalContract: LegalContractListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [LegalClientWhereInput!]
  OR: [LegalClientWhereInput!]
  UpdatedBy: UserWhereInput
  branch: StringFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  updated_by: StringFilter
}

input LegalContractInput {
  carrier_company_id: String!
  delivery_conditions: String!
  effective_date: Timestamp!
  legal_client_id: String!
  observations: String
}

input LegalContractListRelationFilter {
  every: LegalContractWhereInput
  none: LegalContractWhereInput
  some: LegalContractWhereInput
}

type LegalContractModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  LegalClient: LegalClientModel!
  UpdatedUser: UserModelRefereces!
  carrier_company_id: String!
  contract_number: String!
  created_at: Timestamp!
  created_by: String!
  delivery_conditions: String!
  effective_date: Timestamp!
  id: String!
  legal_client_id: String!
  observations: String!
  updated_at: Timestamp!
  updated_by: String!
}

input LegalContractOrderByRelationAggregateInput {
  _count: SortOrder
}

input LegalContractOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  Ciot: CiotForLegalClientOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  LegalClient: LegalClientOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_company_id: SortOrder
  contract_number: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  delivery_conditions: SortOrder
  effective_date: SortOrder
  id: SortOrder
  legal_client_id: SortOrder
  observations: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input LegalContractUpdateInput {
  carrier_company_id: String
  delivery_conditions: String
  effective_date: Timestamp
  legal_client_id: String
  observations: String
}

input LegalContractUpdateManyInput {
  carrier_company_id: String
  delivery_conditions: String
  effective_date: Timestamp
  id: String!
  legal_client_id: String
  observations: String
}

input LegalContractWhereInput {
  AND: [LegalContractWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  Ciot: CiotForLegalClientListRelationFilter
  CreatedBy: UserWhereInput
  LegalClient: LegalClientWhereInput
  LegalClientOrder: LegalClientOrderListRelationFilter
  NOT: [LegalContractWhereInput!]
  OR: [LegalContractWhereInput!]
  UpdatedBy: UserWhereInput
  carrier_company_id: StringFilter
  contract_number: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  delivery_conditions: StringFilter
  effective_date: DateTimeFilter
  id: StringFilter
  legal_client_id: StringFilter
  observations: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input LegalPersonInput {
  address_number: String!
  cep: String!
  city: String!
  cnpj: String!
  complement: String
  corporate_name: String!
  email: String!
  fantasy_name: String!
  first_phone: String!
  neighborhood: String!
  public_place: String!
  second_phone: String
  state_registration: String!
  third_phone: String
  uf: UFEnum!
}

type LegalPersonModel {
  address_number: String!
  cep: String!
  city: String!
  cnpj: String!
  complement: String
  corporate_name: String!
  created_at: Timestamp!
  email: String!
  fantasy_name: String!
  first_phone: String!
  id: String!
  neighborhood: String!
  public_place: String!
  second_phone: String
  state_registration: String!
  third_phone: String
  uf: String!
  updated_at: Timestamp!
}

input LegalPersonOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByRelationAggregateInput
  CorporateClient: LegalClientOrderByRelationAggregateInput
  MaintenanceCompany: MaintenanceCompanyOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByRelationAggregateInput
  Recipient: RecipientOrderByWithRelationInput
  Sender: SenderOrderByWithRelationInput
  address_number: SortOrder
  cep: SortOrder
  city: SortOrder
  cnpj: SortOrder
  complement: SortOrder
  corporate_name: SortOrder
  created_at: SortOrder
  email: SortOrder
  fantasy_name: SortOrder
  first_phone: SortOrder
  id: SortOrder
  neighborhood: SortOrder
  public_place: SortOrder
  second_phone: SortOrder
  state_registration: SortOrder
  third_phone: SortOrder
  uf: SortOrder
  updated_at: SortOrder
}

input LegalPersonUpdateInput {
  address_number: String
  cep: String
  city: String
  cnpj: String
  complement: String
  corporate_name: String
  email: String
  fantasy_name: String
  first_phone: String
  neighborhood: String
  public_place: String
  second_phone: String
  state_registration: String
  third_phone: String
  uf: UFEnum
}

input LegalPersonWhereInput {
  AND: [LegalPersonWhereInput!]
  CarrierCompany: CarrierCompanyListRelationFilter
  CorporateClient: LegalClientListRelationFilter
  MaintenanceCompany: MaintenanceCompanyWhereInput
  NOT: [LegalPersonWhereInput!]
  OR: [LegalPersonWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyListRelationFilter
  Recipient: RecipientWhereInput
  Sender: SenderWhereInput
  address_number: StringFilter
  cep: StringFilter
  city: StringFilter
  cnpj: StringFilter
  complement: StringNullableFilter
  corporate_name: StringFilter
  created_at: DateTimeFilter
  email: StringFilter
  fantasy_name: StringFilter
  first_phone: StringFilter
  id: StringFilter
  neighborhood: StringFilter
  public_place: StringFilter
  second_phone: StringNullableFilter
  state_registration: StringFilter
  third_phone: StringNullableFilter
  uf: StringFilter
  updated_at: DateTimeFilter
}

input MaintenanceCompanyInput {
  LegalPerson: LegalPersonInput
  legal_person_id: String
  specialty_maintenance: String
}

input MaintenanceCompanyListRelationFilter {
  every: MaintenanceCompanyWhereInput
  none: MaintenanceCompanyWhereInput
  some: MaintenanceCompanyWhereInput
}

type MaintenanceCompanyModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legal_person_id: String!
  specialty_maintenance: String
  updated_at: Timestamp!
  updated_by: String!
}

input MaintenanceCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input MaintenanceCompanyOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  Maintenance: MaintenanceOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  specialty_maintenance: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input MaintenanceCompanyUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
  specialty_maintenance: String
}

input MaintenanceCompanyUpdateManyInput {
  LegalPerson: LegalPersonUpdateInput
  id: String!
  specialty_maintenance: String
}

input MaintenanceCompanyWhereInput {
  AND: [MaintenanceCompanyWhereInput!]
  CreatedBy: UserWhereInput
  LegalPerson: LegalPersonWhereInput
  Maintenance: MaintenanceListRelationFilter
  NOT: [MaintenanceCompanyWhereInput!]
  OR: [MaintenanceCompanyWhereInput!]
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  specialty_maintenance: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input MaintenanceInput {
  maintenance_company_id: String!
  type_of_maintenance_id: String!
  vehicle_id: String!
}

input MaintenanceListRelationFilter {
  every: MaintenanceWhereInput
  none: MaintenanceWhereInput
  some: MaintenanceWhereInput
}

type MaintenanceModel {
  CreatedUser: UserModelRefereces!
  MaintenanceCompany: MaintenanceCompanyModel!
  TypeOfMaintenance: TypeOfMaintenanceModel!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  finished_at: Timestamp
  id: String!
  maintenance_company_id: String!
  type_of_maintenance_id: String!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input MaintenanceOrderByRelationAggregateInput {
  _count: SortOrder
}

input MaintenanceOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  MaintenanceCompany: MaintenanceCompanyOrderByWithRelationInput
  TypeOfMaintenance: TypeOfMaintenanceOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  finished_at: SortOrder
  id: SortOrder
  maintenance_company_id: SortOrder
  type_of_maintenance_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input MaintenanceUpdateInput {
  finished_at: Timestamp!
  maintenance_company_id: String
  type_of_maintenance_id: String
}

input MaintenanceUpdateManyInput {
  id: String!
  maintenance_company_id: String
  type_of_maintenance_id: String
  vehicle_id: String
}

input MaintenanceWhereInput {
  AND: [MaintenanceWhereInput!]
  CreatedBy: UserWhereInput
  MaintenanceCompany: MaintenanceCompanyWhereInput
  NOT: [MaintenanceWhereInput!]
  OR: [MaintenanceWhereInput!]
  TypeOfMaintenance: TypeOfMaintenanceWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  finished_at: DateTimeNullableFilter
  id: StringFilter
  maintenance_company_id: StringFilter
  type_of_maintenance_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input ManifestInput {
  order_processing_id: String!
}

input ManifestListRelationFilter {
  every: ManifestWhereInput
  none: ManifestWhereInput
  some: ManifestWhereInput
}

type ManifestModel {
  acess_key: String!
  emission_date: Timestamp!
  manifest_url: String
  num_protocol: String!
  number: String!
  order_processing_id: String!
  serie: String!
}

input ManifestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ManifestOrderByWithRelationInput {
  OrderProcessing: OrderProcessingOrderByWithRelationInput
  acess_key: SortOrder
  emission_date: SortOrder
  id: SortOrder
  manifest_url: SortOrder
  num_protocol: SortOrder
  number: SortOrder
  order_processing_id: SortOrder
  serie: SortOrder
}

input ManifestWhereInput {
  AND: [ManifestWhereInput!]
  NOT: [ManifestWhereInput!]
  OR: [ManifestWhereInput!]
  OrderProcessing: OrderProcessingWhereInput
  acess_key: StringFilter
  emission_date: DateTimeFilter
  id: StringFilter
  manifest_url: StringNullableFilter
  num_protocol: StringFilter
  number: StringFilter
  order_processing_id: StringFilter
  serie: StringFilter
}

type Mutation {
  completedOrder(id: String, order_processing: String, vehicleData: GetVehicleTypeArgs): OrderProcessingModel!
  createCarrierCompany(data: CarrierCompanyInput!): CarrierCompanyModel!
  createCiotForLegalClient(ciotForLegalClientInput: CiotForLegalClientInput!): CiotForLegalClientModel!
  createCompanyVehicle(CompanyVehicleInput: CompanyVehicleInput!): CompanyVehicleIModel!
  createContractOutsourcedDriver(CompanyVehicleInput: ContractOutsourcedDriverInput!): ContractOutsourcedDriverModel!
  createFreightExpense(data: FreightExpenseInput!): FreightExpenseModel!
  createIcms(data: IcmsInput!): IcmsModel!
  createIncident(data: IncidentInput!): IncidentModel!
  createLegalClient(legalclientInput: LegalClientInput!): LegalClientModel!
  createLegalClientCte(data: LegalClientCteInput!): LegalClientCteModel!
  createLegalClientOrder(legalClientOrderInput: LegalClientOrderInput!): LegalClientOrderModel!
  createLegalClientQuoteTable(legalClientQuoteTableInput: LegalClientQuoteTableInput!): LegalClientQuoteTableModel!
  createLegalContract(legalContractInput: LegalContractInput!): LegalContractModel!
  createMaintenance(data: MaintenanceInput!): MaintenanceModel!
  createMaintenanceCompany(maintenancecompanyInput: MaintenanceCompanyInput!): MaintenanceCompanyModel!
  createManifest(data: ManifestInput!): ManifestModel!
  createOrderProcessing(data: OrderProcessingInput!): OrderProcessingModel!
  createOutsourcedDriver(outsourcedDriver: OutsourcedDriverInput!): OutsourcedDriverModel!
  createOutsourcedTransportCompany(outsourcedTransportCompanyInput: OutsourcedTransportCompanyInput!): OutsourcedTransportCompanyModel!
  createOutsourcedTransportCompanyContract(outsourcedTransportCompanyContractInput: OutsourcedTransportCompanyContractInput!): OutsourcedTransportCompanyContractModel!
  createOutsourcedTransportCompanyDriver(outsourcedTransportCompanyDriverInput: OutsourcedTransportCompanyDriverInput!): OutsourcedTransportCompanyDriverModel!
  createOutsourcedTransportVehicle(outsourcedTransportVehicleInput: OutsourcedTransportVehicleInput!): OutsourcedTransportVehicleModel!
  createOutsourcedVehicle(OutsourcedVehicleInput: OutsourcedVehicleInput!): OutsourcedVehicleIModel!
  createOwnDriver(ownDriverInput: OwnDriverInput!): OwnDriverModel!
  createPhysicalCustomer(data: PhysicalCustomerInput!): PhysicalCustomerModel!
  createPhysicalCustomerCte(data: PhysicalCustomerCteInput!): PhysicalCustomerCteModel!
  createPhysicalCustomerOrder(physicalCustomerOrderInput: PhysicalCustomerOrderInput!): PhysicalCustomerOrderModel!
  createPhysicalCustomerQuoteTable(physicalCustomerQuoteTableInput: PhysicalCustomerQuoteTableInput!): PhysicalCustomerQuoteTableModel!
  createRecipient(data: RecipientInput!): RecipientModel!
  createSender(data: SenderInput!): SenderModel!
  createTypeOfMaintenance(data: TypeOfMaintenanceInput!): TypeOfMaintenanceModel!
  createUser(avatar: Upload, createUserInput: UserInput!): UserModel!
  createVehicleBodywork(vehicleBodyworkInput: VehicleBodyworkInput!): VehicleBodyworkModel!
  createVehicleBrand(vehicleBrandInput: VehicleBrandInput!): VehicleBrandModel!
  createVehicleModel(vehicleModelInput: VehicleModelInput!): VehicleModelGraphql!
  createVehicleType(vehicleTypeCreate: VehicleTypeInput!): VehicleTypeModel!
  deleteCarrierCompany(id: String!): CarrierCompanyModel!
  deleteCompanyVehicle(id: String!): CompanyVehicleIModel!
  deleteContractOutsourcedDriver(id: String!): ContractOutsourcedDriverModel!
  deleteFreightExpense(delData: DeletFreightExpenseInput!): FreightExpenseModel!
  deleteIcms(id: String!): IcmsModel!
  deleteIncident(id: String!): IncidentModel!
  deleteLegalClient(id: String!): LegalClientModel!
  deleteLegalClientOrder(id: String!): LegalClientOrderModel!
  deleteLegalClientQuoteTable(id: String!): LegalClientQuoteTableModel!
  deleteLegalContract(id: String!): LegalContractModel!
  deleteMaintenance(id: String!): MaintenanceModel!
  deleteMaintenanceCompany(id: String!): MaintenanceCompanyModel!
  deleteManyCarrierCompanies(deleteManyCarrierCompanies: [String!]!): [CarrierCompanyModel!]!
  deleteManyCompanyVehicles(deleteManyCompanyVehicles: [String!]!): [CompanyVehicleIModel!]!
  deleteManyContractOutsourcedDriver(ids: [String!]!): [ContractOutsourcedDriverModel!]!
  deleteManyFreightExpenses(ids: [String!]!): [FreightExpenseModel!]!
  deleteManyIcms(ids: [String!]!): [IcmsModel!]!
  deleteManyIncident(ids: [String!]!): [IncidentModel!]!
  deleteManyLegalClientOrder(ids: [String!]!): [LegalClientOrderModel!]!
  deleteManyLegalClientQuoteTable(ids: [String!]!): [LegalClientQuoteTableModel!]!
  deleteManyLegalClients(deleteManyLegalClients: [String!]!): [LegalClientModel!]!
  deleteManyLegalContract(ids: [String!]!): [LegalContractModel!]!
  deleteManyMaintenance(ids: [String!]!): [MaintenanceModel!]!
  deleteManyMaintenanceCompany(ids: [String!]!): [MaintenanceCompanyModel!]!
  deleteManyOrderProcessing(ids: [String!]!): [OrderProcessingModel!]!
  deleteManyOutsourcedDriver(ids: [String!]!): [OutsourcedDriverModel!]!
  deleteManyOwnDrivers(deleteManOwnDrivers: [String!]!): [OwnDriverModel!]!
  deleteManyPhysicalCustomerOrder(ids: [String!]!): [PhysicalCustomerOrderModel!]!
  deleteManyPhysicalCustomerQuoteTable(ids: [String!]!): [PhysicalCustomerQuoteTableModel!]!
  deleteManyPhysicalCustomers(deleteManyPhysicalCustomers: [String!]!): [PhysicalCustomerModel!]!
  deleteManyRecipients(deleteManyRecipients: [String!]!): [RecipientModel!]!
  deleteManySenders(deleteManySenders: [String!]!): [SenderModel!]!
  deleteManyUsers(deleteManyUsers: [String!]!): [UserModel!]!
  deleteManyVehicleBodyworks(deleteManyVehicleBodyworks: [String!]!): [VehicleBodyworkModel!]!
  deleteManyVehicleBrands(deleteManyVehicleBrands: [String!]!): [VehicleBrandModel!]!
  deleteManyVehicleModels(deleteManyVehicleModels: [String!]!): [VehicleModelGraphql!]!
  deleteManyVehicleTypes(deleteManyVehicleTypes: [String!]!): [VehicleTypeModel!]!
  deleteOrderProcessing(id: String!): OrderProcessingModel!
  deleteOutsourcedDriver(id: String!): OutsourcedDriverModel!
  deleteOwnDriver(id: String!): OwnDriverModel!
  deletePhysicalCustomer(id: String!): PhysicalCustomerModel!
  deletePhysicalCustomerOrder(id: String!): PhysicalCustomerOrderModel!
  deletePhysicalCustomerQuoteTable(id: String!): PhysicalCustomerQuoteTableModel!
  deleteRecipient(id: String!): RecipientModel!
  deleteSender(id: String!): SenderModel!
  deleteUser(id: String!): UserModel!
  deleteVehicleBodywork(id: String!): VehicleBodyworkModel!
  deleteVehicleBrand(id: String!): VehicleBrandModel!
  deleteVehicleModel(id: String!): VehicleModelGraphql!
  deleteVehicleType(id: String!): VehicleTypeModel!
  login(loginData: AuthInput!): AuthModel!
  updateCarriercompany(data: CarrierCompanyUpdateInput!, id: String!): CarrierCompanyModel!
  updateFreightExpense(id: String!, upData: FreightExpenseUpdateInput!): FreightExpenseModel!
  updateIcms(id: String!, invoiceForLegalClientInput: IcmsUpdateInput!): IcmsModel!
  updateIncident(id: String!, upData: IncidentUpdateInput!): IncidentModel!
  updateLegalClient(id: String!, legalclientInput: LegalClientUpdateInput!): LegalClientModel!
  updateLegalClientCte(id: String!, ownDriverUpdate: LegalClientCteUpdateInput!): LegalClientCteModel!
  updateLegalClientQuoteTable(id: String!, legalClientQuoteTableUpdate: LegalClientQuoteTableUpdate!): LegalClientQuoteTableModel!
  updateMaintenance(data: MaintenanceUpdateInput!, id: String!): MaintenanceModel!
  updateMaintenanceCompany(id: String!, maintenancecompanyInput: MaintenanceCompanyUpdateInput!): MaintenanceCompanyModel!
  updateManyCarrierCompanies(updateManyCarrierCompanies: [CarrierCompanyUpdateManyInput!]!): [CarrierCompanyModel!]!
  updateManyCompanyVehicles(updateManyCompanyVehicles: [CompanyVehicleUpdateManyInput!]!): [CompanyVehicleIModel!]!
  updateManyFreightExpenses(Data: [FreightExpenseUpdateManyInput!]!): [FreightExpenseModel!]!
  updateManyIcms(data: [IcmsUpdateManyInput!]!): [IcmsModel!]!
  updateManyIncident(data: [IncidentUpdateManyInput!]!): [IncidentModel!]!
  updateManyLegalClientOrder(data: [LegalClientOrderUpdateManyInput!]!): [LegalClientOrderModel!]!
  updateManyLegalClientQuoteTable(data: [LegalClientQuoteTableUpdateManyInput!]!): [LegalClientQuoteTableModel!]!
  updateManyLegalClients(updateManyLegalClients: [LegalClientUpdateManyInput!]!): [LegalClientModel!]!
  updateManyLegalContract(data: [LegalContractUpdateManyInput!]!): [LegalContractModel!]!
  updateManyMaintenance(data: [MaintenanceUpdateManyInput!]!): [MaintenanceModel!]!
  updateManyMaintenanceCompany(data: [MaintenanceCompanyUpdateManyInput!]!): [MaintenanceCompanyModel!]!
  updateManyOrderProcessing(data: [OrderProcessingUpdateManyInput!]!): [OrderProcessingModel!]!
  updateManyOutsourcedDriver(data: [OutsourcedDriverUpdateManyInput!]!): [OutsourcedDriverModel!]!
  updateManyOwnDrivers(updateManyOwnDrivers: [OwnDriverUpdateManyInput!]!): [OwnDriverModel!]!
  updateManyPhysicalCustomerOrder(data: [PhysicalCustomerOrderUpdateManyInput!]!): [PhysicalCustomerOrderModel!]!
  updateManyPhysicalCustomerQuoteTable(data: [PhysicalCustomerQuoteTableUpdateManyInput!]!): [PhysicalCustomerQuoteTableModel!]!
  updateManyPhysicalCustomers(updateManyPhysicalCustomers: [PhysicalCustomerUpdateManyInput!]!): [PhysicalCustomerModel!]!
  updateManyRecipients(updateManyRecipients: [RecipientUpdateManyInput!]!): [RecipientModel!]!
  updateManySenders(updateManySenders: [SenderUpdateManyInput!]!): [SenderModel!]!
  updateManyUsers(updateManyUsers: [UserUpdateManyInput!]!): [UserModel!]!
  updateManyVehicleBodyworks(updateManyVehicleBodyworks: [VehicleBodyworkUpdateManyInput!]!): [VehicleBodyworkModel!]!
  updateManyVehicleBrands(updateManyVehicleBrands: [VehicleBrandUpdateManyInput!]!): [VehicleBrandModel!]!
  updateManyVehicleModels(updateManyVehicleModels: [VehicleModelUpdateManyInput!]!): [VehicleModelGraphql!]!
  updateManyVehicleTypes(updateManyVehicleTypes: [VehicleTypeUpdateManyInput!]!): [VehicleTypeModel!]!
  updateOrderProcessing(data: OrderProcessingUpdateInput!, id: String!): OrderProcessingModel!
  updateOutsourcedDriver(id: String!, outsourcedDriver: OutsourcedDriverUpdateInput!): OutsourcedDriverModel!
  updateOwnDriver(id: String!, ownDriverUpdate: OwnDriverUpdate!): OwnDriverModel!
  updatePhysicalCustomer(id: String!, ownDriverUpdate: PhysicalCustomerUpdateInput!): PhysicalCustomerModel!
  updatePhysicalCustomerCte(id: String!, ownDriverUpdate: PhysicalCustomerCteUpdateInput!): PhysicalCustomerCteModel!
  updatePhysicalCustomerOrder(id: String!, physicalCustomerOrderInput: PhysicalCustomerOrderUpdateInput!): PhysicalCustomerOrderModel!
  updatePhysicalCustomerQuoteTable(id: String!, physicalCustomerQuoteTableUpdate: PhysicalCustomerQuoteTableUpdate!): PhysicalCustomerQuoteTableModel!
  updateRecipient(data: RecipientUpdateInput!, id: String!): RecipientModel!
  updateSender(data: SenderUpdateInput!, id: String!): SenderModel!
  updateTypeOfMaintenance(data: TypeOfMaintenanceUpdateInput!, id: String!): TypeOfMaintenanceModel!
  updateUser(avatar: Upload, id: String!, userUpdate: UserUpdateInput!): UserModel!
  updateVehicleBodywork(id: String!, vehicleBodyworkIUpdate: VehicleBodyworkUpdateInput!): VehicleBodyworkModel!
  updateciotForLegalClient(ciotForLegalClientInput: CiotForLegalClientUpdateInput!, id: String!): CiotForLegalClientModel!
  updatedCompanyVehicle(id: String!, outsourced: CompanyVehicleUpdateInput!): CompanyVehicleIModel!
  updatedContractOutsourcedDriver(id: String!, outsourced: ContractOutsoucedDriverUpdateInput!): ContractOutsourcedDriverModel!
  updatedManyContractOutsourcedDriver(data: [ContractOutsoucedDriverUpdateManyInput!]!): [ContractOutsourcedDriverModel!]!
  updatedOutsourcedVehicle(id: String!, outsourced: OutsourcedVehicleUpdateInput!): OutsourcedVehicleIModel!
  updatedVehicleBrand(id: String!, vehicleBrandUpdate: VehicleBrandUpdateInput!): VehicleBrandModel!
  updatedVehicleModel(id: String!, vehicleModelUpdate: VehicleModelUpdateInput!): VehicleModelGraphql!
  updatedVehicleType(id: String!, vehicleTypeInput: VehicleTypeUpdateInput!): VehicleTypeModel!
  updatelegalClientOrder(id: String!, legalClientOrderInput: LegalClientOrderUpdateInput!): LegalClientOrderModel!
  updatelegalContract(id: String!, legalContractInput: LegalContractUpdateInput!): LegalContractModel!
  updateoutsourcedTransportCompany(data: OutsourcedTransportCompanyUpdateInput!, id: String!): OutsourcedTransportCompanyModel!
  updateoutsourcedTransportCompanyContract(id: String!, outsourcedTransportCompanyContractInput: OutsourcedTransportCompanyContractUpdateInput!): OutsourcedTransportCompanyContractModel!
  updateoutsourcedTransportCompanyDriver(data: OutsourcedTransportCompanyDriverUpdateInput!, id: String!): OutsourcedTransportCompanyDriverModel!
  updateoutsourcedTransportVehicle(id: String!, outsourcedTransportVehicleInput: OutsourcedTransportVehicleUpdateInput!): OutsourcedTransportVehicleModel!
}

input NaturalPersonInput {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  cpf: String!
  date_birth: Timestamp!
  email: String!
  first_phone: String!
  gender: String!
  name: String!
  nationality: String!
  neighborhood: String!
  public_place: String!
  rg: String!
  second_phone: String
  third_phone: String
  uf: UFEnum!
}

type NaturalPersonModel {
  address_number: String!
  cep: String!
  city: String!
  complement: String
  cpf: String!
  date_birth: Timestamp!
  email: String!
  first_phone: String!
  gender: String!
  id: String!
  name: String!
  nationality: String!
  neighborhood: String!
  public_place: String!
  rg: String!
  second_phone: String
  third_phone: String
  uf: String!
}

input NaturalPersonOrderByWithRelationInput {
  OutsourcedDriver: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverOrderByWithRelationInput
  OwnDriver: OwnDriverOrderByRelationAggregateInput
  PhysicalCustomer: PhysicalCustomerOrderByRelationAggregateInput
  Recipient: RecipientOrderByWithRelationInput
  Sender: SenderOrderByWithRelationInput
  address_number: SortOrder
  cep: SortOrder
  city: SortOrder
  complement: SortOrder
  cpf: SortOrder
  date_birth: SortOrder
  email: SortOrder
  first_phone: SortOrder
  gender: SortOrder
  id: SortOrder
  name: SortOrder
  nationality: SortOrder
  neighborhood: SortOrder
  public_place: SortOrder
  rg: SortOrder
  second_phone: SortOrder
  third_phone: SortOrder
  uf: SortOrder
}

input NaturalPersonUpdate {
  address_number: String
  cep: String
  city: String
  complement: String
  cpf: String
  date_birth: Timestamp
  email: String
  first_phone: String
  gender: String
  name: String
  nationality: String
  neighborhood: String
  public_place: String
  rg: String
  second_phone: String
  third_phone: String
  uf: UFEnum
}

input NaturalPersonWhereInput {
  AND: [NaturalPersonWhereInput!]
  NOT: [NaturalPersonWhereInput!]
  OR: [NaturalPersonWhereInput!]
  OutsourcedDriver: OutsourcedDriverListRelationFilter
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverWhereInput
  OwnDriver: OwnDriverListRelationFilter
  PhysicalCustomer: PhysicalCustomerListRelationFilter
  Recipient: RecipientWhereInput
  Sender: SenderWhereInput
  address_number: StringFilter
  cep: StringFilter
  city: StringFilter
  complement: StringNullableFilter
  cpf: StringFilter
  date_birth: DateTimeFilter
  email: StringFilter
  first_phone: StringFilter
  gender: StringFilter
  id: StringFilter
  name: StringFilter
  nationality: StringFilter
  neighborhood: StringFilter
  public_place: StringFilter
  rg: StringFilter
  second_phone: StringNullableFilter
  third_phone: StringNullableFilter
  uf: StringFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeFilter
  notIn: [Timestamp!]
}

input NestedDateTimeNullableFilter {
  equals: Timestamp
  gt: Timestamp
  gte: Timestamp
  in: [Timestamp!]
  lt: Timestamp
  lte: Timestamp
  not: NestedDateTimeNullableFilter
  notIn: [Timestamp!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input OrderProcessingInput {
  driver_id: String!
  end_at: Timestamp
  legal_customer_order_ids: [String!]
  physical_customer_order_ids: [String!]
  start_at: Timestamp!
  status: StatusOrder!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  vehicle_id: String!
}

input OrderProcessingListRelationFilter {
  every: OrderProcessingWhereInput
  none: OrderProcessingWhereInput
  some: OrderProcessingWhereInput
}

type OrderProcessingModel {
  CreatedUser: UserModelRefereces!
  LegalClientOrders: [LegalClientOrderModel!]!
  OwnDriver: OwnDriverModel!
  PhysicalCustomerOrders: [PhysicalCustomerOrderModel!]!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  driver_id: String!
  end_at: Timestamp
  id: String!
  order_processing_number: String!
  start_at: Timestamp!
  status: StatusOrder!
  total_distance: Float!
  total_spend_liters: Float!
  total_spending_money: Float!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input OrderProcessingOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderProcessingOrderByWithRelationInput {
  Incident: IncidentOrderByRelationAggregateInput
  LegalClientOrder: LegalClientOrderOrderByRelationAggregateInput
  Manifest: ManifestOrderByRelationAggregateInput
  OwnDriver: OwnDriverOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  driver_id: SortOrder
  end_at: SortOrder
  id: SortOrder
  order_processing_number: SortOrder
  start_at: SortOrder
  status: SortOrder
  total_distance: SortOrder
  total_spend_liters: SortOrder
  total_spending_money: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OrderProcessingUpdateInput {
  disconnect_legal_client_order: [String!]
  disconnect_physical_customer_order: [String!]
  driver_id: String
  end_at: Timestamp
  legal_customer_order_ids: [String!]
  physical_customer_order_ids: [String!]
  start_at: Timestamp
  status: StatusOrder
  total_distance: Float
  total_spend_liters: Float
  total_spending_money: Float
  vehicle_id: String
}

input OrderProcessingUpdateManyInput {
  disconnect_legal_client_order: [String!]
  disconnect_physical_customer_order: [String!]
  driver_id: String
  end_at: Timestamp
  id: String!
  legal_customer_order_ids: [String!]
  physical_customer_order_ids: [String!]
  start_at: Timestamp
  status: StatusOrder
  total_distance: Float
  total_spend_liters: Float
  total_spending_money: Float
  vehicle_id: String
}

input OrderProcessingWhereInput {
  AND: [OrderProcessingWhereInput!]
  Incident: IncidentListRelationFilter
  LegalClientOrder: LegalClientOrderListRelationFilter
  Manifest: ManifestListRelationFilter
  NOT: [OrderProcessingWhereInput!]
  OR: [OrderProcessingWhereInput!]
  OwnDriver: OwnDriverWhereInput
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  driver_id: StringFilter
  end_at: DateTimeNullableFilter
  id: StringFilter
  order_processing_number: StringFilter
  start_at: DateTimeFilter
  status: StringFilter
  total_distance: FloatFilter
  total_spend_liters: FloatFilter
  total_spending_money: FloatFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input OutsourcedDriverInput {
  ContractOutsourcedDriver: ContractOutsourcedDriverReferecesInput!
  NaturalPerson: NaturalPersonInput!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle_id: String
  course_mopp: Boolean!
  outsourced_vehicle_id: String
}

input OutsourcedDriverListRelationFilter {
  every: OutsourcedDriverWhereInput
  none: OutsourcedDriverWhereInput
  some: OutsourcedDriverWhereInput
}

type OutsourcedDriverModel {
  CompanyVehicle: CompanyVehicleIModel
  ContractOutsourcedDriver: [ContractOutsourcedDriverModel!]!
  CreatedUser: UserModelRefereces!
  NaturalPerson: NaturalPersonModel!
  OutsourcedVehicle: OutsourcedVehicleIModel
  UpdatedUser: UserModelRefereces!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
  created_by: String!
  id: String!
  natural_person_id: String!
  outsourced_vehicle_id: String!
  updated_by: String!
}

input OutsourcedDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedDriverOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByWithRelationInput
  ContractOutsourcedDriver: ContractOutsourcedDriverOrderByRelationAggregateInput
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  company_vehicle_id: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  outsourced_vehicle_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedDriverUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle_id: String
  course_mopp: Boolean
  outsourced_vehicle_id: String
}

input OutsourcedDriverUpdateManyInput {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle_id: String
  course_mopp: Boolean
  id: String!
  outsourced_vehicle_id: String
}

input OutsourcedDriverWhereInput {
  AND: [OutsourcedDriverWhereInput!]
  CompanyVehicle: CompanyVehicleWhereInput
  ContractOutsourcedDriver: ContractOutsourcedDriverListRelationFilter
  CreatedBy: UserWhereInput
  NOT: [OutsourcedDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OutsourcedDriverWhereInput!]
  OutsourcedVehicle: OutsourcedVehicleWhereInput
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  company_vehicle_id: StringNullableFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  outsourced_vehicle_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyContractInput {
  carrierCompanyId: String!
  legalClientOrderId: String!
  outSourcedTransportCompanyId: String!
}

input OutsourcedTransportCompanyContractListRelationFilter {
  every: OutsourcedTransportCompanyContractWhereInput
  none: OutsourcedTransportCompanyContractWhereInput
  some: OutsourcedTransportCompanyContractWhereInput
}

type OutsourcedTransportCompanyContractModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  LegalClientOrder: LegalClientOrderModel!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  carrierCompanyId: String!
  contractNumber: String!
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalClientOrderId: String!
  outSourcedTransportCompanyId: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyContractOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyContractOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  LegalClientOrder: LegalClientOrderOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_company_id: SortOrder
  contract_number: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_client_order_id: SortOrder
  outsourced_transport_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyContractUpdateInput {
  carrierCompanyId: String
  outSourcedTransportCompanyId: String
}

input OutsourcedTransportCompanyContractWhereInput {
  AND: [OutsourcedTransportCompanyContractWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  LegalClientOrder: LegalClientOrderWhereInput
  NOT: [OutsourcedTransportCompanyContractWhereInput!]
  OR: [OutsourcedTransportCompanyContractWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  carrier_company_id: StringFilter
  contract_number: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_client_order_id: StringFilter
  outsourced_transport_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyDriverInput {
  NaturalPerson: NaturalPersonInput
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  course_mopp: Boolean!
  natural_person_id: String
  outsourced_transport_company_id: String!
}

input OutsourcedTransportCompanyDriverListRelationFilter {
  every: OutsourcedTransportCompanyDriverWhereInput
  none: OutsourcedTransportCompanyDriverWhereInput
  some: OutsourcedTransportCompanyDriverWhereInput
}

type OutsourcedTransportCompanyDriverModel {
  CreatedUser: UserModelRefereces!
  NaturalPerson: NaturalPersonModel!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  course_mopp: Boolean!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  outsourced_transport_company_id: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  outsourced_transport_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyDriverUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  course_mopp: Boolean
  natural_person_id: String
  outsourced_transport_company_id: String
}

input OutsourcedTransportCompanyDriverWhereInput {
  AND: [OutsourcedTransportCompanyDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedTransportCompanyDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OutsourcedTransportCompanyDriverWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  outsourced_transport_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportCompanyInput {
  LegalPerson: LegalPersonInput
  legalPersonId: String
}

input OutsourcedTransportCompanyListRelationFilter {
  every: OutsourcedTransportCompanyWhereInput
  none: OutsourcedTransportCompanyWhereInput
  some: OutsourcedTransportCompanyWhereInput
}

type OutsourcedTransportCompanyModel {
  Contracts: [OutsourcedTransportCompanyContractModel!]
  CreatedUser: UserModelRefereces!
  Drivers: [OutsourcedTransportCompanyDriverModel!]
  LegalPerson: LegalPersonModel!
  UpdatedUser: UserModelRefereces!
  Vehicles: [OutsourcedTransportVehicleModel!]
  created_at: Timestamp!
  created_by: String!
  id: String!
  legalPersonId: String!
  updated_at: Timestamp!
  updated_by: String!
}

input OutsourcedTransportCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportCompanyOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  OutsourcedCompanyVehicle: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OutsourcedTransportCompanyUpdateInput {
  LegalPerson: LegalPersonUpdateInput!
}

input OutsourcedTransportCompanyWhereInput {
  AND: [OutsourcedTransportCompanyWhereInput!]
  CreatedBy: UserWhereInput
  LegalPerson: LegalPersonWhereInput
  NOT: [OutsourcedTransportCompanyWhereInput!]
  OR: [OutsourcedTransportCompanyWhereInput!]
  OutsourcedCompanyVehicle: OutsourcedTransportVehicleListRelationFilter
  OutsourcedTransportCompanyContract: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyDriver: OutsourcedTransportCompanyDriverListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input OutsourcedTransportVehicleInput {
  Vehicle: VehicleInput!
  outsourced_company_id: String!
}

input OutsourcedTransportVehicleListRelationFilter {
  every: OutsourcedTransportVehicleWhereInput
  none: OutsourcedTransportVehicleWhereInput
  some: OutsourcedTransportVehicleWhereInput
}

type OutsourcedTransportVehicleModel {
  CreatedUser: UserModelRefereces!
  OutsourcedTransportCompany: OutsourcedTransportCompanyModel!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  created_by: String!
  id: String!
  outsourced_company_id: String!
  updated_at: Timestamp!
  updated_by: String!
  vehicle_id: String!
}

input OutsourcedTransportVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedTransportVehicleOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedTransportCompany: OutsourcedTransportCompanyOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  outsourced_company_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OutsourcedTransportVehicleUpdateInput {
  Vehicle: VehicleUpdateInput
  outsourced_company_id: String
}

input OutsourcedTransportVehicleWhereInput {
  AND: [OutsourcedTransportVehicleWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedTransportVehicleWhereInput!]
  OR: [OutsourcedTransportVehicleWhereInput!]
  OutsourcedTransportCompany: OutsourcedTransportCompanyWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  outsourced_company_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

type OutsourcedVehicleIModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  Vehicle: VehicleCarModel!
  created_at: Timestamp!
  id: String!
  updated_at: Timestamp!
  vehicle_id: String!
}

input OutsourcedVehicleInput {
  Vehicle: VehicleInput!
}

input OutsourcedVehicleListRelationFilter {
  every: OutsourcedVehicleWhereInput
  none: OutsourcedVehicleWhereInput
  some: OutsourcedVehicleWhereInput
}

input OutsourcedVehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input OutsourcedVehicleOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  OutsourcedDriver: OutsourcedDriverOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  vehicle_id: SortOrder
}

input OutsourcedVehicleUpdateInput {
  Vehicle: VehicleUpdateInput
}

input OutsourcedVehicleWhereInput {
  AND: [OutsourcedVehicleWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OutsourcedVehicleWhereInput!]
  OR: [OutsourcedVehicleWhereInput!]
  OutsourcedDriver: OutsourcedDriverWhereInput
  UpdatedBy: UserWhereInput
  Vehicle: VehicleWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  vehicle_id: StringFilter
}

input OwnDriverInput {
  NaturalPerson: NaturalPersonInput
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
  natural_person_id: String
}

input OwnDriverListRelationFilter {
  every: OwnDriverWhereInput
  none: OwnDriverWhereInput
  some: OwnDriverWhereInput
}

type OwnDriverModel {
  NaturalPerson: NaturalPersonModel!
  cnh: String!
  cnh_category: String!
  cnh_expiration: Timestamp!
  company_vehicle: Boolean!
  course_mopp: Boolean!
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input OwnDriverOrderByRelationAggregateInput {
  _count: SortOrder
}

input OwnDriverOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  OrderProcessing: OrderProcessingOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  cnh: SortOrder
  cnh_category: SortOrder
  cnh_expiration: SortOrder
  company_vehicle: SortOrder
  course_mopp: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input OwnDriverUpdate {
  NaturalPerson: NaturalPersonUpdate
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle: Boolean
  course_mopp: Boolean
}

input OwnDriverUpdateManyInput {
  NaturalPerson: NaturalPersonInput
  cnh: String
  cnh_category: String
  cnh_expiration: Timestamp
  company_vehicle: Boolean
  course_mopp: Boolean
  id: String!
  natural_person_id: String
}

input OwnDriverWhereInput {
  AND: [OwnDriverWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [OwnDriverWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [OwnDriverWhereInput!]
  OrderProcessing: OrderProcessingListRelationFilter
  UpdatedBy: UserWhereInput
  cnh: StringFilter
  cnh_category: StringFilter
  cnh_expiration: DateTimeFilter
  company_vehicle: BoolFilter
  course_mopp: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input PhysicalCustomerCteInput {
  cteType: TypesCteEnum!
  observations: String
  orderId: String!
}

input PhysicalCustomerCteListRelationFilter {
  every: PhysicalCustomerCteWhereInput
  none: PhysicalCustomerCteWhereInput
  some: PhysicalCustomerCteWhereInput
}

type PhysicalCustomerCteModel {
  acessKey: String!
  cteNumber: String!
  cteType: String!
  id: String!
  observations: String
  orderId: String!
}

input PhysicalCustomerCteOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerCteOrderByWithRelationInput {
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByWithRelationInput
  access_key: SortOrder
  autorization: SortOrder
  cte_number: SortOrder
  id: SortOrder
  observations: SortOrder
  order_id: SortOrder
  type_cte: SortOrder
}

input PhysicalCustomerCteUpdateInput {
  cteType: TypesCteEnum
  observations: String
  orderId: String
}

input PhysicalCustomerCteWhereInput {
  AND: [PhysicalCustomerCteWhereInput!]
  NOT: [PhysicalCustomerCteWhereInput!]
  OR: [PhysicalCustomerCteWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderWhereInput
  access_key: StringFilter
  autorization: DateTimeFilter
  cte_number: StringFilter
  id: StringFilter
  observations: StringFilter
  order_id: StringFilter
  type_cte: StringFilter
}

input PhysicalCustomerInput {
  NaturalPerson: NaturalPersonInput
  branch: String
  natural_person_id: String
}

input PhysicalCustomerListRelationFilter {
  every: PhysicalCustomerWhereInput
  none: PhysicalCustomerWhereInput
  some: PhysicalCustomerWhereInput
}

type PhysicalCustomerModel {
  NaturalPerson: NaturalPersonModel!
  branch: String
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  natural_person_id: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input PhysicalCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  branch: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input PhysicalCustomerOrderInput {
  carrier_id: String!
  expenses: [FreightExpenseUpdateOrderInput!]
  physicalCustomerId: String!
  quote_table_id: String!
}

input PhysicalCustomerOrderListRelationFilter {
  every: PhysicalCustomerOrderWhereInput
  none: PhysicalCustomerOrderWhereInput
  some: PhysicalCustomerOrderWhereInput
}

type PhysicalCustomerOrderModel {
  CarrierCompany: CarrierCompanyModel!
  CreatedUser: UserModelRefereces!
  PhysicalCustomer: PhysicalCustomerModel!
  Quote: PhysicalCustomerQuoteTableModel!
  UpdatedUser: UserModelRefereces!
  calculate_cofins: Float!
  calculate_icms: Float!
  calculated_pis: Float!
  carrier_id: String!
  cofins_tax: Float!
  created_at: Timestamp!
  created_by: String!
  expenses: [FreightExpenseOrderModel!]!
  icms_tax: Float!
  id: String!
  order: String!
  physicalCustomerId: String!
  pis_tax: Float!
  quote_table_id: String!
  total_receivable: Float
  total_shipping_cost: Float
  total_tax_payable: Float
  updated_at: Timestamp!
  updated_by: String!
}

input PhysicalCustomerOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerOrderOrderByWithRelationInput {
  CarrierCompany: CarrierCompanyOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  FreightExpenses: FreightExpensesOrderByRelationAggregateInput
  OrderProcessing: OrderProcessingOrderByWithRelationInput
  PhysicalCustomer: PhysicalCustomerOrderByWithRelationInput
  PhysicalCustomerCte: PhysicalCustomerCteOrderByRelationAggregateInput
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  carrier_id: SortOrder
  completedOrdersId: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  order: SortOrder
  order_processing_id: SortOrder
  physical_customer_id: SortOrder
  quote_table_id: SortOrder
  total_receivable: SortOrder
  total_shipping_cost: SortOrder
  total_tax_payable: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input PhysicalCustomerOrderUpdateInput {
  carrier_id: String
  deleted_expenses: [String!]
  expenses: [FreightExpenseUpdateOrderInput!]
  physicalCustomerId: String
  quote_table_id: String
}

input PhysicalCustomerOrderUpdateManyInput {
  carrier_id: String
  expenses: [FreightExpenseUpdateOrderInput!]
  id: String!
  physicalCustomerId: String
  quote_table_id: String
}

input PhysicalCustomerOrderWhereInput {
  AND: [PhysicalCustomerOrderWhereInput!]
  CarrierCompany: CarrierCompanyWhereInput
  CreatedBy: UserWhereInput
  FreightExpenses: FreightExpensesListRelationFilter
  NOT: [PhysicalCustomerOrderWhereInput!]
  OR: [PhysicalCustomerOrderWhereInput!]
  OrderProcessing: OrderProcessingWhereInput
  PhysicalCustomer: PhysicalCustomerWhereInput
  PhysicalCustomerCte: PhysicalCustomerCteListRelationFilter
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableWhereInput
  UpdatedBy: UserWhereInput
  carrier_id: StringFilter
  completedOrdersId: StringNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  order: StringFilter
  order_processing_id: StringNullableFilter
  physical_customer_id: StringFilter
  quote_table_id: StringFilter
  total_receivable: FloatFilter
  total_shipping_cost: FloatFilter
  total_tax_payable: FloatFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input PhysicalCustomerQuoteTableInput {
  adressDestiny: AdressInput!
  adressOrigin: AdressInput!
  amount: Float!
  description: String!
  formPayment: FormPayment!
  kindService: KindOfServicerOrder!
  mass: Float!
  nf_number: String!
  nf_serie: String!
  nf_value: Float!
  recipientId: String!
  senderId: String!
  typeMerchandise: TypeMerchandise!
  volume: Float!
  who_pays: WhoIsPay!
}

input PhysicalCustomerQuoteTableListRelationFilter {
  every: PhysicalCustomerQuoteTableWhereInput
  none: PhysicalCustomerQuoteTableWhereInput
  some: PhysicalCustomerQuoteTableWhereInput
}

type PhysicalCustomerQuoteTableModel {
  Icms: IcmsModel!
  Recipient: RecipientModel!
  Sender: SenderModel!
  adressDestiny: AdressModel!
  adressOrigin: AdressModel!
  amount: Float!
  codQuote: String!
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  description: String!
  digital_signature: String!
  formPayment: String!
  icms_id: String!
  id: String!
  kindService: String!
  mass: Float!
  nf_number: String!
  nf_serie: String!
  nf_value: Float!
  recipientId: String!
  senderId: String!
  typeMerchandise: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
  volume: Float!
  who_pays: String!
}

input PhysicalCustomerQuoteTableOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhysicalCustomerQuoteTableOrderByWithRelationInput {
  AdressDestiny: AdressesOrderByWithRelationInput
  AdressOrigin: AdressesOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  Icms: IcmsOrderByWithRelationInput
  PhysicalCustomerOrder: PhysicalCustomerOrderOrderByRelationAggregateInput
  Recipient: RecipientOrderByWithRelationInput
  Sender: SenderOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  adress_destiny_id: SortOrder
  adress_origin_id: SortOrder
  amount: SortOrder
  cod_quote: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  description: SortOrder
  digital_signature: SortOrder
  form_payment: SortOrder
  icms_id: SortOrder
  id: SortOrder
  kind_service: SortOrder
  mass: SortOrder
  nf_number: SortOrder
  nf_serie: SortOrder
  nf_value: SortOrder
  recipient_id: SortOrder
  senderId: SortOrder
  type_merchandise: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  volume: SortOrder
  who_pays: SortOrder
}

input PhysicalCustomerQuoteTableUpdate {
  adressDestiny: AdressInput
  adressOrigin: AdressInput
  amount: Float
  description: String
  formPayment: FormPayment
  kindService: KindOfServicerOrder
  mass: Float
  nf_number: String
  nf_serie: String
  nf_value: Float
  recipientId: String
  senderId: String
  typeMerchandise: TypeMerchandise
  volume: Float
  who_pays: WhoIsPay
}

input PhysicalCustomerQuoteTableUpdateManyInput {
  adressDestiny: AdressInput
  adressOrigin: AdressInput
  amount: Float
  description: String
  formPayment: FormPayment
  id: String!
  kindService: KindOfServicerOrder
  mass: Float
  nf_number: String
  nf_serie: String
  nf_value: Float
  recipientId: String
  senderId: String
  typeMerchandise: TypeMerchandise
  volume: Float
  who_pays: WhoIsPay
}

input PhysicalCustomerQuoteTableWhereInput {
  AND: [PhysicalCustomerQuoteTableWhereInput!]
  AdressDestiny: AdressesWhereInput
  AdressOrigin: AdressesWhereInput
  CreatedBy: UserWhereInput
  Icms: IcmsWhereInput
  NOT: [PhysicalCustomerQuoteTableWhereInput!]
  OR: [PhysicalCustomerQuoteTableWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  Recipient: RecipientWhereInput
  Sender: SenderWhereInput
  UpdatedBy: UserWhereInput
  adress_destiny_id: StringFilter
  adress_origin_id: StringFilter
  amount: IntFilter
  cod_quote: StringFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  description: StringFilter
  digital_signature: StringFilter
  form_payment: StringFilter
  icms_id: StringFilter
  id: StringFilter
  kind_service: StringFilter
  mass: FloatFilter
  nf_number: StringFilter
  nf_serie: StringFilter
  nf_value: FloatFilter
  recipient_id: StringFilter
  senderId: StringFilter
  type_merchandise: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  volume: FloatFilter
  who_pays: StringFilter
}

input PhysicalCustomerUpdateInput {
  NaturalPerson: NaturalPersonUpdate
  branch: String
  natural_person_id: String
}

input PhysicalCustomerUpdateManyInput {
  NaturalPerson: NaturalPersonInput
  branch: String
  id: String!
  natural_person_id: String
}

input PhysicalCustomerWhereInput {
  AND: [PhysicalCustomerWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [PhysicalCustomerWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [PhysicalCustomerWhereInput!]
  PhysicalCustomerOrder: PhysicalCustomerOrderListRelationFilter
  UpdatedBy: UserWhereInput
  branch: StringNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  natural_person_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type Query {
  countFreightExpenses(where: FreightExpensesWhereInput): Float!
  countIcms(where: IcmsWhereInput): Float!
  countIncident(where: IncidentWhereInput): Float!
  countLegalClientOrder(where: LegalClientOrderWhereInput): Int!
  countLegalClientQuoteTable(where: LegalClientQuoteTableWhereInput): Int!
  countLegalContract(where: LegalContractWhereInput): Int!
  countMaintenance(where: MaintenanceWhereInput): Int!
  countMaintenanceCompany(where: MaintenanceCompanyWhereInput): Int!
  countManifest(where: ManifestWhereInput): Int!
  countOrderProcessing(where: OrderProcessingWhereInput): Int!
  countOutsourcedDriver(where: OutsourcedDriverWhereInput): Int!
  countPhysicalCustomerOrder(where: PhysicalCustomerOrderWhereInput): Int!
  countPhysicalCustomerQuoteTable(where: PhysicalCustomerQuoteTableWhereInput): Int!
  generateLegalClientCte(request: CtePdfLegalClientInput!): CtePDfModel!
  generatePhysicalCustomerCte(request: CtePdfPhysicalCustomerInput!): CtePDfModel!
  getAllCarrierCompany(limit: Int! = 25, offset: Int! = 0, sort: CarrierCompanyOrderByWithRelationInput, where: CarrierCompanyWhereInput): [CarrierCompanyModel!]
  getAllCiotForLegalClient(limit: Int! = 25, offset: Int! = 0, sort: CiotForLegalClientOrderByWithRelationInput, where: CiotForLegalClientWhereInput): [CiotForLegalClientModel!]
  getAllCompanyVehicle(limit: Int! = 25, offset: Int! = 0, sort: CompanyVehicleOrderByWithRelationInput, where: CompanyVehicleWhereInput): [CompanyVehicleIModel!]!
  getAllContractOutsourcedDriver(limit: Int! = 25, offset: Int! = 0, sort: ContractOutsourcedDriverOrderByWithRelationInput, where: ContractOutsourcedDriverWhereInput): [ContractOutsourcedDriverModel!]!
  getAllFreightExpenses(limit: Int! = 25, offset: Int! = 0, sort: FreightExpensesOrderByWithRelationInput, where: FreightExpensesWhereInput): [FreightExpenseModel!]
  getAllICMS(limit: Int! = 25, offset: Int! = 0, sort: IcmsOrderByWithRelationInput, where: IcmsWhereInput): [IcmsModel!]
  getAllIncidents(limit: Int! = 25, offset: Int! = 0, sort: IncidentOrderByWithRelationInput, where: IncidentWhereInput): [IncidentModel!]
  getAllLegalClient(limit: Int! = 25, offset: Int! = 0, sort: LegalClientOrderByWithRelationInput, where: LegalClientWhereInput): [LegalClientModel!]
  getAllLegalClientCte(limit: Int! = 25, offset: Int! = 0, sort: LegalClientCteOrderByWithRelationInput, where: OwnDriverWhereInput): [LegalClientCteModel!]!
  getAllLegalClientOrder(limit: Int! = 25, offset: Int! = 0, sort: LegalClientOrderOrderByWithRelationInput, where: LegalClientOrderWhereInput): [LegalClientOrderModel!]
  getAllLegalClientQuoteTable(limit: Int! = 25, offset: Int! = 0, sort: LegalClientQuoteTableOrderByWithRelationInput, where: LegalClientQuoteTableWhereInput): [LegalClientQuoteTableModel!]!
  getAllLegalContract(limit: Int! = 25, offset: Int! = 0, sort: LegalContractOrderByWithRelationInput, where: LegalContractWhereInput): [LegalContractModel!]
  getAllLegalPerson(limit: Int! = 25, offset: Int! = 0, sort: LegalPersonOrderByWithRelationInput, where: LegalPersonWhereInput): [LegalPersonModel!]
  getAllMaintenance(limit: Int! = 25, offset: Int! = 0, sort: MaintenanceOrderByWithRelationInput, where: MaintenanceWhereInput): [MaintenanceModel!]
  getAllMaintenanceCompany(limit: Int! = 25, offset: Int! = 0, sort: MaintenanceCompanyOrderByWithRelationInput, where: MaintenanceCompanyWhereInput): [MaintenanceCompanyModel!]
  getAllManifest(limit: Int! = 25, offset: Int! = 0, sort: ManifestOrderByWithRelationInput, where: ManifestWhereInput): [ManifestModel!]
  getAllNaturalPerson(limit: Int! = 25, offset: Int! = 0, sort: NaturalPersonOrderByWithRelationInput, where: NaturalPersonWhereInput): [NaturalPersonModel!]
  getAllOrderProcessing(limit: Int! = 25, offset: Int! = 0, sort: OrderProcessingOrderByWithRelationInput, where: OrderProcessingWhereInput): [OrderProcessingModel!]!
  getAllOutsourcedDriver(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedDriverOrderByWithRelationInput, where: OutsourcedDriverWhereInput): [OutsourcedDriverModel!]!
  getAllOutsourcedTransportCompany(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyOrderByWithRelationInput, where: OutsourcedTransportCompanyWhereInput): [OutsourcedTransportCompanyModel!]
  getAllOutsourcedTransportCompanyContract(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyOrderByWithRelationInput, where: OutsourcedTransportCompanyWhereInput): [OutsourcedTransportCompanyContractModel!]
  getAllOutsourcedTransportCompanyDriver(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportCompanyDriverOrderByWithRelationInput, where: OutsourcedTransportCompanyDriverWhereInput): [OutsourcedTransportCompanyDriverModel!]
  getAllOutsourcedTransportVehicle(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportVehicleOrderByWithRelationInput, where: OutsourcedTransportVehicleWhereInput): [OutsourcedTransportVehicleModel!]
  getAllOutsourcedVehicle(limit: Int! = 25, offset: Int! = 0, sort: OutsourcedTransportVehicleOrderByWithRelationInput, where: OutsourcedTransportVehicleWhereInput): [OutsourcedVehicleIModel!]!
  getAllOwnDriver(limit: Int! = 25, offset: Int! = 0, sort: OwnDriverOrderByWithRelationInput, where: OwnDriverWhereInput): [OwnDriverModel!]!
  getAllPhysicalCustomer(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerOrderByWithRelationInput, where: PhysicalCustomerWhereInput): [PhysicalCustomerModel!]!
  getAllPhysicalCustomerCte(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerCteOrderByWithRelationInput, where: OwnDriverWhereInput): [PhysicalCustomerCteModel!]!
  getAllPhysicalCustomerOrder(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerOrderOrderByWithRelationInput, where: PhysicalCustomerOrderWhereInput): [PhysicalCustomerOrderModel!]
  getAllPhysicalCustomerQuoteTable(limit: Int! = 25, offset: Int! = 0, sort: PhysicalCustomerQuoteTableOrderByWithRelationInput, where: PhysicalCustomerQuoteTableWhereInput): [PhysicalCustomerQuoteTableModel!]!
  getAllRecipient(limit: Int! = 25, offset: Int! = 0, sort: RecipientOrderByWithRelationInput, where: RecipientWhereInput): [RecipientModel!]
  getAllSender(limit: Int! = 25, offset: Int! = 0, sort: SenderOrderByWithRelationInput, where: SenderWhereInput): [SenderModel!]
  getAllTypeOfMaintenance(limit: Int! = 25, offset: Int! = 0, sort: TypeOfMaintenanceOrderByWithRelationInput, where: TypeOfMaintenanceWhereInput): [TypeOfMaintenanceModel!]
  getAllVehicleBodywork(limit: Int! = 25, offset: Int! = 0, sort: VehicleBodyworkOrderByWithRelationInput, where: VehicleBodyworkWhereInput): [VehicleBodyworkModel!]
  getAllVehicleBrand(limit: Int! = 25, offset: Int! = 0, sort: VehicleBrandOrderByWithRelationInput, where: VehicleBrandWhereInput): [VehicleBrandModel!]!
  getAllVehicleModel(limit: Int! = 25, offset: Int! = 0, sort: VehicleModelOrderByWithRelationInput, where: VehicleModelWhereInput): [VehicleModelGraphql!]
  getAllVehicleTypes(limit: Int! = 25, offset: Int! = 0, sort: VehicleTypeOrderByWithRelationInput, where: VehicleTypeWhereInput): [VehicleTypeModel!]
  getAllVehicles(limit: Int! = 25, offset: Int! = 0, sort: VehicleOrderByWithRelationInput, where: VehicleWhereInput): [VehicleCarModel!]
  getCarrierCompanyModel(cnpj: String, corporateName: String, fantasyName: String, legalClientId: String, legalPersonId: String): CarrierCompanyModel!
  getCiotForLegalClientModel(ciot: String, id: String): CiotForLegalClientModel!
  getCompanyVehicle(id: String, plate: String, vehicleId: String): CompanyVehicleIModel!
  getContractOutsourcedDriver(contractNumber: String, id: String): ContractOutsourcedDriverModel!
  getFreightExpense(id: String): FreightExpenseModel!
  getICMS(StateRelation: StateRelationIcmsArgs, id: String): IcmsModel!
  getIncident(id: String): IncidentModel!
  getLegalClientCte(acessKey: String, cteNumber: String, id: String): LegalClientCteModel
  getLegalClientModel(cnpj: String, corporateName: String, fantasyName: String, legalClientId: String, legalPersonId: String): LegalClientModel!
  getLegalClientOrderModel(id: String, order: String): LegalClientOrderModel
  getLegalClientQuoteTable(cod_quote: String, id: String): LegalClientQuoteTableModel
  getLegalContractModel(contractNumber: String, id: String): LegalContractModel!
  getMaintenance(id: String!): MaintenanceModel!
  getMaintenanceCompanyModel(cnpj: String, corporateName: String, fantasyName: String, id: String, legalPersonId: String): MaintenanceCompanyModel!
  getManifest(id: String!): ManifestModel!
  getOrderProcessing(id: String, order_processing: String, vehicleData: GetVehicleTypeArgs): OrderProcessingModel!
  getOutsourcedDriver(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OutsourcedDriverModel!
  getOutsourcedTransportCompanyContractModel(contractNumber: String, id: String): OutsourcedTransportCompanyContractModel
  getOutsourcedTransportCompanyDriverModel(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OutsourcedTransportCompanyDriverModel!
  getOutsourcedTransportCompanyModel(cnpj: String, corporateName: String, fantasyName: String, id: String, legalPersonId: String): OutsourcedTransportCompanyModel
  getOutsourcedTransportVehicleModel(id: String, plate: String, vehicleId: String): OutsourcedTransportVehicleModel
  getOutsourcedVehicle(id: String, plate: String, vehicleId: String): OutsourcedVehicleIModel!
  getOwnDriver(cnh: String, cpf: String, id: String, naturalPersonId: String, rg: String): OwnDriverModel
  getPhysicalCustomer(cpf: String, id: String, naturalPersonId: String, rg: String): PhysicalCustomerModel
  getPhysicalCustomerCte(acessKey: String, cteNumber: String, id: String): PhysicalCustomerCteModel
  getPhysicalCustomerOrderModel(id: String, order: String): PhysicalCustomerOrderModel
  getPhysicalCustomerQuoteTable(cod_quote: String, id: String): PhysicalCustomerQuoteTableModel
  getRecipient(id: String, legalPerson: GetLegalPersonInput, naturalPerson: GetNaturalPersonInput): RecipientModel!
  getSender(id: String, legalPerson: GetLegalPersonInput, naturalPerson: GetNaturalPersonInput): SenderModel!
  getTypeOfMaintenance(id: String): TypeOfMaintenanceModel!
  getVehicle(plate: String, vehicleId: String): VehicleCarModel!
  getVehicleBodyworkModel(id: String, name: String): VehicleBodyworkModel!
  getVehicleBrand(id: String, name: String): VehicleBrandModel!
  getVehicleModel(id: String, name: String): VehicleModelGraphql!
  getVehicleType(id: String, name: String): VehicleTypeModel!
  totalCarrierCompanies(where: CarrierCompanyWhereInput): Float!
  totalCompanyVehicles(where: CompanyVehicleWhereInput): Float!
  totalContractOutsourcedDriver(where: ContractOutsourcedDriverWhereInput): Float!
  totalLegalClients(where: LegalClientWhereInput): Float!
  totalOwnDrivers(where: OwnDriverWhereInput): Float!
  totalPhysicalCustomers(where: PhysicalCustomerWhereInput): Float!
  totalRecipients(where: RecipientWhereInput): Float!
  totalSenders(where: SenderWhereInput): Float!
  totalUsers(where: UserWhereInput): Float!
  totalVehicleBodyworks(where: VehicleBodyworkWhereInput): Float!
  totalVehicleBrands(where: VehicleBrandWhereInput): Float!
  totalVehicleModels(where: VehicleModelWhereInput): Float!
  totalVehicleTypes(where: VehicleTypeWhereInput): Float!
  user(email: String, id: String, username: String): UserModel!
  users(limit: Int! = 25, offset: Int! = 0, sort: UserOrderByWithRelationInput, where: UserWhereInput): [UserModel!]!
}

enum QueryMode {
  default
  insensitive
}

input RecipientInput {
  LegalPerson: LegalPersonInput
  NaturalPerson: NaturalPersonInput
  legal_person_id: String
  natural_person_id: String
}

input RecipientListRelationFilter {
  every: RecipientWhereInput
  none: RecipientWhereInput
  some: RecipientWhereInput
}

type RecipientModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel
  NaturalPerson: NaturalPersonModel
  UpdatedUser: UserModelRefereces!
  created_by: String!
  id: String!
  legal_person_id: String
  natural_person_id: String
  updated_by: String!
}

input RecipientOrderByRelationAggregateInput {
  _count: SortOrder
}

input RecipientOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientQuoteTable: LegalClientQuoteTableOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input RecipientUpdateInput {
  LegalPerson: LegalPersonUpdateInput
  NaturalPerson: NaturalPersonUpdate
}

input RecipientUpdateManyInput {
  LegalPerson: LegalPersonInput
  NaturalPerson: NaturalPersonInput
  id: String!
  legal_person_id: String
  natural_person_id: String
}

input RecipientWhereInput {
  AND: [RecipientWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientQuoteTable: LegalClientQuoteTableListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [RecipientWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [RecipientWhereInput!]
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringNullableFilter
  natural_person_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input SenderInput {
  LegalPerson: LegalPersonInput
  NaturalPerson: NaturalPersonInput
  legal_person_id: String
  natural_person_id: String
}

input SenderListRelationFilter {
  every: SenderWhereInput
  none: SenderWhereInput
  some: SenderWhereInput
}

type SenderModel {
  CreatedUser: UserModelRefereces!
  LegalPerson: LegalPersonModel
  NaturalPerson: NaturalPersonModel
  UpdatedUser: UserModelRefereces!
  created_by: String!
  id: String!
  legal_person_id: String
  natural_person_id: String
  updated_by: String!
}

input SenderOrderByRelationAggregateInput {
  _count: SortOrder
}

input SenderOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  LegalClientQuoteTable: LegalClientQuoteTableOrderByRelationAggregateInput
  LegalPerson: LegalPersonOrderByWithRelationInput
  NaturalPerson: NaturalPersonOrderByWithRelationInput
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  legal_person_id: SortOrder
  natural_person_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input SenderUpdateInput {
  LegalPerson: LegalPersonUpdateInput
  NaturalPerson: NaturalPersonUpdate
}

input SenderUpdateManyInput {
  LegalPerson: LegalPersonInput
  NaturalPerson: NaturalPersonInput
  id: String!
  legal_person_id: String
  natural_person_id: String
}

input SenderWhereInput {
  AND: [SenderWhereInput!]
  CreatedBy: UserWhereInput
  LegalClientQuoteTable: LegalClientQuoteTableListRelationFilter
  LegalPerson: LegalPersonWhereInput
  NOT: [SenderWhereInput!]
  NaturalPerson: NaturalPersonWhereInput
  OR: [SenderWhereInput!]
  PhysicalCustomerQuoteTable: PhysicalCustomerQuoteTableListRelationFilter
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  legal_person_id: StringNullableFilter
  natural_person_id: StringNullableFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

enum SortOrder {
  asc
  desc
}

input StateRelationIcmsArgs {
  recipient_state: String!
  state_origin: String!
}

enum StatusOrder {
  CANCELED
  COMPLETE
  CREATED
  IN_INCIDENT
  IN_PROCESSING
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

enum TypeMaintenanceEnum {
  CORRECTIVE_MAINTENANCE
  DETECTIVE_MAINTENANCE
  PREDICTIVE_MAINTENANCE
  PREVENTIVE_MAINTENANCE
}

enum TypeMerchandise {
  BULK
  CONSUMER_GOODS
  CONTAINERIZED
  DRY
  FINISHED_PRODUCTS
  HAZARDOUS
  INDUSTRIAL_SUPPLIES
  LIQUID
  NON_PERISHABLES
  PACKAGED
  PERISHABLES
  RAW_MATERIALS
  SPECIAL_CARGO
}

input TypeOfMaintenanceInput {
  description: String!
  typeMaintenance: TypeMaintenanceEnum!
}

input TypeOfMaintenanceListRelationFilter {
  every: TypeOfMaintenanceWhereInput
  none: TypeOfMaintenanceWhereInput
  some: TypeOfMaintenanceWhereInput
}

type TypeOfMaintenanceModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  description: String!
  id: String!
  typeMaintenance: String!
  updated_at: Timestamp!
  updated_by: String!
}

input TypeOfMaintenanceOrderByRelationAggregateInput {
  _count: SortOrder
}

input TypeOfMaintenanceOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  Maintenance: MaintenanceOrderByRelationAggregateInput
  UpdatedBy: UserOrderByWithRelationInput
  created_at: SortOrder
  created_by: SortOrder
  description: SortOrder
  id: SortOrder
  typeMaintenance: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input TypeOfMaintenanceUpdateInput {
  description: String
  typeMaintenance: String
}

input TypeOfMaintenanceWhereInput {
  AND: [TypeOfMaintenanceWhereInput!]
  CreatedBy: UserWhereInput
  Maintenance: MaintenanceListRelationFilter
  NOT: [TypeOfMaintenanceWhereInput!]
  OR: [TypeOfMaintenanceWhereInput!]
  UpdatedBy: UserWhereInput
  created_at: DateTimeFilter
  created_by: StringFilter
  description: StringFilter
  id: StringFilter
  typeMaintenance: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

enum TypesCteEnum {
  CANCELLATION_CTE
  COMPLEMENTARY_CTE
  INTERMEDIATE_REROUTING_CTE
  NORMAL_CTE
  REPLACEMENT_CTE
  REROUTING_CTE
  STORAGE_CTE
  STORAGE_TRANSIT_CTE
  SUBCONTRACTING_CTE
}

enum UFEnum {
  AC
  AL
  AM
  AP
  BA
  CE
  DF
  ES
  GO
  MA
  MG
  MS
  MT
  PA
  PB
  PE
  PI
  PR
  RJ
  RN
  RO
  RR
  RS
  SC
  SE
  SP
  TO
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserInput {
  email: String!
  name: String!
  password: String!
  role: String!
  username: String!
}

type UserModel {
  avatar_url: String
  created_at: Timestamp
  email: String!
  id: String!
  name: String!
  password: String!
  role: String!
  updated_at: Timestamp
  username: String!
}

type UserModelRefereces {
  avatar_url: String
  email: String!
  id: String!
  name: String!
  username: String!
}

input UserOrderByWithRelationInput {
  CarrierCompanyCreatedBt: CarrierCompanyOrderByRelationAggregateInput
  CarrierCompanyUpdatedBy: CarrierCompanyOrderByRelationAggregateInput
  CiotForLegalCreatedByClient: CiotForLegalClientOrderByRelationAggregateInput
  CiotForLegalUpdatedByClient: CiotForLegalClientOrderByRelationAggregateInput
  CompanyVehicleCreatedBy: CompanyVehicleOrderByRelationAggregateInput
  CompanyVehicleUpdatedBy: CompanyVehicleOrderByRelationAggregateInput
  ContractOutsourcedDriverCreatedBy: ContractOutsourcedDriverOrderByRelationAggregateInput
  ContractOutsourcedDriverUpdatedBy: ContractOutsourcedDriverOrderByRelationAggregateInput
  IcmsCreatedBy: IcmsOrderByRelationAggregateInput
  IcmsUpdatedBy: IcmsOrderByRelationAggregateInput
  IncidentCreatedBy: IncidentOrderByRelationAggregateInput
  IncidentUpdatedBy: IncidentOrderByRelationAggregateInput
  LegalClientCreatedBy: LegalClientOrderByRelationAggregateInput
  LegalClientCustomerOrderCreatedBy: LegalClientOrderOrderByRelationAggregateInput
  LegalClientCustomerOrderUpdatedBy: LegalClientOrderOrderByRelationAggregateInput
  LegalClientQuoteTableCreatedBy: LegalClientQuoteTableOrderByRelationAggregateInput
  LegalClientQuoteTableUpdatedBy: LegalClientQuoteTableOrderByRelationAggregateInput
  LegalClientUpdatedBy: LegalClientOrderByRelationAggregateInput
  LegalContractCreatedBy: LegalContractOrderByRelationAggregateInput
  LegalContractUpdatedBy: LegalContractOrderByRelationAggregateInput
  MaintenanceCompanyCreatedBy: MaintenanceCompanyOrderByRelationAggregateInput
  MaintenanceCompanyUpdatedBy: MaintenanceCompanyOrderByRelationAggregateInput
  MaintenanceCreatedBy: MaintenanceOrderByRelationAggregateInput
  MaintenanceUpdatedBy: MaintenanceOrderByRelationAggregateInput
  OutsourcedDriverCreatedBy: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedDriverUpdatedBy: OutsourcedDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyContractCreatedBy: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyContractUpdatedBy: OutsourcedTransportCompanyContractOrderByRelationAggregateInput
  OutsourcedTransportCompanyCreatedBy: OutsourcedTransportCompanyOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriverCreatedBy: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyDriverUpdatedBy: OutsourcedTransportCompanyDriverOrderByRelationAggregateInput
  OutsourcedTransportCompanyUpdatedBy: OutsourcedTransportCompanyOrderByRelationAggregateInput
  OutsourcedTransportVehicleCreatedBy: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedTransportVehicleUpdatedBy: OutsourcedTransportVehicleOrderByRelationAggregateInput
  OutsourcedVehicleCreatedBy: OutsourcedVehicleOrderByRelationAggregateInput
  OutsourcedVehicleUpdatedBy: OutsourcedVehicleOrderByRelationAggregateInput
  OwnDriverCreatedBy: OwnDriverOrderByRelationAggregateInput
  OwnDriverUpdatedBy: OwnDriverOrderByRelationAggregateInput
  PhysicalCustomerCreatedBy: PhysicalCustomerOrderByRelationAggregateInput
  PhysicalCustomerOrderCreatedBy: PhysicalCustomerOrderOrderByRelationAggregateInput
  PhysicalCustomerOrderUpdatedBy: PhysicalCustomerOrderOrderByRelationAggregateInput
  PhysicalCustomerQuoteTableCreatedBy: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  PhysicalCustomerQuoteTableUpdatedBy: PhysicalCustomerQuoteTableOrderByRelationAggregateInput
  PhysicalCustomerUpdatedBy: PhysicalCustomerOrderByRelationAggregateInput
  RecipientCreatedBy: RecipientOrderByRelationAggregateInput
  RecipientUpdatedBy: RecipientOrderByRelationAggregateInput
  SenderCreatedBy: SenderOrderByRelationAggregateInput
  SenderUpdatedBy: SenderOrderByRelationAggregateInput
  TypeOfMaintenanceCreatedBy: TypeOfMaintenanceOrderByRelationAggregateInput
  TypeOfMaintenanceUpdatedBy: TypeOfMaintenanceOrderByRelationAggregateInput
  VehicleBodyworkCreatedBy: VehicleBodyworkOrderByRelationAggregateInput
  VehicleBodyworkUpdatedBy: VehicleBodyworkOrderByRelationAggregateInput
  VehicleBrandCreatedBy: VehicleBrandOrderByRelationAggregateInput
  VehicleBrandUpdatedBy: VehicleBrandOrderByRelationAggregateInput
  VehicleModelCreatedBy: VehicleModelOrderByRelationAggregateInput
  VehicleModelUpdatedBy: VehicleModelOrderByRelationAggregateInput
  VehicleTypeCreatedBy: VehicleTypeOrderByRelationAggregateInput
  VehicleTypeUpdatedBy: VehicleTypeOrderByRelationAggregateInput
  avatar_url: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updated_at: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  role: String
  username: String
}

input UserUpdateManyInput {
  email: String
  id: String!
  name: String
  password: String
  role: String
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  CarrierCompanyCreatedBt: CarrierCompanyListRelationFilter
  CarrierCompanyUpdatedBy: CarrierCompanyListRelationFilter
  CiotForLegalCreatedByClient: CiotForLegalClientListRelationFilter
  CiotForLegalUpdatedByClient: CiotForLegalClientListRelationFilter
  CompanyVehicleCreatedBy: CompanyVehicleListRelationFilter
  CompanyVehicleUpdatedBy: CompanyVehicleListRelationFilter
  ContractOutsourcedDriverCreatedBy: ContractOutsourcedDriverListRelationFilter
  ContractOutsourcedDriverUpdatedBy: ContractOutsourcedDriverListRelationFilter
  IcmsCreatedBy: IcmsListRelationFilter
  IcmsUpdatedBy: IcmsListRelationFilter
  IncidentCreatedBy: IncidentListRelationFilter
  IncidentUpdatedBy: IncidentListRelationFilter
  LegalClientCreatedBy: LegalClientListRelationFilter
  LegalClientCustomerOrderCreatedBy: LegalClientOrderListRelationFilter
  LegalClientCustomerOrderUpdatedBy: LegalClientOrderListRelationFilter
  LegalClientQuoteTableCreatedBy: LegalClientQuoteTableListRelationFilter
  LegalClientQuoteTableUpdatedBy: LegalClientQuoteTableListRelationFilter
  LegalClientUpdatedBy: LegalClientListRelationFilter
  LegalContractCreatedBy: LegalContractListRelationFilter
  LegalContractUpdatedBy: LegalContractListRelationFilter
  MaintenanceCompanyCreatedBy: MaintenanceCompanyListRelationFilter
  MaintenanceCompanyUpdatedBy: MaintenanceCompanyListRelationFilter
  MaintenanceCreatedBy: MaintenanceListRelationFilter
  MaintenanceUpdatedBy: MaintenanceListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  OutsourcedDriverCreatedBy: OutsourcedDriverListRelationFilter
  OutsourcedDriverUpdatedBy: OutsourcedDriverListRelationFilter
  OutsourcedTransportCompanyContractCreatedBy: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyContractUpdatedBy: OutsourcedTransportCompanyContractListRelationFilter
  OutsourcedTransportCompanyCreatedBy: OutsourcedTransportCompanyListRelationFilter
  OutsourcedTransportCompanyDriverCreatedBy: OutsourcedTransportCompanyDriverListRelationFilter
  OutsourcedTransportCompanyDriverUpdatedBy: OutsourcedTransportCompanyDriverListRelationFilter
  OutsourcedTransportCompanyUpdatedBy: OutsourcedTransportCompanyListRelationFilter
  OutsourcedTransportVehicleCreatedBy: OutsourcedTransportVehicleListRelationFilter
  OutsourcedTransportVehicleUpdatedBy: OutsourcedTransportVehicleListRelationFilter
  OutsourcedVehicleCreatedBy: OutsourcedVehicleListRelationFilter
  OutsourcedVehicleUpdatedBy: OutsourcedVehicleListRelationFilter
  OwnDriverCreatedBy: OwnDriverListRelationFilter
  OwnDriverUpdatedBy: OwnDriverListRelationFilter
  PhysicalCustomerCreatedBy: PhysicalCustomerListRelationFilter
  PhysicalCustomerOrderCreatedBy: PhysicalCustomerOrderListRelationFilter
  PhysicalCustomerOrderUpdatedBy: PhysicalCustomerOrderListRelationFilter
  PhysicalCustomerQuoteTableCreatedBy: PhysicalCustomerQuoteTableListRelationFilter
  PhysicalCustomerQuoteTableUpdatedBy: PhysicalCustomerQuoteTableListRelationFilter
  PhysicalCustomerUpdatedBy: PhysicalCustomerListRelationFilter
  RecipientCreatedBy: RecipientListRelationFilter
  RecipientUpdatedBy: RecipientListRelationFilter
  SenderCreatedBy: SenderListRelationFilter
  SenderUpdatedBy: SenderListRelationFilter
  TypeOfMaintenanceCreatedBy: TypeOfMaintenanceListRelationFilter
  TypeOfMaintenanceUpdatedBy: TypeOfMaintenanceListRelationFilter
  VehicleBodyworkCreatedBy: VehicleBodyworkListRelationFilter
  VehicleBodyworkUpdatedBy: VehicleBodyworkListRelationFilter
  VehicleBrandCreatedBy: VehicleBrandListRelationFilter
  VehicleBrandUpdatedBy: VehicleBrandListRelationFilter
  VehicleModelCreatedBy: VehicleModelListRelationFilter
  VehicleModelUpdatedBy: VehicleModelListRelationFilter
  VehicleTypeCreatedBy: VehicleTypeListRelationFilter
  VehicleTypeUpdatedBy: VehicleTypeListRelationFilter
  avatar_url: StringNullableFilter
  created_at: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  role: StringFilter
  updated_at: DateTimeFilter
  username: StringFilter
}

input VehicleBodyworkInput {
  axles: Int!
  mass: Float!
  name: String!
  volume: Float!
}

input VehicleBodyworkListRelationFilter {
  every: VehicleBodyworkWhereInput
  none: VehicleBodyworkWhereInput
  some: VehicleBodyworkWhereInput
}

type VehicleBodyworkModel {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleTypes: [VehicleTypeModel!]
  axles: Float!
  created_at: Timestamp!
  created_by: String!
  id: String!
  mass: Float!
  name: String!
  updated_at: Timestamp!
  updated_by: String!
  volume: Float!
}

input VehicleBodyworkOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleBodyworkOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleType: VehicleTypeOrderByRelationAggregateInput
  axles: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  mass: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  volume: SortOrder
}

input VehicleBodyworkUpdateInput {
  axles: Int
  mass: Float
  name: String
  volume: Float
}

input VehicleBodyworkUpdateManyInput {
  axles: Int
  id: String!
  mass: Float
  name: String
  volume: Float
}

input VehicleBodyworkWhereInput {
  AND: [VehicleBodyworkWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleBodyworkWhereInput!]
  OR: [VehicleBodyworkWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleType: VehicleTypeListRelationFilter
  axles: IntFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  mass: FloatFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  volume: FloatFilter
}

input VehicleBrandInput {
  name: String!
}

input VehicleBrandListRelationFilter {
  every: VehicleBrandWhereInput
  none: VehicleBrandWhereInput
  some: VehicleBrandWhereInput
}

type VehicleBrandModel {
  VehicleModels: VehicleModelGraphql
  createdUser: UserModelRefereces!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  updatedUser: UserModelRefereces!
  updated_at: Timestamp!
  updated_by: String!
}

input VehicleBrandOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleBrandOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleModel: VehicleModelOrderByRelationAggregateInput
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

type VehicleBrandReferences {
  id: String!
  name: String!
}

input VehicleBrandUpdateInput {
  name: String
}

input VehicleBrandUpdateManyInput {
  id: String!
  name: String
}

input VehicleBrandWhereInput {
  AND: [VehicleBrandWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleModel: VehicleModelListRelationFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

type VehicleCarModel {
  VehicleBrand: VehicleBrandReferences!
  VehicleModel: VehicleModelReferences
  VehicleType: VehicleTypeModel!
  antt: String!
  color: String!
  createdUser: UserModelRefereces!
  id: String!
  isIpvaPaid: Boolean!
  model_id: String!
  plate: String!
  registration: Timestamp!
  renavam: String!
  updatedUser: UserModelRefereces!
  year: String!
}

input VehicleInput {
  antt: String!
  color: String!
  isIpvaPaid: Boolean!
  model_id: String!
  plate: String!
  registration: Timestamp!
  renavam: String!
  year: String!
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

type VehicleModelGraphql {
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleBrand: VehicleBrandReferences!
  VehicleType: VehicleTypeModel!
  axles: Int!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  type_id: String!
  updated_at: Timestamp!
  updated_by: String!
  weight: Float!
}

input VehicleModelInput {
  axles: Float!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  name: String!
  type_id: String!
  weight: Float!
}

input VehicleModelListRelationFilter {
  every: VehicleModelWhereInput
  none: VehicleModelWhereInput
  some: VehicleModelWhereInput
}

input VehicleModelOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleModelOrderByWithRelationInput {
  Brand: VehicleBrandOrderByWithRelationInput
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  Vehicle: VehicleOrderByRelationAggregateInput
  VehicleType: VehicleTypeOrderByWithRelationInput
  axles: SortOrder
  brand_id: SortOrder
  capacity_max: SortOrder
  capacity_per_axle: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  type_id: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
  weight: SortOrder
}

type VehicleModelReferences {
  axles: Int!
  brand_id: String!
  capacity_max: Float!
  capacity_per_axle: Int!
  id: String!
  name: String!
  type_id: String!
  weight: Float!
}

input VehicleModelUpdateInput {
  axles: Float
  brand_id: String
  capacity_max: Float
  capacity_per_axle: Int
  name: String
  type_id: String
  weight: Float
}

input VehicleModelUpdateManyInput {
  axles: Float
  brand_id: String
  capacity_max: Float
  capacity_per_axle: Int
  id: String!
  name: String
  type_id: String
  weight: Float
}

input VehicleModelWhereInput {
  AND: [VehicleModelWhereInput!]
  Brand: VehicleBrandWhereInput
  CreatedBy: UserWhereInput
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  UpdatedBy: UserWhereInput
  Vehicle: VehicleListRelationFilter
  VehicleType: VehicleTypeWhereInput
  axles: IntFilter
  brand_id: StringFilter
  capacity_max: FloatFilter
  capacity_per_axle: IntNullableFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  type_id: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
  weight: FloatFilter
}

input VehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleOrderByWithRelationInput {
  CompanyVehicle: CompanyVehicleOrderByWithRelationInput
  Maintenance: MaintenanceOrderByRelationAggregateInput
  Model: VehicleModelOrderByWithRelationInput
  OrderProcessing: OrderProcessingOrderByWithRelationInput
  OutsourcedTransportVehicle: OutsourcedTransportVehicleOrderByWithRelationInput
  OutsourcedVehicle: OutsourcedVehicleOrderByWithRelationInput
  antt: SortOrder
  color: SortOrder
  id: SortOrder
  is_ipva_paid: SortOrder
  model_id: SortOrder
  plate: SortOrder
  registration: SortOrder
  renavam: SortOrder
  year: SortOrder
}

input VehicleTypeInput {
  bodyWork: Boolean!
  body_work_id: [String!]
  name: String!
}

input VehicleTypeListRelationFilter {
  every: VehicleTypeWhereInput
  none: VehicleTypeWhereInput
  some: VehicleTypeWhereInput
}

type VehicleTypeModel {
  BodyWorks: [VehicleBodyworkModel!]
  CpdatedUser: UserModelRefereces!
  CreatedUser: UserModelRefereces!
  UpdatedUser: UserModelRefereces!
  VehicleModels: VehicleModelGraphql
  bodyWork: Boolean!
  created_at: Timestamp!
  created_by: String!
  id: String!
  name: String!
  updated_at: Timestamp!
  updated_by: String!
}

input VehicleTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleTypeOrderByWithRelationInput {
  CreatedBy: UserOrderByWithRelationInput
  UpdatedBy: UserOrderByWithRelationInput
  VehicleBodyWork: VehicleBodyworkOrderByRelationAggregateInput
  VehicleModel: VehicleModelOrderByRelationAggregateInput
  bodywork: SortOrder
  created_at: SortOrder
  created_by: SortOrder
  id: SortOrder
  name: SortOrder
  updated_at: SortOrder
  updated_by: SortOrder
}

input VehicleTypeUpdateInput {
  bodyWork: Boolean
  body_work_id: [String!]
  del_body_id: [String!]
  name: String
}

input VehicleTypeUpdateManyInput {
  bodyWork: Boolean
  body_work_id: [String!]
  id: String!
  name: String
}

input VehicleTypeWhereInput {
  AND: [VehicleTypeWhereInput!]
  CreatedBy: UserWhereInput
  NOT: [VehicleTypeWhereInput!]
  OR: [VehicleTypeWhereInput!]
  UpdatedBy: UserWhereInput
  VehicleBodyWork: VehicleBodyworkListRelationFilter
  VehicleModel: VehicleModelListRelationFilter
  bodywork: BoolFilter
  created_at: DateTimeFilter
  created_by: StringFilter
  id: StringFilter
  name: StringFilter
  updated_at: DateTimeFilter
  updated_by: StringFilter
}

input VehicleUpdateInput {
  antt: String
  color: String
  isIpvaPaid: Boolean
  model_id: String
  plate: String
  registration: Timestamp
  renavam: String
  year: String
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  CompanyVehicle: CompanyVehicleWhereInput
  Maintenance: MaintenanceListRelationFilter
  Model: VehicleModelWhereInput
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  OrderProcessing: OrderProcessingWhereInput
  OutsourcedTransportVehicle: OutsourcedTransportVehicleWhereInput
  OutsourcedVehicle: OutsourcedVehicleWhereInput
  antt: StringFilter
  color: StringFilter
  id: StringFilter
  is_ipva_paid: BoolFilter
  model_id: StringFilter
  plate: StringFilter
  registration: DateTimeFilter
  renavam: StringFilter
  year: StringFilter
}

enum WhoIsPay {
  CARRIER
  RECIPIENT
  SENDER
  SERVICE_TAKER
}